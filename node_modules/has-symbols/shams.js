'use strict';

/* eslint complexity: [2, 18], max-statements: [2, 33] */
module.exports = function hasSymbols() ***REMOVED***
	if (typeof Symbol !== 'function' || typeof Object.getOwnPropertySymbols !== 'function') ***REMOVED*** return false; ***REMOVED***
	if (typeof Symbol.iterator === 'symbol') ***REMOVED*** return true; ***REMOVED***

	var obj = ***REMOVED******REMOVED***;
	var sym = Symbol('test');
	var symObj = Object(sym);
	if (typeof sym === 'string') ***REMOVED*** return false; ***REMOVED***

	if (Object.prototype.toString.call(sym) !== '[object Symbol]') ***REMOVED*** return false; ***REMOVED***
	if (Object.prototype.toString.call(symObj) !== '[object Symbol]') ***REMOVED*** return false; ***REMOVED***

	// temp disabled per https://github.com/ljharb/object.assign/issues/17
	// if (sym instanceof Symbol) ***REMOVED*** return false; ***REMOVED***
	// temp disabled per https://github.com/WebReflection/get-own-property-symbols/issues/4
	// if (!(symObj instanceof Symbol)) ***REMOVED*** return false; ***REMOVED***

	// if (typeof Symbol.prototype.toString !== 'function') ***REMOVED*** return false; ***REMOVED***
	// if (String(sym) !== Symbol.prototype.toString.call(sym)) ***REMOVED*** return false; ***REMOVED***

	var symVal = 42;
	obj[sym] = symVal;
	for (sym in obj) ***REMOVED*** return false; ***REMOVED*** // eslint-disable-line no-restricted-syntax, no-unreachable-loop
	if (typeof Object.keys === 'function' && Object.keys(obj).length !== 0) ***REMOVED*** return false; ***REMOVED***

	if (typeof Object.getOwnPropertyNames === 'function' && Object.getOwnPropertyNames(obj).length !== 0) ***REMOVED*** return false; ***REMOVED***

	var syms = Object.getOwnPropertySymbols(obj);
	if (syms.length !== 1 || syms[0] !== sym) ***REMOVED*** return false; ***REMOVED***

	if (!Object.prototype.propertyIsEnumerable.call(obj, sym)) ***REMOVED*** return false; ***REMOVED***

	if (typeof Object.getOwnPropertyDescriptor === 'function') ***REMOVED***
		var descriptor = Object.getOwnPropertyDescriptor(obj, sym);
		if (descriptor.value !== symVal || descriptor.enumerable !== true) ***REMOVED*** return false; ***REMOVED***
	***REMOVED***

	return true;
***REMOVED***;
