'use strict';

var utils = require('./utils');

var has = Object.prototype.hasOwnProperty;
var isArray = Array.isArray;

var defaults = ***REMOVED***
    allowDots: false,
    allowPrototypes: false,
    arrayLimit: 20,
    charset: 'utf-8',
    charsetSentinel: false,
    comma: false,
    decoder: utils.decode,
    delimiter: '&',
    depth: 5,
    ignoreQueryPrefix: false,
    interpretNumericEntities: false,
    parameterLimit: 1000,
    parseArrays: true,
    plainObjects: false,
    strictNullHandling: false
***REMOVED***;

var interpretNumericEntities = function (str) ***REMOVED***
    return str.replace(/&#(\d+);/g, function ($0, numberStr) ***REMOVED***
        return String.fromCharCode(parseInt(numberStr, 10));
    ***REMOVED***);
***REMOVED***;

var parseArrayValue = function (val, options) ***REMOVED***
    if (val && typeof val === 'string' && options.comma && val.indexOf(',') > -1) ***REMOVED***
        return val.split(',');
    ***REMOVED***

    return val;
***REMOVED***;

var maybeMap = function maybeMap(val, fn) ***REMOVED***
    if (isArray(val)) ***REMOVED***
        var mapped = [];
        for (var i = 0; i < val.length; i += 1) ***REMOVED***
            mapped.push(fn(val[i]));
        ***REMOVED***
        return mapped;
    ***REMOVED***
    return fn(val);
***REMOVED***;

// This is what browsers will submit when the ✓ character occurs in an
// application/x-www-form-urlencoded body and the encoding of the page containing
// the form is iso-8859-1, or when the submitted form has an accept-charset
// attribute of iso-8859-1. Presumably also with other charsets that do not contain
// the ✓ character, such as us-ascii.
var isoSentinel = 'utf8=%26%2310003%3B'; // encodeURIComponent('&#10003;')

// These are the percent-encoded utf-8 octets representing a checkmark, indicating that the request actually is utf-8 encoded.
var charsetSentinel = 'utf8=%E2%9C%93'; // encodeURIComponent('✓')

var parseValues = function parseQueryStringValues(str, options) ***REMOVED***
    var obj = ***REMOVED******REMOVED***;
    var cleanStr = options.ignoreQueryPrefix ? str.replace(/^\?/, '') : str;
    var limit = options.parameterLimit === Infinity ? undefined : options.parameterLimit;
    var parts = cleanStr.split(options.delimiter, limit);
    var skipIndex = -1; // Keep track of where the utf8 sentinel was found
    var i;

    var charset = options.charset;
    if (options.charsetSentinel) ***REMOVED***
        for (i = 0; i < parts.length; ++i) ***REMOVED***
            if (parts[i].indexOf('utf8=') === 0) ***REMOVED***
                if (parts[i] === charsetSentinel) ***REMOVED***
                    charset = 'utf-8';
                ***REMOVED*** else if (parts[i] === isoSentinel) ***REMOVED***
                    charset = 'iso-8859-1';
                ***REMOVED***
                skipIndex = i;
                i = parts.length; // The eslint settings do not allow break;
            ***REMOVED***
        ***REMOVED***
    ***REMOVED***

    for (i = 0; i < parts.length; ++i) ***REMOVED***
        if (i === skipIndex) ***REMOVED***
            continue;
        ***REMOVED***
        var part = parts[i];

        var bracketEqualsPos = part.indexOf(']=');
        var pos = bracketEqualsPos === -1 ? part.indexOf('=') : bracketEqualsPos + 1;

        var key, val;
        if (pos === -1) ***REMOVED***
            key = options.decoder(part, defaults.decoder, charset, 'key');
            val = options.strictNullHandling ? null : '';
        ***REMOVED*** else ***REMOVED***
            key = options.decoder(part.slice(0, pos), defaults.decoder, charset, 'key');
            val = maybeMap(
                parseArrayValue(part.slice(pos + 1), options),
                function (encodedVal) ***REMOVED***
                    return options.decoder(encodedVal, defaults.decoder, charset, 'value');
                ***REMOVED***
            );
        ***REMOVED***

        if (val && options.interpretNumericEntities && charset === 'iso-8859-1') ***REMOVED***
            val = interpretNumericEntities(val);
        ***REMOVED***

        if (part.indexOf('[]=') > -1) ***REMOVED***
            val = isArray(val) ? [val] : val;
        ***REMOVED***

        if (has.call(obj, key)) ***REMOVED***
            obj[key] = utils.combine(obj[key], val);
        ***REMOVED*** else ***REMOVED***
            obj[key] = val;
        ***REMOVED***
    ***REMOVED***

    return obj;
***REMOVED***;

var parseObject = function (chain, val, options, valuesParsed) ***REMOVED***
    var leaf = valuesParsed ? val : parseArrayValue(val, options);

    for (var i = chain.length - 1; i >= 0; --i) ***REMOVED***
        var obj;
        var root = chain[i];

        if (root === '[]' && options.parseArrays) ***REMOVED***
            obj = [].concat(leaf);
        ***REMOVED*** else ***REMOVED***
            obj = options.plainObjects ? Object.create(null) : ***REMOVED******REMOVED***;
            var cleanRoot = root.charAt(0) === '[' && root.charAt(root.length - 1) === ']' ? root.slice(1, -1) : root;
            var index = parseInt(cleanRoot, 10);
            if (!options.parseArrays && cleanRoot === '') ***REMOVED***
                obj = ***REMOVED*** 0: leaf ***REMOVED***;
            ***REMOVED*** else if (
                !isNaN(index)
                && root !== cleanRoot
                && String(index) === cleanRoot
                && index >= 0
                && (options.parseArrays && index <= options.arrayLimit)
            ) ***REMOVED***
                obj = [];
                obj[index] = leaf;
            ***REMOVED*** else ***REMOVED***
                obj[cleanRoot] = leaf;
            ***REMOVED***
        ***REMOVED***

        leaf = obj; // eslint-disable-line no-param-reassign
    ***REMOVED***

    return leaf;
***REMOVED***;

var parseKeys = function parseQueryStringKeys(givenKey, val, options, valuesParsed) ***REMOVED***
    if (!givenKey) ***REMOVED***
        return;
    ***REMOVED***

    // Transform dot notation to bracket notation
    var key = options.allowDots ? givenKey.replace(/\.([^.[]+)/g, '[$1]') : givenKey;

    // The regex chunks

    var brackets = /(\[[^[\]]*])/;
    var child = /(\[[^[\]]*])/g;

    // Get the parent

    var segment = options.depth > 0 && brackets.exec(key);
    var parent = segment ? key.slice(0, segment.index) : key;

    // Stash the parent if it exists

    var keys = [];
    if (parent) ***REMOVED***
        // If we aren't using plain objects, optionally prefix keys that would overwrite object prototype properties
        if (!options.plainObjects && has.call(Object.prototype, parent)) ***REMOVED***
            if (!options.allowPrototypes) ***REMOVED***
                return;
            ***REMOVED***
        ***REMOVED***

        keys.push(parent);
    ***REMOVED***

    // Loop through children appending to the array until we hit depth

    var i = 0;
    while (options.depth > 0 && (segment = child.exec(key)) !== null && i < options.depth) ***REMOVED***
        i += 1;
        if (!options.plainObjects && has.call(Object.prototype, segment[1].slice(1, -1))) ***REMOVED***
            if (!options.allowPrototypes) ***REMOVED***
                return;
            ***REMOVED***
        ***REMOVED***
        keys.push(segment[1]);
    ***REMOVED***

    // If there's a remainder, just add whatever is left

    if (segment) ***REMOVED***
        keys.push('[' + key.slice(segment.index) + ']');
    ***REMOVED***

    return parseObject(keys, val, options, valuesParsed);
***REMOVED***;

var normalizeParseOptions = function normalizeParseOptions(opts) ***REMOVED***
    if (!opts) ***REMOVED***
        return defaults;
    ***REMOVED***

    if (opts.decoder !== null && opts.decoder !== undefined && typeof opts.decoder !== 'function') ***REMOVED***
        throw new TypeError('Decoder has to be a function.');
    ***REMOVED***

    if (typeof opts.charset !== 'undefined' && opts.charset !== 'utf-8' && opts.charset !== 'iso-8859-1') ***REMOVED***
        throw new TypeError('The charset option must be either utf-8, iso-8859-1, or undefined');
    ***REMOVED***
    var charset = typeof opts.charset === 'undefined' ? defaults.charset : opts.charset;

    return ***REMOVED***
        allowDots: typeof opts.allowDots === 'undefined' ? defaults.allowDots : !!opts.allowDots,
        allowPrototypes: typeof opts.allowPrototypes === 'boolean' ? opts.allowPrototypes : defaults.allowPrototypes,
        arrayLimit: typeof opts.arrayLimit === 'number' ? opts.arrayLimit : defaults.arrayLimit,
        charset: charset,
        charsetSentinel: typeof opts.charsetSentinel === 'boolean' ? opts.charsetSentinel : defaults.charsetSentinel,
        comma: typeof opts.comma === 'boolean' ? opts.comma : defaults.comma,
        decoder: typeof opts.decoder === 'function' ? opts.decoder : defaults.decoder,
        delimiter: typeof opts.delimiter === 'string' || utils.isRegExp(opts.delimiter) ? opts.delimiter : defaults.delimiter,
        // eslint-disable-next-line no-implicit-coercion, no-extra-parens
        depth: (typeof opts.depth === 'number' || opts.depth === false) ? +opts.depth : defaults.depth,
        ignoreQueryPrefix: opts.ignoreQueryPrefix === true,
        interpretNumericEntities: typeof opts.interpretNumericEntities === 'boolean' ? opts.interpretNumericEntities : defaults.interpretNumericEntities,
        parameterLimit: typeof opts.parameterLimit === 'number' ? opts.parameterLimit : defaults.parameterLimit,
        parseArrays: opts.parseArrays !== false,
        plainObjects: typeof opts.plainObjects === 'boolean' ? opts.plainObjects : defaults.plainObjects,
        strictNullHandling: typeof opts.strictNullHandling === 'boolean' ? opts.strictNullHandling : defaults.strictNullHandling
    ***REMOVED***;
***REMOVED***;

module.exports = function (str, opts) ***REMOVED***
    var options = normalizeParseOptions(opts);

    if (str === '' || str === null || typeof str === 'undefined') ***REMOVED***
        return options.plainObjects ? Object.create(null) : ***REMOVED******REMOVED***;
    ***REMOVED***

    var tempObj = typeof str === 'string' ? parseValues(str, options) : str;
    var obj = options.plainObjects ? Object.create(null) : ***REMOVED******REMOVED***;

    // Iterate over the keys and setup the new object

    var keys = Object.keys(tempObj);
    for (var i = 0; i < keys.length; ++i) ***REMOVED***
        var key = keys[i];
        var newObj = parseKeys(key, tempObj[key], options, typeof str === 'string');
        obj = utils.merge(obj, newObj, options);
    ***REMOVED***

    return utils.compact(obj);
***REMOVED***;
