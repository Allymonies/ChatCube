import ***REMOVED*** __awaiter, __extends, __generator ***REMOVED*** from "tslib";
import ***REMOVED*** WebSocket ***REMOVED*** from '@d-fischer/isomorphic-ws';
import ***REMOVED*** AbstractConnection ***REMOVED*** from "./AbstractConnection.mjs";
var WebSocketConnection = /** @class */ (function (_super) ***REMOVED***
    __extends(WebSocketConnection, _super);
    function WebSocketConnection() ***REMOVED***
        var _this = _super !== null && _super.apply(this, arguments) || this;
        _this._socket = null;
        return _this;
    ***REMOVED***
    Object.defineProperty(WebSocketConnection.prototype, "port", ***REMOVED***
        get: function () ***REMOVED***
            return this._port;
    ***REMOVED***
        enumerable: false,
        configurable: true
    ***REMOVED***);
    Object.defineProperty(WebSocketConnection.prototype, "hasSocket", ***REMOVED***
        get: function () ***REMOVED***
            return !!this._socket;
    ***REMOVED***
        enumerable: false,
        configurable: true
    ***REMOVED***);
    WebSocketConnection.prototype.sendRaw = function (line) ***REMOVED***
        var _a;
        (_a = this._socket) === null || _a === void 0 ? void 0 : _a.send(line);
    ***REMOVED***;
    WebSocketConnection.prototype.connect = function () ***REMOVED***
        var _a;
        return __awaiter(this, void 0, Promise, function () ***REMOVED***
            var _this = this;
            return __generator(this, function (_b) ***REMOVED***
                switch (_b.label) ***REMOVED***
                    case 0:
                        (_a = this._logger) === null || _a === void 0 ? void 0 : _a.trace('WebSocketConnection connect');
                        return [4 /*yield*/, new Promise(function (resolve, reject) ***REMOVED***
                                var _a;
                                _this._connecting = true;
                                var url = "ws" + (_this._secure ? 's' : '') + "://" + _this._host + ":" + _this.port;
                                _this._socket = new WebSocket(url, (_a = _this._additionalOptions) === null || _a === void 0 ? void 0 : _a.wsOptions);
                                _this._socket.onopen = function () ***REMOVED***
                                    var _a;
                                    (_a = _this._logger) === null || _a === void 0 ? void 0 : _a.trace('WebSocketConnection onOpen');
                                    _this._connected = true;
                                    _this._connecting = false;
                                    _this.emit(_this.onConnect);
                                    resolve();
                                ***REMOVED***;
                                _this._socket.onmessage = function (_a) ***REMOVED***
                                    var data = _a.data;
                                    _this.receiveRaw(data.toString());
                                ***REMOVED***;
                                // The following empty error callback needs to exist so connection errors are passed down to `onclose` down below - otherwise the process just crashes instead
                                _this._socket.onerror = function (e) ***REMOVED***
                                    var _a;
                                    (_a = _this._logger) === null || _a === void 0 ? void 0 : _a.trace("WebSocketConnection onError message:" + e.message);
                                ***REMOVED***;
                                _this._socket.onclose = function (e) ***REMOVED***
                                    var _a;
                                    var wasConnected = _this._connected;
                                    (_a = _this._logger) === null || _a === void 0 ? void 0 : _a.trace("WebSocketConnection onClose wasConnected:" + wasConnected.toString() + " wasClean:" + e.wasClean.toString());
                                    _this._connected = false;
                                    _this._connecting = false;
                                    if (e.wasClean) ***REMOVED***
                                        _this.emit(_this.onDisconnect, true);
                                        _this.emit(_this.onEnd, true);
                                    ***REMOVED***
                                    else ***REMOVED***
                                        var err = new Error("[" + e.code + "] " + e.reason);
                                        _this.emit(_this.onDisconnect, false, err);
                                        _this.emit(_this.onEnd, false, err);
                                        if (!wasConnected) ***REMOVED***
                                            reject(err);
                                        ***REMOVED***
                                    ***REMOVED***
                                    if (_this._socket) ***REMOVED***
                                        _this._socket.onopen = null;
                                        _this._socket.onmessage = null;
                                        _this._socket.onerror = null;
                                        _this._socket.onclose = null;
                                        _this._socket = null;
                                    ***REMOVED***
                                ***REMOVED***;
                            ***REMOVED***)];
                    case 1:
                        _b.sent();
                        return [2 /*return*/];
                ***REMOVED***
            ***REMOVED***);
        ***REMOVED***);
    ***REMOVED***;
    WebSocketConnection.prototype.disconnect = function () ***REMOVED***
        var _a;
        return __awaiter(this, void 0, Promise, function () ***REMOVED***
            var _this = this;
            return __generator(this, function (_b) ***REMOVED***
                switch (_b.label) ***REMOVED***
                    case 0:
                        (_a = this._logger) === null || _a === void 0 ? void 0 : _a.trace('WebSocketConnection disconnect');
                        return [4 /*yield*/, new Promise(function (resolve) ***REMOVED***
                                if (_this._socket) ***REMOVED***
                                    var listener_1 = _this.onDisconnect(function () ***REMOVED***
                                        listener_1.unbind();
                                        resolve();
                                    ***REMOVED***);
                                    _this._socket.close();
                                ***REMOVED***
                                else ***REMOVED***
                                    resolve();
                                ***REMOVED***
                            ***REMOVED***)];
                    case 1:
                        _b.sent();
                        return [2 /*return*/];
                ***REMOVED***
            ***REMOVED***);
        ***REMOVED***);
    ***REMOVED***;
    return WebSocketConnection;
***REMOVED***(AbstractConnection));
export ***REMOVED*** WebSocketConnection ***REMOVED***;
//# sourceMappingURL=WebSocketConnection.mjs.map