import ***REMOVED*** __awaiter, __extends, __generator ***REMOVED*** from "tslib";
import ***REMOVED*** Socket ***REMOVED*** from 'net';
import * as tls from 'tls';
import ***REMOVED*** AbstractConnection ***REMOVED*** from "./AbstractConnection.mjs";
var DirectConnection = /** @class */ (function (_super) ***REMOVED***
    __extends(DirectConnection, _super);
    function DirectConnection() ***REMOVED***
        var _this = _super !== null && _super.apply(this, arguments) || this;
        _this._socket = null;
        return _this;
    ***REMOVED***
    Object.defineProperty(DirectConnection.prototype, "port", ***REMOVED***
        get: function () ***REMOVED***
            return this._port;
    ***REMOVED***
        enumerable: false,
        configurable: true
    ***REMOVED***);
    Object.defineProperty(DirectConnection.prototype, "hasSocket", ***REMOVED***
        get: function () ***REMOVED***
            return !!this._socket;
    ***REMOVED***
        enumerable: false,
        configurable: true
    ***REMOVED***);
    DirectConnection.prototype.sendRaw = function (line) ***REMOVED***
        var _a;
        (_a = this._socket) === null || _a === void 0 ? void 0 : _a.write(line);
    ***REMOVED***;
    DirectConnection.prototype.connect = function () ***REMOVED***
        var _a;
        return __awaiter(this, void 0, Promise, function () ***REMOVED***
            var _this = this;
            return __generator(this, function (_b) ***REMOVED***
                switch (_b.label) ***REMOVED***
                    case 0:
                        (_a = this._logger) === null || _a === void 0 ? void 0 : _a.trace('DirectConnection connect');
                        return [4 /*yield*/, new Promise(function (resolve, reject) ***REMOVED***
                                _this._connecting = true;
                                if (_this._secure) ***REMOVED***
                                    _this._socket = tls.connect(_this._port, _this._host);
                                ***REMOVED***
                                else ***REMOVED***
                                    _this._socket = new Socket();
                                    _this._socket.connect(_this._port, _this._host);
                                ***REMOVED***
                                _this._socket.on('connect', function () ***REMOVED***
                                    var _a;
                                    (_a = _this._logger) === null || _a === void 0 ? void 0 : _a.trace('DirectConnection onConnect');
                                    _this._connecting = false;
                                    _this._connected = true;
                                    _this.emit(_this.onConnect);
                                    resolve();
                                ***REMOVED***);
                                _this._socket.on('error', function (err) ***REMOVED***
                                    var _a;
                                    (_a = _this._logger) === null || _a === void 0 ? void 0 : _a.trace("DirectConnection onError message:" + err.message);
                                    _this._connected = false;
                                    _this._connecting = false;
                                    _this.emit(_this.onDisconnect, false, err);
                                    reject(err);
                                ***REMOVED***);
                                _this._socket.on('data', function (data) ***REMOVED***
                                    _this.receiveRaw(data.toString());
                                ***REMOVED***);
                                _this._socket.on('close', function (hadError) ***REMOVED***
                                    var _a;
                                    (_a = _this._logger) === null || _a === void 0 ? void 0 : _a.trace("DirectConnection onClose hadError:" + hadError.toString());
                                    if (!hadError) ***REMOVED***
                                        _this._connected = false;
                                        _this._connecting = false;
                                        _this.emit(_this.onDisconnect, true);
                                    ***REMOVED***
                                    if (_this._socket) ***REMOVED***
                                        _this._socket.removeAllListeners('connect');
                                        _this._socket.removeAllListeners('error');
                                        _this._socket.removeAllListeners('data');
                                        _this._socket.removeAllListeners('close');
                                        _this._socket = null;
                                    ***REMOVED***
                                ***REMOVED***);
                            ***REMOVED***)];
                    case 1:
                        _b.sent();
                        return [2 /*return*/];
                ***REMOVED***
            ***REMOVED***);
        ***REMOVED***);
    ***REMOVED***;
    DirectConnection.prototype.disconnect = function () ***REMOVED***
        var _a;
        return __awaiter(this, void 0, Promise, function () ***REMOVED***
            var _this = this;
            return __generator(this, function (_b) ***REMOVED***
                switch (_b.label) ***REMOVED***
                    case 0:
                        (_a = this._logger) === null || _a === void 0 ? void 0 : _a.trace('DirectConnection disconnect');
                        return [4 /*yield*/, new Promise(function (resolve) ***REMOVED***
                                if (_this._socket) ***REMOVED***
                                    var listener_1 = _this.onDisconnect(function () ***REMOVED***
                                        listener_1.unbind();
                                        resolve();
                                    ***REMOVED***);
                                    _this._socket.end();
                                ***REMOVED***
                                else ***REMOVED***
                                    resolve();
                                ***REMOVED***
                            ***REMOVED***)];
                    case 1:
                        _b.sent();
                        return [2 /*return*/];
                ***REMOVED***
            ***REMOVED***);
        ***REMOVED***);
    ***REMOVED***;
    return DirectConnection;
***REMOVED***(AbstractConnection));
export ***REMOVED*** DirectConnection ***REMOVED***;
//# sourceMappingURL=DirectConnection.mjs.map