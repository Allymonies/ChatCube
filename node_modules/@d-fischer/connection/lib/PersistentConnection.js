"use strict";
Object.defineProperty(exports, "__esModule", ***REMOVED*** value: true ***REMOVED***);
exports.PersistentConnection = void 0;
var tslib_1 = require("tslib");
var shared_utils_1 = require("@d-fischer/shared-utils");
var typed_event_emitter_1 = require("@d-fischer/typed-event-emitter");
var PersistentConnection = /** @class */ (function (_super) ***REMOVED***
    tslib_1.__extends(PersistentConnection, _super);
    function PersistentConnection(_type, _connectionInfo, config, _additionalOptions) ***REMOVED***
        if (config === void 0) ***REMOVED*** config = ***REMOVED******REMOVED***; ***REMOVED***
        var _a;
        var _this = _super.call(this) || this;
        _this._type = _type;
        _this._connectionInfo = _connectionInfo;
        _this._additionalOptions = _additionalOptions;
        _this._retryLimit = Infinity;
        _this._initialRetryLimit = 3;
        _this._connecting = false;
        _this._connectionRetryCount = 0;
        _this.onReceive = _this.registerEvent();
        _this.onConnect = _this.registerEvent();
        _this.onDisconnect = _this.registerEvent();
        _this.onEnd = _this.registerEvent();
        _this._retryLimit = (_a = config.retryLimit) !== null && _a !== void 0 ? _a : Infinity;
        _this._logger = config.logger;
        return _this;
    ***REMOVED***
    Object.defineProperty(PersistentConnection.prototype, "isConnected", ***REMOVED***
        get: function () ***REMOVED***
            var _a, _b;
            return (_b = (_a = this._currentConnection) === null || _a === void 0 ? void 0 : _a.isConnected) !== null && _b !== void 0 ? _b : false;
    ***REMOVED***
        enumerable: false,
        configurable: true
    ***REMOVED***);
    Object.defineProperty(PersistentConnection.prototype, "isConnecting", ***REMOVED***
        get: function () ***REMOVED***
            var _a, _b;
            return (_b = (_a = this._currentConnection) === null || _a === void 0 ? void 0 : _a.isConnecting) !== null && _b !== void 0 ? _b : this._connecting;
    ***REMOVED***
        enumerable: false,
        configurable: true
    ***REMOVED***);
    Object.defineProperty(PersistentConnection.prototype, "host", ***REMOVED***
        get: function () ***REMOVED***
            return this._connectionInfo.hostName;
    ***REMOVED***
        enumerable: false,
        configurable: true
    ***REMOVED***);
    Object.defineProperty(PersistentConnection.prototype, "port", ***REMOVED***
        get: function () ***REMOVED***
            return this._connectionInfo.port;
    ***REMOVED***
        enumerable: false,
        configurable: true
    ***REMOVED***);
    Object.defineProperty(PersistentConnection.prototype, "hasSocket", ***REMOVED***
        get: function () ***REMOVED***
            var _a, _b;
            return (_b = (_a = this._currentConnection) === null || _a === void 0 ? void 0 : _a.hasSocket) !== null && _b !== void 0 ? _b : false;
    ***REMOVED***
        enumerable: false,
        configurable: true
    ***REMOVED***);
    PersistentConnection.prototype.sendLine = function (line) ***REMOVED***
        var _a;
        (_a = this._currentConnection) === null || _a === void 0 ? void 0 : _a.sendLine(line);
    ***REMOVED***;
    PersistentConnection.prototype.connect = function () ***REMOVED***
        return tslib_1.__awaiter(this, void 0, void 0, function () ***REMOVED***
            return tslib_1.__generator(this, function (_a) ***REMOVED***
                switch (_a.label) ***REMOVED***
                    case 0: return [4 /*yield*/, this._connect(true)];
                    case 1:
                        _a.sent();
                        return [2 /*return*/];
                ***REMOVED***
            ***REMOVED***);
        ***REMOVED***);
    ***REMOVED***;
    PersistentConnection.prototype.disconnect = function () ***REMOVED***
        var _a;
        return tslib_1.__awaiter(this, void 0, void 0, function () ***REMOVED***
            var lastConnection;
            return tslib_1.__generator(this, function (_b) ***REMOVED***
                switch (_b.label) ***REMOVED***
                    case 0:
                        (_a = this._logger) === null || _a === void 0 ? void 0 : _a.trace("PersistentConnection disconnect currentConnectionExists:" + Boolean(this._currentConnection).toString() + " connecting:" + this._connecting.toString());
                        this._connecting = false;
                        if (!this._currentConnection) return [3 /*break*/, 2];
                        lastConnection = this._currentConnection;
                        this._currentConnection = undefined;
                        return [4 /*yield*/, lastConnection.disconnect()];
                    case 1:
                        _b.sent();
                        _b.label = 2;
                    case 2: return [2 /*return*/];
                ***REMOVED***
            ***REMOVED***);
        ***REMOVED***);
    ***REMOVED***;
    PersistentConnection.prototype.assumeExternalDisconnect = function () ***REMOVED***
        var _a, _b;
        (_a = this._logger) === null || _a === void 0 ? void 0 : _a.trace('PersistentConnection assumeExternalDisconnect');
        (_b = this._currentConnection) === null || _b === void 0 ? void 0 : _b.assumeExternalDisconnect();
    ***REMOVED***;
    PersistentConnection.prototype.reconnect = function () ***REMOVED***
        return tslib_1.__awaiter(this, void 0, void 0, function () ***REMOVED***
            return tslib_1.__generator(this, function (_a) ***REMOVED***
                switch (_a.label) ***REMOVED***
                    case 0: return [4 /*yield*/, this._reconnect(true)];
                    case 1:
                        _a.sent();
                        return [2 /*return*/];
                ***REMOVED***
            ***REMOVED***);
        ***REMOVED***);
    ***REMOVED***;
    PersistentConnection.prototype._connect = function (userGenerated) ***REMOVED***
        var _a, _b, _c, _d;
        if (userGenerated === void 0) ***REMOVED*** userGenerated = false; ***REMOVED***
        return tslib_1.__awaiter(this, void 0, void 0, function () ***REMOVED***
            var retryLimit, _loop_1, this_1, state_1, error;
            var _this = this;
            return tslib_1.__generator(this, function (_e) ***REMOVED***
                switch (_e.label) ***REMOVED***
                    case 0:
                        (_a = this._logger) === null || _a === void 0 ? void 0 : _a.trace("PersistentConnection connect currentConnectionExists:" + Boolean(this._currentConnection).toString() + " connecting:" + this._connecting.toString());
                        if (this._currentConnection || this._connecting) ***REMOVED***
                            throw new Error('Connection already present');
                        ***REMOVED***
                        this._connectionRetryCount = 0;
                        this._connecting = true;
                        retryLimit = userGenerated ? this._initialRetryLimit : this._retryLimit;
                        this._retryTimerGenerator = PersistentConnection._getReconnectWaitTime();
                        _loop_1 = function () ***REMOVED***
                            var newConnection, e_1, secs;
                            return tslib_1.__generator(this, function (_f) ***REMOVED***
                                switch (_f.label) ***REMOVED***
                                    case 0:
                                        newConnection = (this_1._currentConnection = new this_1._type(this_1._connectionInfo, this_1._logger, this_1._additionalOptions));
                                        newConnection.onReceive(function (line) ***REMOVED*** return _this.emit(_this.onReceive, line); ***REMOVED***);
                                        newConnection.onConnect(function () ***REMOVED*** return _this.emit(_this.onConnect); ***REMOVED***);
                                        newConnection.onDisconnect(function (manually, reason) ***REMOVED***
                                            _this.emit(_this.onDisconnect, manually, reason);
                                            if (manually) ***REMOVED***
                                                _this.emit(_this.onEnd, true);
                                                void newConnection.disconnect();
                                                if (_this._currentConnection === newConnection) ***REMOVED***
                                                    _this._currentConnection = undefined;
                                                ***REMOVED***
                                            ***REMOVED***
                                            else if (!_this._connecting) ***REMOVED***
                                                void _this._reconnect();
                                            ***REMOVED***
                                        ***REMOVED***);
                                        _f.label = 1;
                                    case 1:
                                        _f.trys.push([1, 3, , 5]);
                                        return [4 /*yield*/, newConnection.connect()];
                                    case 2:
                                        _f.sent();
                                        this_1._connecting = false;
                                        return [2 /*return*/, ***REMOVED*** value: void 0 ***REMOVED***];
                                    case 3:
                                        e_1 = _f.sent();
                                        if (!this_1._connecting) ***REMOVED***
                                            return [2 /*return*/, ***REMOVED*** value: void 0 ***REMOVED***];
                                        ***REMOVED***
                                        (_b = this_1._logger) === null || _b === void 0 ? void 0 : _b.debug("Connection error caught: " + e_1.message);
                                        if (this_1._connectionRetryCount >= retryLimit) ***REMOVED***
                                            return [2 /*return*/, "break"];
                                        ***REMOVED***
                                        this_1._connectionRetryCount++;
                                        secs = this_1._retryTimerGenerator.next().value;
                                        if (secs !== 0) ***REMOVED***
                                            (_c = this_1._logger) === null || _c === void 0 ? void 0 : _c.info("Retrying in " + secs + " seconds");
                                        ***REMOVED***
                                        return [4 /*yield*/, shared_utils_1.delay(secs * 1000)];
                                    case 4:
                                        _f.sent();
                                        (_d = this_1._logger) === null || _d === void 0 ? void 0 : _d.info(userGenerated ? 'Retrying connection' : 'Trying to reconnect');
                                        // eslint-disable-next-line @typescript-eslint/no-unnecessary-condition
                                        if (!this_1._connecting) ***REMOVED***
                                            return [2 /*return*/, ***REMOVED*** value: void 0 ***REMOVED***];
                                        ***REMOVED***
                                        return [3 /*break*/, 5];
                                    case 5: return [2 /*return*/];
                                ***REMOVED***
                            ***REMOVED***);
                        ***REMOVED***;
                        this_1 = this;
                        _e.label = 1;
                    case 1:
                        if (!(this._connectionRetryCount <= retryLimit)) return [3 /*break*/, 3];
                        return [5 /*yield**/, _loop_1()];
                    case 2:
                        state_1 = _e.sent();
                        if (typeof state_1 === "object")
                            return [2 /*return*/, state_1.value];
                        if (state_1 === "break")
                            return [3 /*break*/, 3];
                        return [3 /*break*/, 1];
                    case 3:
                        error = new Error("Connection failed after trying " + retryLimit + " times");
                        this.emit(this.onEnd, false, error);
                        if (userGenerated) ***REMOVED***
                            throw error;
                        ***REMOVED***
                        return [2 /*return*/];
                ***REMOVED***
            ***REMOVED***);
        ***REMOVED***);
    ***REMOVED***;
    PersistentConnection.prototype._reconnect = function (userGenerated) ***REMOVED***
        if (userGenerated === void 0) ***REMOVED*** userGenerated = false; ***REMOVED***
        return tslib_1.__awaiter(this, void 0, void 0, function () ***REMOVED***
            var _this = this;
            return tslib_1.__generator(this, function (_a) ***REMOVED***
                switch (_a.label) ***REMOVED***
                    case 0:
                        void this.disconnect().catch(function (e) ***REMOVED*** var _a; return (_a = _this._logger) === null || _a === void 0 ? void 0 : _a.error("Error while disconnecting for the reconnect: " + e.message); ***REMOVED***);
                        return [4 /*yield*/, this._connect(userGenerated)];
                    case 1:
                        _a.sent();
                        return [2 /*return*/];
                ***REMOVED***
            ***REMOVED***);
        ***REMOVED***);
    ***REMOVED***;
    // yes, this is just fibonacci with a limit
    PersistentConnection._getReconnectWaitTime = function () ***REMOVED***
        var current, next;
        var _a;
        return tslib_1.__generator(this, function (_b) ***REMOVED***
            switch (_b.label) ***REMOVED***
                case 0:
                    current = 0;
                    next = 1;
                    _b.label = 1;
                case 1:
                    if (!(current < 120)) return [3 /*break*/, 3];
                    return [4 /*yield*/, current];
                case 2:
                    _b.sent();
                    _a = [next, current + next], current = _a[0], next = _a[1];
                    return [3 /*break*/, 1];
                case 3:
                    if (!true) return [3 /*break*/, 5];
                    return [4 /*yield*/, 120];
                case 4:
                    _b.sent();
                    return [3 /*break*/, 3];
                case 5: return [2 /*return*/];
            ***REMOVED***
        ***REMOVED***);
    ***REMOVED***;
    return PersistentConnection;
***REMOVED***(typed_event_emitter_1.EventEmitter));
exports.PersistentConnection = PersistentConnection;
//# sourceMappingURL=PersistentConnection.js.map