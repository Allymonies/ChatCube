import type ***REMOVED*** Logger ***REMOVED*** from '@d-fischer/logger';
import ***REMOVED*** EventEmitter ***REMOVED*** from '@d-fischer/typed-event-emitter';
import type ***REMOVED*** Connection, ConnectionInfo ***REMOVED*** from './Connection';
export declare type ConnectionOptions<T extends Connection> = T extends AbstractConnection<infer O> ? O : never;
export declare abstract class AbstractConnection<Options = never> extends EventEmitter implements Connection ***REMOVED***
    protected readonly _host: string;
    protected readonly _port: number;
    protected readonly _secure: boolean;
    private readonly _lineBased;
    protected readonly _logger?: Logger;
    protected readonly _additionalOptions?: Options;
    private _currentLine;
    protected _connecting: boolean;
    protected _connected: boolean;
    protected _manualDisconnect: boolean;
    readonly onReceive: import("@d-fischer/typed-event-emitter").EventBinder<[string]>;
    readonly onConnect: import("@d-fischer/typed-event-emitter").EventBinder<[]>;
    readonly onDisconnect: import("@d-fischer/typed-event-emitter").EventBinder<[boolean, (Error | undefined)?]>;
    readonly onEnd: import("@d-fischer/typed-event-emitter").EventBinder<[boolean, (Error | undefined)?]>;
    constructor(***REMOVED*** hostName, port, secure, lineBased ***REMOVED***: ConnectionInfo, logger?: Logger, additionalOptions?: Options);
    get isConnecting(): boolean;
    get isConnected(): boolean;
    get host(): string;
    sendLine(line: string): void;
    abstract connect(): Promise<void>;
    abstract disconnect(): Promise<void>;
    assumeExternalDisconnect(): void;
    protected receiveRaw(data: string): void;
    protected abstract sendRaw(line: string): void;
    abstract get hasSocket(): boolean;
    abstract get port(): number;
***REMOVED***
