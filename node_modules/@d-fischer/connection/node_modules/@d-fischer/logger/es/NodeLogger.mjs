var _a, _b, _c;
import ***REMOVED*** __extends ***REMOVED*** from "tslib";
import ***REMOVED*** LogLevel, LogLevelToConsoleFunction ***REMOVED*** from "./LogLevel.mjs";
import ***REMOVED*** BaseLogger ***REMOVED*** from "./BaseLogger.mjs";
export var LogLevelToEmoji = (_a = ***REMOVED******REMOVED***,
    _a[LogLevel.CRITICAL] = "\uD83D\uDED1",
    _a[LogLevel.ERROR] = "\u274C",
    // these following two need extra spaces at the end because somehow they consume less space in a terminal than they should...
    _a[LogLevel.WARNING] = "\u26A0\uFE0F ",
    _a[LogLevel.INFO] = "\u2139\uFE0F ",
    _a[LogLevel.DEBUG] = "\uD83D\uDC1E",
    _a[LogLevel.TRACE] = "\uD83D\uDC3E",
    _a);
var colors = ***REMOVED***
    black: 30,
    red: 31,
    green: 32,
    yellow: 33,
    blue: 34,
    magenta: 35,
    cyan: 36,
    white: 37,
    blackBright: 90,
    redBright: 91,
    greenBright: 92,
    yellowBright: 93,
    blueBright: 94,
    magentaBright: 95,
    cyanBright: 96,
    whiteBright: 97
***REMOVED***;
var bgColors = ***REMOVED***
    bgBlack: 40,
    bgRed: 41,
    bgGreen: 42,
    bgYellow: 43,
    bgBlue: 44,
    bgMagenta: 45,
    bgCyan: 46,
    bgWhite: 47,
    bgBlackBright: 100,
    bgRedBright: 101,
    bgGreenBright: 102,
    bgYellowBright: 103,
    bgBlueBright: 104,
    bgMagentaBright: 105,
    bgCyanBright: 106,
    bgWhiteBright: 107
***REMOVED***;
function createGenericWrapper(color, ending, inner) ***REMOVED***
    return function (str) ***REMOVED*** return "\u001B[" + color + "m" + (inner ? inner(str) : str) + "\u001B[" + ending + "m"; ***REMOVED***;
***REMOVED***
function createColorWrapper(color) ***REMOVED***
    return createGenericWrapper(colors[color], 39);
***REMOVED***
function createBgWrapper(color, fgWrapper) ***REMOVED***
    return createGenericWrapper(bgColors[color], 49, fgWrapper);
***REMOVED***
export var LogLevelToColor = (_b = ***REMOVED******REMOVED***,
    _b[LogLevel.CRITICAL] = createColorWrapper('red'),
    _b[LogLevel.ERROR] = createColorWrapper('redBright'),
    _b[LogLevel.WARNING] = createColorWrapper('yellow'),
    _b[LogLevel.INFO] = createColorWrapper('blue'),
    _b[LogLevel.DEBUG] = createColorWrapper('magenta'),
    _b[LogLevel.TRACE] = createGenericWrapper(0, 0),
    _b);
export var LogLevelToBackgroundColor = (_c = ***REMOVED******REMOVED***,
    _c[LogLevel.CRITICAL] = createBgWrapper('bgRed', createColorWrapper('white')),
    _c[LogLevel.ERROR] = createBgWrapper('bgRedBright', createColorWrapper('white')),
    _c[LogLevel.WARNING] = createBgWrapper('bgYellow', createColorWrapper('black')),
    _c[LogLevel.INFO] = createBgWrapper('bgBlue', createColorWrapper('white')),
    _c[LogLevel.DEBUG] = createBgWrapper('bgMagenta', createColorWrapper('black')),
    _c[LogLevel.TRACE] = createGenericWrapper(7, 27),
    _c);
var NodeLogger = /** @class */ (function (_super) ***REMOVED***
    __extends(NodeLogger, _super);
    function NodeLogger() ***REMOVED***
        return _super !== null && _super.apply(this, arguments) || this;
    ***REMOVED***
    NodeLogger.prototype.log = function (level, message) ***REMOVED***
        if (level > this._minLevel) ***REMOVED***
            return;
        ***REMOVED***
        var logFn = LogLevelToConsoleFunction[level];
        var builtMessage = '';
        if (this._timestamps) ***REMOVED***
            builtMessage += "[" + new Date().toISOString() + "] ";
        ***REMOVED***
        if (this._emoji) ***REMOVED***
            var emoji = LogLevelToEmoji[level];
            builtMessage += emoji + " ";
        ***REMOVED***
        if (this._colors) ***REMOVED***
            builtMessage += LogLevelToBackgroundColor[level](this._name) + " " + LogLevelToBackgroundColor[level](LogLevel[level]) + " " + LogLevelToColor[level](message);
        ***REMOVED***
        else ***REMOVED***
            builtMessage += "[" + this._name + ":" + LogLevel[level].toLowerCase() + "] " + message;
        ***REMOVED***
        logFn(builtMessage);
    ***REMOVED***;
    return NodeLogger;
***REMOVED***(BaseLogger));
export ***REMOVED*** NodeLogger ***REMOVED***;
//# sourceMappingURL=NodeLogger.mjs.map