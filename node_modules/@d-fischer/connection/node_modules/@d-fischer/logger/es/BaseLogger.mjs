import ***REMOVED*** mapOptional ***REMOVED*** from '@d-fischer/shared-utils';
import * as isNode from 'detect-node';
import ***REMOVED*** getMinLogLevelFromEnv ***REMOVED*** from "./getMinLogLevelFromEnv.mjs";
import ***REMOVED*** LogLevel, resolveLogLevel ***REMOVED*** from "./LogLevel.mjs";
var BaseLogger = /** @class */ (function () ***REMOVED***
    function BaseLogger(_a) ***REMOVED***
        var name = _a.name, minLevel = _a.minLevel, _b = _a.emoji, emoji = _b === void 0 ? false : _b, _c = _a.colors, colors = _c === void 0 ? true : _c, _d = _a.timestamps, timestamps = _d === void 0 ? isNode : _d;
        var _e, _f;
        this._name = name;
        this._minLevel = (_f = (_e = mapOptional(minLevel, function (lv) ***REMOVED*** return resolveLogLevel(lv); ***REMOVED***)) !== null && _e !== void 0 ? _e : getMinLogLevelFromEnv(name)) !== null && _f !== void 0 ? _f : LogLevel.WARNING;
        this._emoji = emoji;
        this._colors = colors;
        this._timestamps = timestamps;
    ***REMOVED***
    // region convenience methods
    BaseLogger.prototype.crit = function (message) ***REMOVED***
        this.log(LogLevel.CRITICAL, message);
    ***REMOVED***;
    BaseLogger.prototype.error = function (message) ***REMOVED***
        this.log(LogLevel.ERROR, message);
    ***REMOVED***;
    BaseLogger.prototype.warn = function (message) ***REMOVED***
        this.log(LogLevel.WARNING, message);
    ***REMOVED***;
    BaseLogger.prototype.info = function (message) ***REMOVED***
        this.log(LogLevel.INFO, message);
    ***REMOVED***;
    BaseLogger.prototype.debug = function (message) ***REMOVED***
        this.log(LogLevel.DEBUG, message);
    ***REMOVED***;
    BaseLogger.prototype.trace = function (message) ***REMOVED***
        this.log(LogLevel.TRACE, message);
    ***REMOVED***;
    return BaseLogger;
***REMOVED***());
export ***REMOVED*** BaseLogger ***REMOVED***;
//# sourceMappingURL=BaseLogger.mjs.map