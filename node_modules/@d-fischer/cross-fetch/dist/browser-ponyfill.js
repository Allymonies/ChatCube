var __self__ = (function (root) ***REMOVED***
function F() ***REMOVED***
this.fetch = false;
this.DOMException = root.DOMException
***REMOVED***
F.prototype = root;
return new F();
***REMOVED***)(typeof self !== 'undefined' ? self : this);
(function(self) ***REMOVED***

var irrelevant = (function (exports) ***REMOVED***

  var support = ***REMOVED***
    searchParams: 'URLSearchParams' in self,
    iterable: 'Symbol' in self && 'iterator' in Symbol,
    blob:
      'FileReader' in self &&
      'Blob' in self &&
      (function() ***REMOVED***
        try ***REMOVED***
          new Blob();
          return true
        ***REMOVED*** catch (e) ***REMOVED***
          return false
        ***REMOVED***
      ***REMOVED***)(),
    formData: 'FormData' in self,
    arrayBuffer: 'ArrayBuffer' in self
  ***REMOVED***;

  function isDataView(obj) ***REMOVED***
    return obj && DataView.prototype.isPrototypeOf(obj)
  ***REMOVED***

  if (support.arrayBuffer) ***REMOVED***
    var viewClasses = [
      '[object Int8Array]',
      '[object Uint8Array]',
      '[object Uint8ClampedArray]',
      '[object Int16Array]',
      '[object Uint16Array]',
      '[object Int32Array]',
      '[object Uint32Array]',
      '[object Float32Array]',
      '[object Float64Array]'
    ];

    var isArrayBufferView =
      ArrayBuffer.isView ||
      function(obj) ***REMOVED***
        return obj && viewClasses.indexOf(Object.prototype.toString.call(obj)) > -1
      ***REMOVED***;
  ***REMOVED***

  function normalizeName(name) ***REMOVED***
    if (typeof name !== 'string') ***REMOVED***
      name = String(name);
    ***REMOVED***
    if (/[^a-z0-9\-#$%&'*+.^_`|~]/i.test(name)) ***REMOVED***
      throw new TypeError('Invalid character in header field name')
    ***REMOVED***
    return name.toLowerCase()
  ***REMOVED***

  function normalizeValue(value) ***REMOVED***
    if (typeof value !== 'string') ***REMOVED***
      value = String(value);
    ***REMOVED***
    return value
  ***REMOVED***

  // Build a destructive iterator for the value list
  function iteratorFor(items) ***REMOVED***
    var iterator = ***REMOVED***
      next: function() ***REMOVED***
        var value = items.shift();
        return ***REMOVED***done: value === undefined, value: value***REMOVED***
      ***REMOVED***
    ***REMOVED***;

    if (support.iterable) ***REMOVED***
      iterator[Symbol.iterator] = function() ***REMOVED***
        return iterator
      ***REMOVED***;
    ***REMOVED***

    return iterator
  ***REMOVED***

  function Headers(headers) ***REMOVED***
    this.map = ***REMOVED******REMOVED***;

    if (headers instanceof Headers) ***REMOVED***
      headers.forEach(function(value, name) ***REMOVED***
        this.append(name, value);
  ***REMOVED*** this);
    ***REMOVED*** else if (Array.isArray(headers)) ***REMOVED***
      headers.forEach(function(header) ***REMOVED***
        this.append(header[0], header[1]);
  ***REMOVED*** this);
    ***REMOVED*** else if (headers) ***REMOVED***
      Object.getOwnPropertyNames(headers).forEach(function(name) ***REMOVED***
        this.append(name, headers[name]);
  ***REMOVED*** this);
    ***REMOVED***
  ***REMOVED***

  Headers.prototype.append = function(name, value) ***REMOVED***
    name = normalizeName(name);
    value = normalizeValue(value);
    var oldValue = this.map[name];
    this.map[name] = oldValue ? oldValue + ', ' + value : value;
  ***REMOVED***;

  Headers.prototype['delete'] = function(name) ***REMOVED***
    delete this.map[normalizeName(name)];
  ***REMOVED***;

  Headers.prototype.get = function(name) ***REMOVED***
    name = normalizeName(name);
    return this.has(name) ? this.map[name] : null
  ***REMOVED***;

  Headers.prototype.has = function(name) ***REMOVED***
    return this.map.hasOwnProperty(normalizeName(name))
  ***REMOVED***;

  Headers.prototype.set = function(name, value) ***REMOVED***
    this.map[normalizeName(name)] = normalizeValue(value);
  ***REMOVED***;

  Headers.prototype.forEach = function(callback, thisArg) ***REMOVED***
    for (var name in this.map) ***REMOVED***
      if (this.map.hasOwnProperty(name)) ***REMOVED***
        callback.call(thisArg, this.map[name], name, this);
      ***REMOVED***
    ***REMOVED***
  ***REMOVED***;

  Headers.prototype.keys = function() ***REMOVED***
    var items = [];
    this.forEach(function(value, name) ***REMOVED***
      items.push(name);
    ***REMOVED***);
    return iteratorFor(items)
  ***REMOVED***;

  Headers.prototype.values = function() ***REMOVED***
    var items = [];
    this.forEach(function(value) ***REMOVED***
      items.push(value);
    ***REMOVED***);
    return iteratorFor(items)
  ***REMOVED***;

  Headers.prototype.entries = function() ***REMOVED***
    var items = [];
    this.forEach(function(value, name) ***REMOVED***
      items.push([name, value]);
    ***REMOVED***);
    return iteratorFor(items)
  ***REMOVED***;

  if (support.iterable) ***REMOVED***
    Headers.prototype[Symbol.iterator] = Headers.prototype.entries;
  ***REMOVED***

  function consumed(body) ***REMOVED***
    if (body.bodyUsed) ***REMOVED***
      return Promise.reject(new TypeError('Already read'))
    ***REMOVED***
    body.bodyUsed = true;
  ***REMOVED***

  function fileReaderReady(reader) ***REMOVED***
    return new Promise(function(resolve, reject) ***REMOVED***
      reader.onload = function() ***REMOVED***
        resolve(reader.result);
      ***REMOVED***;
      reader.onerror = function() ***REMOVED***
        reject(reader.error);
      ***REMOVED***;
    ***REMOVED***)
  ***REMOVED***

  function readBlobAsArrayBuffer(blob) ***REMOVED***
    var reader = new FileReader();
    var promise = fileReaderReady(reader);
    reader.readAsArrayBuffer(blob);
    return promise
  ***REMOVED***

  function readBlobAsText(blob) ***REMOVED***
    var reader = new FileReader();
    var promise = fileReaderReady(reader);
    reader.readAsText(blob);
    return promise
  ***REMOVED***

  function readArrayBufferAsText(buf) ***REMOVED***
    var view = new Uint8Array(buf);
    var chars = new Array(view.length);

    for (var i = 0; i < view.length; i++) ***REMOVED***
      chars[i] = String.fromCharCode(view[i]);
    ***REMOVED***
    return chars.join('')
  ***REMOVED***

  function bufferClone(buf) ***REMOVED***
    if (buf.slice) ***REMOVED***
      return buf.slice(0)
    ***REMOVED*** else ***REMOVED***
      var view = new Uint8Array(buf.byteLength);
      view.set(new Uint8Array(buf));
      return view.buffer
    ***REMOVED***
  ***REMOVED***

  function Body() ***REMOVED***
    this.bodyUsed = false;

    this._initBody = function(body) ***REMOVED***
      this._bodyInit = body;
      if (!body) ***REMOVED***
        this._bodyText = '';
      ***REMOVED*** else if (typeof body === 'string') ***REMOVED***
        this._bodyText = body;
      ***REMOVED*** else if (support.blob && Blob.prototype.isPrototypeOf(body)) ***REMOVED***
        this._bodyBlob = body;
      ***REMOVED*** else if (support.formData && FormData.prototype.isPrototypeOf(body)) ***REMOVED***
        this._bodyFormData = body;
      ***REMOVED*** else if (support.searchParams && URLSearchParams.prototype.isPrototypeOf(body)) ***REMOVED***
        this._bodyText = body.toString();
      ***REMOVED*** else if (support.arrayBuffer && support.blob && isDataView(body)) ***REMOVED***
        this._bodyArrayBuffer = bufferClone(body.buffer);
        // IE 10-11 can't handle a DataView body.
        this._bodyInit = new Blob([this._bodyArrayBuffer]);
      ***REMOVED*** else if (support.arrayBuffer && (ArrayBuffer.prototype.isPrototypeOf(body) || isArrayBufferView(body))) ***REMOVED***
        this._bodyArrayBuffer = bufferClone(body);
      ***REMOVED*** else ***REMOVED***
        this._bodyText = body = Object.prototype.toString.call(body);
      ***REMOVED***

      if (!this.headers.get('content-type')) ***REMOVED***
        if (typeof body === 'string') ***REMOVED***
          this.headers.set('content-type', 'text/plain;charset=UTF-8');
        ***REMOVED*** else if (this._bodyBlob && this._bodyBlob.type) ***REMOVED***
          this.headers.set('content-type', this._bodyBlob.type);
        ***REMOVED*** else if (support.searchParams && URLSearchParams.prototype.isPrototypeOf(body)) ***REMOVED***
          this.headers.set('content-type', 'application/x-www-form-urlencoded;charset=UTF-8');
        ***REMOVED***
      ***REMOVED***
    ***REMOVED***;

    if (support.blob) ***REMOVED***
      this.blob = function() ***REMOVED***
        var rejected = consumed(this);
        if (rejected) ***REMOVED***
          return rejected
        ***REMOVED***

        if (this._bodyBlob) ***REMOVED***
          return Promise.resolve(this._bodyBlob)
        ***REMOVED*** else if (this._bodyArrayBuffer) ***REMOVED***
          return Promise.resolve(new Blob([this._bodyArrayBuffer]))
        ***REMOVED*** else if (this._bodyFormData) ***REMOVED***
          throw new Error('could not read FormData body as blob')
        ***REMOVED*** else ***REMOVED***
          return Promise.resolve(new Blob([this._bodyText]))
        ***REMOVED***
      ***REMOVED***;

      this.arrayBuffer = function() ***REMOVED***
        if (this._bodyArrayBuffer) ***REMOVED***
          return consumed(this) || Promise.resolve(this._bodyArrayBuffer)
        ***REMOVED*** else ***REMOVED***
          return this.blob().then(readBlobAsArrayBuffer)
        ***REMOVED***
      ***REMOVED***;
    ***REMOVED***

    this.text = function() ***REMOVED***
      var rejected = consumed(this);
      if (rejected) ***REMOVED***
        return rejected
      ***REMOVED***

      if (this._bodyBlob) ***REMOVED***
        return readBlobAsText(this._bodyBlob)
      ***REMOVED*** else if (this._bodyArrayBuffer) ***REMOVED***
        return Promise.resolve(readArrayBufferAsText(this._bodyArrayBuffer))
      ***REMOVED*** else if (this._bodyFormData) ***REMOVED***
        throw new Error('could not read FormData body as text')
      ***REMOVED*** else ***REMOVED***
        return Promise.resolve(this._bodyText)
      ***REMOVED***
    ***REMOVED***;

    if (support.formData) ***REMOVED***
      this.formData = function() ***REMOVED***
        return this.text().then(decode)
      ***REMOVED***;
    ***REMOVED***

    this.json = function() ***REMOVED***
      return this.text().then(JSON.parse)
    ***REMOVED***;

    return this
  ***REMOVED***

  // HTTP methods whose capitalization should be normalized
  var methods = ['DELETE', 'GET', 'HEAD', 'OPTIONS', 'POST', 'PUT'];

  function normalizeMethod(method) ***REMOVED***
    var upcased = method.toUpperCase();
    return methods.indexOf(upcased) > -1 ? upcased : method
  ***REMOVED***

  function Request(input, options) ***REMOVED***
    options = options || ***REMOVED******REMOVED***;
    var body = options.body;

    if (input instanceof Request) ***REMOVED***
      if (input.bodyUsed) ***REMOVED***
        throw new TypeError('Already read')
      ***REMOVED***
      this.url = input.url;
      this.credentials = input.credentials;
      if (!options.headers) ***REMOVED***
        this.headers = new Headers(input.headers);
      ***REMOVED***
      this.method = input.method;
      this.mode = input.mode;
      this.signal = input.signal;
      if (!body && input._bodyInit != null) ***REMOVED***
        body = input._bodyInit;
        input.bodyUsed = true;
      ***REMOVED***
    ***REMOVED*** else ***REMOVED***
      this.url = String(input);
    ***REMOVED***

    this.credentials = options.credentials || this.credentials || 'same-origin';
    if (options.headers || !this.headers) ***REMOVED***
      this.headers = new Headers(options.headers);
    ***REMOVED***
    this.method = normalizeMethod(options.method || this.method || 'GET');
    this.mode = options.mode || this.mode || null;
    this.signal = options.signal || this.signal;
    this.referrer = null;

    if ((this.method === 'GET' || this.method === 'HEAD') && body) ***REMOVED***
      throw new TypeError('Body not allowed for GET or HEAD requests')
    ***REMOVED***
    this._initBody(body);
  ***REMOVED***

  Request.prototype.clone = function() ***REMOVED***
    return new Request(this, ***REMOVED***body: this._bodyInit***REMOVED***)
  ***REMOVED***;

  function decode(body) ***REMOVED***
    var form = new FormData();
    body
      .trim()
      .split('&')
      .forEach(function(bytes) ***REMOVED***
        if (bytes) ***REMOVED***
          var split = bytes.split('=');
          var name = split.shift().replace(/\+/g, ' ');
          var value = split.join('=').replace(/\+/g, ' ');
          form.append(decodeURIComponent(name), decodeURIComponent(value));
        ***REMOVED***
      ***REMOVED***);
    return form
  ***REMOVED***

  function parseHeaders(rawHeaders) ***REMOVED***
    var headers = new Headers();
    // Replace instances of \r\n and \n followed by at least one space or horizontal tab with a space
    // https://tools.ietf.org/html/rfc7230#section-3.2
    var preProcessedHeaders = rawHeaders.replace(/\r?\n[\t ]+/g, ' ');
    preProcessedHeaders.split(/\r?\n/).forEach(function(line) ***REMOVED***
      var parts = line.split(':');
      var key = parts.shift().trim();
      if (key) ***REMOVED***
        var value = parts.join(':').trim();
        headers.append(key, value);
      ***REMOVED***
    ***REMOVED***);
    return headers
  ***REMOVED***

  Body.call(Request.prototype);

  function Response(bodyInit, options) ***REMOVED***
    if (!options) ***REMOVED***
      options = ***REMOVED******REMOVED***;
    ***REMOVED***

    this.type = 'default';
    this.status = options.status === undefined ? 200 : options.status;
    this.ok = this.status >= 200 && this.status < 300;
    this.statusText = 'statusText' in options ? options.statusText : 'OK';
    this.headers = new Headers(options.headers);
    this.url = options.url || '';
    this._initBody(bodyInit);
  ***REMOVED***

  Body.call(Response.prototype);

  Response.prototype.clone = function() ***REMOVED***
    return new Response(this._bodyInit, ***REMOVED***
      status: this.status,
      statusText: this.statusText,
      headers: new Headers(this.headers),
      url: this.url
    ***REMOVED***)
  ***REMOVED***;

  Response.error = function() ***REMOVED***
    var response = new Response(null, ***REMOVED***status: 0, statusText: ''***REMOVED***);
    response.type = 'error';
    return response
  ***REMOVED***;

  var redirectStatuses = [301, 302, 303, 307, 308];

  Response.redirect = function(url, status) ***REMOVED***
    if (redirectStatuses.indexOf(status) === -1) ***REMOVED***
      throw new RangeError('Invalid status code')
    ***REMOVED***

    return new Response(null, ***REMOVED***status: status, headers: ***REMOVED***location: url***REMOVED******REMOVED***)
  ***REMOVED***;

  exports.DOMException = self.DOMException;
  try ***REMOVED***
    new exports.DOMException();
  ***REMOVED*** catch (err) ***REMOVED***
    exports.DOMException = function(message, name) ***REMOVED***
      this.message = message;
      this.name = name;
      var error = Error(message);
      this.stack = error.stack;
    ***REMOVED***;
    exports.DOMException.prototype = Object.create(Error.prototype);
    exports.DOMException.prototype.constructor = exports.DOMException;
  ***REMOVED***

  function fetch(input, init) ***REMOVED***
    return new Promise(function(resolve, reject) ***REMOVED***
      var request = new Request(input, init);

      if (request.signal && request.signal.aborted) ***REMOVED***
        return reject(new exports.DOMException('Aborted', 'AbortError'))
      ***REMOVED***

      var xhr = new XMLHttpRequest();

      function abortXhr() ***REMOVED***
        xhr.abort();
      ***REMOVED***

      xhr.onload = function() ***REMOVED***
        var options = ***REMOVED***
          status: xhr.status,
          statusText: xhr.statusText,
          headers: parseHeaders(xhr.getAllResponseHeaders() || '')
        ***REMOVED***;
        options.url = 'responseURL' in xhr ? xhr.responseURL : options.headers.get('X-Request-URL');
        var body = 'response' in xhr ? xhr.response : xhr.responseText;
        resolve(new Response(body, options));
      ***REMOVED***;

      xhr.onerror = function() ***REMOVED***
        reject(new TypeError('Network request failed'));
      ***REMOVED***;

      xhr.ontimeout = function() ***REMOVED***
        reject(new TypeError('Network request failed'));
      ***REMOVED***;

      xhr.onabort = function() ***REMOVED***
        reject(new exports.DOMException('Aborted', 'AbortError'));
      ***REMOVED***;

      xhr.open(request.method, request.url, true);

      if (request.credentials === 'include') ***REMOVED***
        xhr.withCredentials = true;
      ***REMOVED*** else if (request.credentials === 'omit') ***REMOVED***
        xhr.withCredentials = false;
      ***REMOVED***

      if ('responseType' in xhr && support.blob) ***REMOVED***
        xhr.responseType = 'blob';
      ***REMOVED***

      request.headers.forEach(function(value, name) ***REMOVED***
        xhr.setRequestHeader(name, value);
      ***REMOVED***);

      if (request.signal) ***REMOVED***
        request.signal.addEventListener('abort', abortXhr);

        xhr.onreadystatechange = function() ***REMOVED***
          // DONE (success or failure)
          if (xhr.readyState === 4) ***REMOVED***
            request.signal.removeEventListener('abort', abortXhr);
          ***REMOVED***
        ***REMOVED***;
      ***REMOVED***

      xhr.send(typeof request._bodyInit === 'undefined' ? null : request._bodyInit);
    ***REMOVED***)
  ***REMOVED***

  fetch.polyfill = true;

  if (!self.fetch) ***REMOVED***
    self.fetch = fetch;
    self.Headers = Headers;
    self.Request = Request;
    self.Response = Response;
  ***REMOVED***

  exports.Headers = Headers;
  exports.Request = Request;
  exports.Response = Response;
  exports.fetch = fetch;

  return exports;

***REMOVED***(***REMOVED******REMOVED***));
***REMOVED***)(__self__);
delete __self__.fetch.polyfill
exports = __self__.fetch // To enable: import fetch from 'cross-fetch'
exports.default = __self__.fetch // For TypeScript consumers without esModuleInterop.
exports.fetch = __self__.fetch // To enable: import ***REMOVED***fetch***REMOVED*** from 'cross-fetch'
exports.Headers = __self__.Headers
exports.Request = __self__.Request
exports.Response = __self__.Response
module.exports = exports
