import ***REMOVED*** __read, __spread, __values ***REMOVED*** from "tslib";
export function partitionedFlatMap(arr, keyMapper, valueMapper) ***REMOVED***
    var e_1, _a, _b;
    var result = ***REMOVED******REMOVED***;
    try ***REMOVED***
        for (var arr_1 = __values(arr), arr_1_1 = arr_1.next(); !arr_1_1.done; arr_1_1 = arr_1.next()) ***REMOVED***
            var entry = arr_1_1.value;
            var key = keyMapper(entry);
            var values = valueMapper(entry);
            if (!Array.isArray(values)) ***REMOVED***
                values = [values];
            ***REMOVED***
            if (Object.prototype.hasOwnProperty.call(result, key)) ***REMOVED***
                (_b = result[key]).push.apply(_b, __spread(values));
            ***REMOVED***
            else ***REMOVED***
                result[key] = values;
            ***REMOVED***
        ***REMOVED***
    ***REMOVED***
    catch (e_1_1) ***REMOVED*** e_1 = ***REMOVED*** error: e_1_1 ***REMOVED***; ***REMOVED***
    finally ***REMOVED***
        try ***REMOVED***
            if (arr_1_1 && !arr_1_1.done && (_a = arr_1.return)) _a.call(arr_1);
        ***REMOVED***
        finally ***REMOVED*** if (e_1) throw e_1.error; ***REMOVED***
    ***REMOVED***
    return result;
***REMOVED***
//# sourceMappingURL=partitionedFlatMap.mjs.map