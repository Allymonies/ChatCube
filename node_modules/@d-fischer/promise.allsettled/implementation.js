'use strict';

var requirePromise = require('./requirePromise');

requirePromise();

var PromiseResolve = require('es-abstract/2020/PromiseResolve');
var Type = require('es-abstract/2020/Type');
var iterate = require('iterate-value');
var map = require('array.prototype.map');
var GetIntrinsic = require('get-intrinsic');
var callBind = require('call-bind');

var all = callBind(GetIntrinsic('%Promise.all%'));
var reject = callBind(GetIntrinsic('%Promise.reject%'));

module.exports = function allSettled(iterable) ***REMOVED***
	var C = this;
	if (Type(C) !== 'Object') ***REMOVED***
		throw new TypeError('`this` value must be an object');
	***REMOVED***
	var values = iterate(iterable);
	return all(C, map(values, function (item) ***REMOVED***
		var onFulfill = function (value) ***REMOVED***
			return ***REMOVED*** status: 'fulfilled', value: value ***REMOVED***;
		***REMOVED***;
		var onReject = function (reason) ***REMOVED***
			return ***REMOVED*** status: 'rejected', reason: reason ***REMOVED***;
		***REMOVED***;
		var itemPromise = PromiseResolve(C, item);
		try ***REMOVED***
			return itemPromise.then(onFulfill, onReject);
		***REMOVED*** catch (e) ***REMOVED***
			return reject(C, e);
		***REMOVED***
	***REMOVED***));
***REMOVED***;
