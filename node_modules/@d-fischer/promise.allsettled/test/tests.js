'use strict';

if (typeof process !== 'undefined') ***REMOVED***
	process.on('unhandledRejection', function () ***REMOVED******REMOVED***);
***REMOVED***

var assertArray = function (t, value, length, assertType) ***REMOVED***
	t.ok(Array.isArray(value), 'value is an array');
	t.equal(value.length, length, 'length is ' + length);
	if (typeof assertType === 'function') ***REMOVED***
		for (var i = 0; i < value.length; i += 1) ***REMOVED***
			assertType(value[i]);
		***REMOVED***
	***REMOVED***
***REMOVED***;

var yes = function makeFulfilledResult(value) ***REMOVED***
	return ***REMOVED*** status: 'fulfilled', value: value ***REMOVED***;
***REMOVED***;
var no = function makeRejectedResult(reason) ***REMOVED***
	return ***REMOVED*** status: 'rejected', reason: reason ***REMOVED***;
***REMOVED***;

module.exports = function (allSettled, t) ***REMOVED***
	if (typeof Promise !== 'function') ***REMOVED***
		return t.skip('No global Promise detected');
	***REMOVED***

	var a = ***REMOVED******REMOVED***;
	var b = ***REMOVED******REMOVED***;
	var c = ***REMOVED******REMOVED***;

	t.test('no promise values', function (st) ***REMOVED***
		st.plan(1);
		allSettled([a, b, c]).then(function (results) ***REMOVED***
			st.deepEqual(results, [yes(a), yes(b), yes(c)]);
		***REMOVED***);
	***REMOVED***);

	t.test('all fulfilled', function (st) ***REMOVED***
		st.plan(1);
		allSettled([
			Promise.resolve(a),
			Promise.resolve(b),
			Promise.resolve(c)
		]).then(function (results) ***REMOVED***
			st.deepEqual(results, [
				yes(a),
				yes(b),
				yes(c)
			]);
		***REMOVED***);
	***REMOVED***);

	t.test('all rejected', function (st) ***REMOVED***
		st.plan(1);
		allSettled([
			Promise.reject(a),
			Promise.reject(b),
			Promise.reject(c)
		]).then(function (results) ***REMOVED***
			st.deepEqual(results, [
				no(a),
				no(b),
				no(c)
			]);
		***REMOVED***);
	***REMOVED***);

	t.test('mixed', function (st) ***REMOVED***
		st.plan(1);
		allSettled([
			a,
			Promise.resolve(b),
			Promise.reject(c)
		]).then(function (results) ***REMOVED***
			st.deepEqual(results, [
				yes(a),
				yes(b),
				no(c)
			]);
		***REMOVED***);
	***REMOVED***);

	t.test('poisoned .then', function (st) ***REMOVED***
		st.plan(1);
		var promise = new Promise(function () ***REMOVED******REMOVED***);
		promise.then = function () ***REMOVED*** throw new EvalError(); ***REMOVED***;
		allSettled([promise]).then(function () ***REMOVED***
			st.fail('should not reach here');
		***REMOVED***, function (reason) ***REMOVED***
			st.equal(reason instanceof EvalError, true, 'expected error was thrown');
		***REMOVED***);
	***REMOVED***);

	var Subclass = (function () ***REMOVED***
		try ***REMOVED***
			// eslint-disable-next-line no-new-func
			return Function('class Subclass extends Promise ***REMOVED*** constructor(...args) ***REMOVED*** super(...args); this.thenArgs = []; ***REMOVED*** then(...args) ***REMOVED*** Subclass.thenArgs.push(args); this.thenArgs.push(args); return super.then(...args); ***REMOVED*** ***REMOVED*** Subclass.thenArgs = []; return Subclass;')();
		***REMOVED*** catch (e) ***REMOVED*** /**/ ***REMOVED***

		return false;
	***REMOVED***());
	t.test('inheritance', ***REMOVED*** skip: !Subclass ***REMOVED***, function (st) ***REMOVED***
		st.test('preserves correct subclass', function (s2t) ***REMOVED***
			var promise = allSettled.call(Subclass, [1]);
			s2t.ok(promise instanceof Subclass, 'promise is instanceof Subclass');
			s2t.equal(promise.constructor, Subclass, 'promise.constructor is Subclass');

			s2t.end();
		***REMOVED***);

		st.test('invokes the subclassâ€™ then', function (s2t) ***REMOVED***
			Subclass.thenArgs.length = 0;

			var original = Subclass.resolve();
			assertArray(s2t, Subclass.thenArgs, 0);
			assertArray(s2t, original.thenArgs, 0);

			allSettled.call(Subclass, [original]);

			assertArray(s2t, original.thenArgs, 1);
			/*
			 * TODO: uncomment. node v12+'s native implementation fails this check.
			 * Either v8's impl is wrong, or this package's impl is wrong - figure out which.
			 * assertArray(s2t, Subclass.thenArgs, 2);
			 */

			s2t.end();
		***REMOVED***);
	***REMOVED***);

	return t.comment('tests completed');
***REMOVED***;
