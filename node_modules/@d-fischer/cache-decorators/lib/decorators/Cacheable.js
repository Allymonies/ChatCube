"use strict";
Object.defineProperty(exports, "__esModule", ***REMOVED*** value: true ***REMOVED***);
exports.Cacheable = void 0;
var tslib_1 = require("tslib");
var createCacheKey_1 = require("../utils/createCacheKey");
function Cacheable(cls) ***REMOVED***
    return /** @class */ (function (_super) ***REMOVED***
        tslib_1.__extends(class_1, _super);
        function class_1() ***REMOVED***
            var _this = _super !== null && _super.apply(this, arguments) || this;
            _this.cache = new Map();
            return _this;
        ***REMOVED***
        class_1.prototype.getFromCache = function (cacheKey) ***REMOVED***
            this._cleanCache();
            if (this.cache.has(cacheKey)) ***REMOVED***
                var entry = this.cache.get(cacheKey);
                if (entry) ***REMOVED***
                    return entry.value;
                ***REMOVED***
            ***REMOVED***
            return undefined;
        ***REMOVED***;
        class_1.prototype.setCache = function (cacheKey, value, timeInSeconds) ***REMOVED***
            this.cache.set(cacheKey, ***REMOVED***
                value: value,
                expires: Date.now() + timeInSeconds * 1000
            ***REMOVED***);
        ***REMOVED***;
        class_1.prototype.removeFromCache = function (cacheKey, prefix) ***REMOVED***
            var _this = this;
            var internalCacheKey = this._getInternalCacheKey(cacheKey, prefix);
            if (prefix) ***REMOVED***
                this.cache.forEach(function (val, key) ***REMOVED***
                    if (key.startsWith(internalCacheKey)) ***REMOVED***
                        _this.cache.delete(key);
                    ***REMOVED***
                ***REMOVED***);
            ***REMOVED***
            else ***REMOVED***
                this.cache.delete(internalCacheKey);
            ***REMOVED***
        ***REMOVED***;
        class_1.prototype._cleanCache = function () ***REMOVED***
            var _this = this;
            var now = Date.now();
            this.cache.forEach(function (val, key) ***REMOVED***
                if (val.expires < now) ***REMOVED***
                    _this.cache.delete(key);
                ***REMOVED***
            ***REMOVED***);
        ***REMOVED***;
        class_1.prototype._getInternalCacheKey = function (cacheKey, prefix) ***REMOVED***
            if (typeof cacheKey === 'string') ***REMOVED***
                var internalCacheKey = cacheKey;
                if (!internalCacheKey.endsWith('/')) ***REMOVED***
                    internalCacheKey += '/';
                ***REMOVED***
                return internalCacheKey;
            ***REMOVED***
            else ***REMOVED***
                var propName = cacheKey.shift();
                return createCacheKey_1.createCacheKey(propName, cacheKey, prefix);
            ***REMOVED***
        ***REMOVED***;
        return class_1;
    ***REMOVED***(cls));
***REMOVED***
exports.Cacheable = Cacheable;
//# sourceMappingURL=Cacheable.js.map