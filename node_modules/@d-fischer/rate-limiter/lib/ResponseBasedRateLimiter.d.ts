import type ***REMOVED*** LoggerOptions ***REMOVED*** from '@d-fischer/logger';
import type ***REMOVED*** RateLimiter ***REMOVED*** from './RateLimiter';
export interface RateLimiterResponseParameters ***REMOVED***
    limit: number;
    remaining: number;
    resetsAt: number;
***REMOVED***
export interface ResponseBasedRateLimiterConfig ***REMOVED***
    logger?: Partial<LoggerOptions>;
***REMOVED***
export declare abstract class ResponseBasedRateLimiter<Req, Res> implements RateLimiter<Req, Res> ***REMOVED***
    private _parameters?;
    private readonly _queue;
    private _batchRunning;
    private _nextBatchTimer?;
    private readonly _logger;
    constructor(***REMOVED*** logger ***REMOVED***: ResponseBasedRateLimiterConfig);
    request(req: Req): Promise<Res>;
    protected abstract doRequest(req: Req): Promise<Res>;
    protected abstract needsToRetryAfter(res: Res): number | null;
    protected abstract getParametersFromResponse(res: Res): RateLimiterResponseParameters;
    private _runRequestBatch;
    private _runNextBatch;
***REMOVED***
