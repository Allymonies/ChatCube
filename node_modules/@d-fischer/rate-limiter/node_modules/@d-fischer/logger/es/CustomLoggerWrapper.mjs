import ***REMOVED*** mapOptional ***REMOVED*** from '@d-fischer/shared-utils';
import ***REMOVED*** getMinLogLevelFromEnv ***REMOVED*** from "./getMinLogLevelFromEnv.mjs";
import ***REMOVED*** LogLevel, resolveLogLevel ***REMOVED*** from "./LogLevel.mjs";
var CustomLoggerWrapper = /** @class */ (function () ***REMOVED***
    function CustomLoggerWrapper(_a) ***REMOVED***
        var name = _a.name, minLevel = _a.minLevel, custom = _a.custom;
        var _b;
        this._minLevel = (_b = mapOptional(minLevel, function (lv) ***REMOVED*** return resolveLogLevel(lv); ***REMOVED***)) !== null && _b !== void 0 ? _b : getMinLogLevelFromEnv(name);
        this._override = typeof custom === 'function' ? ***REMOVED*** log: custom ***REMOVED*** : custom;
    ***REMOVED***
    CustomLoggerWrapper.prototype.log = function (level, message) ***REMOVED***
        if (this._shouldLog(level)) ***REMOVED***
            this._override.log(level, message);
        ***REMOVED***
    ***REMOVED***;
    CustomLoggerWrapper.prototype.crit = function (message) ***REMOVED***
        if (!this._override.crit) ***REMOVED***
            this.log(LogLevel.CRITICAL, message);
        ***REMOVED***
        else if (this._shouldLog(LogLevel.CRITICAL)) ***REMOVED***
            this._override.crit(message);
        ***REMOVED***
    ***REMOVED***;
    CustomLoggerWrapper.prototype.error = function (message) ***REMOVED***
        if (!this._override.error) ***REMOVED***
            this.log(LogLevel.ERROR, message);
        ***REMOVED***
        else if (this._shouldLog(LogLevel.ERROR)) ***REMOVED***
            this._override.error(message);
        ***REMOVED***
    ***REMOVED***;
    CustomLoggerWrapper.prototype.warn = function (message) ***REMOVED***
        if (!this._override.warn) ***REMOVED***
            this.log(LogLevel.WARNING, message);
        ***REMOVED***
        else if (this._shouldLog(LogLevel.WARNING)) ***REMOVED***
            this._override.warn(message);
        ***REMOVED***
    ***REMOVED***;
    CustomLoggerWrapper.prototype.info = function (message) ***REMOVED***
        if (!this._override.info) ***REMOVED***
            this.log(LogLevel.INFO, message);
        ***REMOVED***
        else if (this._shouldLog(LogLevel.INFO)) ***REMOVED***
            this._override.info(message);
        ***REMOVED***
    ***REMOVED***;
    CustomLoggerWrapper.prototype.debug = function (message) ***REMOVED***
        if (!this._override.debug) ***REMOVED***
            this.log(LogLevel.DEBUG, message);
        ***REMOVED***
        else if (this._shouldLog(LogLevel.DEBUG)) ***REMOVED***
            this._override.debug(message);
        ***REMOVED***
    ***REMOVED***;
    CustomLoggerWrapper.prototype.trace = function (message) ***REMOVED***
        if (!this._override.trace) ***REMOVED***
            this.log(LogLevel.TRACE, message);
        ***REMOVED***
        else if (this._shouldLog(LogLevel.TRACE)) ***REMOVED***
            this._override.trace(message);
        ***REMOVED***
    ***REMOVED***;
    CustomLoggerWrapper.prototype._shouldLog = function (level) ***REMOVED***
        return this._minLevel === undefined || this._minLevel >= level;
    ***REMOVED***;
    return CustomLoggerWrapper;
***REMOVED***());
export ***REMOVED*** CustomLoggerWrapper ***REMOVED***;
//# sourceMappingURL=CustomLoggerWrapper.mjs.map