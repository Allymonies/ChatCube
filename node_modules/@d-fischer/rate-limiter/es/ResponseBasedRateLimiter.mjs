import ***REMOVED*** __assign, __awaiter, __generator, __read, __spread ***REMOVED*** from "tslib";
import ***REMOVED*** createLogger ***REMOVED*** from '@d-fischer/logger';
import allSettled from '@d-fischer/promise.allsettled';
import ***REMOVED*** RetryAfterError ***REMOVED*** from "./RetryAfterError.mjs";
var ResponseBasedRateLimiter = /** @class */ (function () ***REMOVED***
    function ResponseBasedRateLimiter(_a) ***REMOVED***
        var logger = _a.logger;
        this._queue = [];
        this._batchRunning = false;
        this._logger = createLogger(__assign(***REMOVED*** name: 'rate-limiter', emoji: true ***REMOVED***, logger));
    ***REMOVED***
    ResponseBasedRateLimiter.prototype.request = function (req) ***REMOVED***
        return __awaiter(this, void 0, Promise, function () ***REMOVED***
            var _this = this;
            return __generator(this, function (_a) ***REMOVED***
                this._logger.trace('request start');
                return [2 /*return*/, new Promise(function (resolve, reject) ***REMOVED***
                        var reqSpec = ***REMOVED***
                            req: req,
                            resolve: resolve,
                            reject: reject
                        ***REMOVED***;
                        if (_this._batchRunning || _this._nextBatchTimer) ***REMOVED***
                            _this._logger.trace("request queued batchRunning:" + _this._batchRunning.toString() + " hasNextBatchTimer:" + (!!_this
                                ._nextBatchTimer).toString());
                            _this._queue.push(reqSpec);
                        ***REMOVED***
                        else ***REMOVED***
                            void _this._runRequestBatch([reqSpec]);
                        ***REMOVED***
                    ***REMOVED***)];
            ***REMOVED***);
        ***REMOVED***);
    ***REMOVED***;
    ResponseBasedRateLimiter.prototype._runRequestBatch = function (reqSpecs) ***REMOVED***
        return __awaiter(this, void 0, void 0, function () ***REMOVED***
            var promises, settledPromises, rejectedPromises, now, retryAt, retryAfter, params, delay;
            var _this = this;
            return __generator(this, function (_a) ***REMOVED***
                switch (_a.label) ***REMOVED***
                    case 0:
                        this._logger.trace("runRequestBatch start specs:" + reqSpecs.length);
                        this._batchRunning = true;
                        if (this._parameters) ***REMOVED***
                            this._logger.debug("Remaining requests: " + this._parameters.remaining);
                        ***REMOVED***
                        this._logger.debug("Doing " + reqSpecs.length + " requests, new queue length is " + this._queue.length);
                        promises = reqSpecs.map(function (reqSpec) ***REMOVED*** return __awaiter(_this, void 0, Promise, function () ***REMOVED***
                            var req, resolve, reject, result, retry, params, e_1;
                            return __generator(this, function (_a) ***REMOVED***
                                switch (_a.label) ***REMOVED***
                                    case 0:
                                        req = reqSpec.req, resolve = reqSpec.resolve, reject = reqSpec.reject;
                                        _a.label = 1;
                                    case 1:
                                        _a.trys.push([1, 3, , 4]);
                                        return [4 /*yield*/, this.doRequest(req)];
                                    case 2:
                                        result = _a.sent();
                                        retry = this.needsToRetryAfter(result);
                                        if (retry !== null) ***REMOVED***
                                            this._queue.unshift(reqSpec);
                                            this._logger.info("Retrying after " + retry + " ms");
                                            throw new RetryAfterError(retry);
                                        ***REMOVED***
                                        params = this.getParametersFromResponse(result);
                                        resolve(result);
                                        return [2 /*return*/, params];
                                    case 3:
                                        e_1 = _a.sent();
                                        if (e_1 instanceof RetryAfterError) ***REMOVED***
                                            throw e_1;
                                        ***REMOVED***
                                        reject(e_1);
                                        return [2 /*return*/, undefined];
                                    case 4: return [2 /*return*/];
                                ***REMOVED***
                            ***REMOVED***);
                        ***REMOVED***); ***REMOVED***);
                        return [4 /*yield*/, allSettled.call(Promise, promises)];
                    case 1:
                        settledPromises = _a.sent();
                        rejectedPromises = settledPromises.filter(function (p) ***REMOVED*** return p.status === 'rejected'; ***REMOVED***);
                        now = Date.now();
                        if (rejectedPromises.length) ***REMOVED***
                            this._logger.trace('runRequestBatch some rejected');
                            retryAt = Math.max.apply(Math, __spread([now], rejectedPromises.map(function (p) ***REMOVED*** return p.reason.retryAt; ***REMOVED***)));
                            retryAfter = retryAt - now;
                            this._logger.warn("Waiting for " + retryAfter + " ms because the rate limit was exceeded");
                            this._nextBatchTimer = setTimeout(function () ***REMOVED***
                                _this._parameters = undefined;
                                void _this._runNextBatch();
                        ***REMOVED*** retryAfter);
                        ***REMOVED***
                        else ***REMOVED***
                            this._logger.trace('runRequestBatch none rejected');
                            params = settledPromises
                                .filter(function (p) ***REMOVED***
                                return p.status === 'fulfilled' && p.value !== undefined;
                            ***REMOVED***)
                                .map(function (p) ***REMOVED*** return p.value; ***REMOVED***)
                                .reduce(function (carry, v) ***REMOVED***
                                if (!carry) ***REMOVED***
                                    return v;
                                ***REMOVED***
                                // return v.resetsAt > carry.resetsAt ? v : carry;
                                return v.remaining < carry.remaining ? v : carry;
                        ***REMOVED*** undefined);
                            this._batchRunning = false;
                            if (params) ***REMOVED***
                                this._parameters = params;
                                if (params.resetsAt < now || params.remaining > 0) ***REMOVED***
                                    this._logger.trace('runRequestBatch canRunMore');
                                    void this._runNextBatch();
                                ***REMOVED***
                                else ***REMOVED***
                                    delay = params.resetsAt - now;
                                    this._logger.trace("runRequestBatch delay:" + delay);
                                    this._logger.warn("Waiting for " + delay + " ms because the rate limit was reached");
                                    this._nextBatchTimer = setTimeout(function () ***REMOVED***
                                        _this._parameters = undefined;
                                        void _this._runNextBatch();
                                ***REMOVED*** delay);
                                ***REMOVED***
                            ***REMOVED***
                        ***REMOVED***
                        this._logger.trace('runRequestBatch end');
                        return [2 /*return*/];
                ***REMOVED***
            ***REMOVED***);
        ***REMOVED***);
    ***REMOVED***;
    ResponseBasedRateLimiter.prototype._runNextBatch = function () ***REMOVED***
        return __awaiter(this, void 0, void 0, function () ***REMOVED***
            var amount, reqSpecs;
            return __generator(this, function (_a) ***REMOVED***
                this._logger.trace('runNextBatch start');
                if (this._nextBatchTimer) ***REMOVED***
                    clearTimeout(this._nextBatchTimer);
                    this._nextBatchTimer = undefined;
                ***REMOVED***
                amount = this._parameters ? Math.min(this._parameters.remaining, this._parameters.limit / 10) : 1;
                reqSpecs = this._queue.splice(0, amount);
                if (reqSpecs.length) ***REMOVED***
                    void this._runRequestBatch(reqSpecs);
                ***REMOVED***
                this._logger.trace('runNextBatch end');
                return [2 /*return*/];
            ***REMOVED***);
        ***REMOVED***);
    ***REMOVED***;
    return ResponseBasedRateLimiter;
***REMOVED***());
export ***REMOVED*** ResponseBasedRateLimiter ***REMOVED***;
//# sourceMappingURL=ResponseBasedRateLimiter.mjs.map