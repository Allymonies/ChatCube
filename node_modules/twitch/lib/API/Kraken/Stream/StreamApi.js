"use strict";
Object.defineProperty(exports, "__esModule", ***REMOVED*** value: true ***REMOVED***);
exports.StreamApi = void 0;
var tslib_1 = require("tslib");
var cache_decorators_1 = require("@d-fischer/cache-decorators");
var twitch_common_1 = require("twitch-common");
var BaseApi_1 = require("../../BaseApi");
var Stream_1 = require("./Stream");
/**
 * The API methods that deal with streams.
 *
 * Can be accessed using `client.kraken.streams` on an ***REMOVED***@ApiClient***REMOVED*** instance.
 *
 * ## Example
 * ```ts
 * const api = new ApiClient(new StaticAuthProvider(clientId, accessToken));
 * const stream = await api.kraken.streams.getStreamByChannel('125328655');
 * ```
 */
var StreamApi = /** @class */ (function (_super) ***REMOVED***
    tslib_1.__extends(StreamApi, _super);
    function StreamApi() ***REMOVED***
        return _super !== null && _super.apply(this, arguments) || this;
    ***REMOVED***
    /**
     * Retrieves the current stream on the given channel.
     *
     * @param channel
     */
    StreamApi.prototype.getStreamByChannel = function (channel) ***REMOVED***
        return tslib_1.__awaiter(this, void 0, void 0, function () ***REMOVED***
            var channelId, data;
            return tslib_1.__generator(this, function (_a) ***REMOVED***
                switch (_a.label) ***REMOVED***
                    case 0:
                        channelId = twitch_common_1.extractUserId(channel);
                        return [4 /*yield*/, this._client.callApi(***REMOVED*** url: "streams/" + channelId ***REMOVED***)];
                    case 1:
                        data = _a.sent();
                        return [2 /*return*/, data.stream ? new Stream_1.Stream(data.stream, this._client) : null];
                ***REMOVED***
            ***REMOVED***);
        ***REMOVED***);
    ***REMOVED***;
    /**
     * Retrieves a list of streams.
     *
     * @param channels A channel ID or a list thereof.
     * @param game Show only streams playing a certain game.
     * @param languageCode Show only streams in a certain language.
     * @param type Show only streams of a certain type.
     * @param page The result page you want to retrieve.
     * @param limit The number of results you want to retrieve.
     */
    StreamApi.prototype.getStreams = function (channels, game, languageCode, type, page, limit) ***REMOVED***
        if (limit === void 0) ***REMOVED*** limit = 25; ***REMOVED***
        return tslib_1.__awaiter(this, void 0, void 0, function () ***REMOVED***
            var query, data;
            var _this = this;
            return tslib_1.__generator(this, function (_a) ***REMOVED***
                switch (_a.label) ***REMOVED***
                    case 0:
                        query = ***REMOVED***
                            limit: limit.toString(),
                            channel: typeof channels === 'string' ? channels : channels === null || channels === void 0 ? void 0 : channels.join(','),
                            game: game,
                            language: languageCode,
                            stream_type: type,
                            offset: page ? ((page - 1) * limit).toString() : undefined
                        ***REMOVED***;
                        return [4 /*yield*/, this._client.callApi(***REMOVED*** url: 'streams', query: query ***REMOVED***)];
                    case 1:
                        data = _a.sent();
                        return [2 /*return*/, data.streams.map(function (streamData) ***REMOVED*** return new Stream_1.Stream(streamData, _this._client); ***REMOVED***)];
                ***REMOVED***
            ***REMOVED***);
        ***REMOVED***);
    ***REMOVED***;
    /**
     * Retrieves a list of all streams.
     *
     * @param page The result page you want to retrieve.
     * @param limit The number of results you want to retrieve.
     */
    StreamApi.prototype.getAllStreams = function (page, limit) ***REMOVED***
        return tslib_1.__awaiter(this, void 0, void 0, function () ***REMOVED***
            return tslib_1.__generator(this, function (_a) ***REMOVED***
                return [2 /*return*/, this.getStreams(undefined, undefined, undefined, Stream_1.StreamType.All, page, limit)];
            ***REMOVED***);
        ***REMOVED***);
    ***REMOVED***;
    /**
     * Retrieves a list of all live streams.
     *
     * @param page The result page you want to retrieve.
     * @param limit The number of results you want to retrieve.
     */
    StreamApi.prototype.getAllLiveStreams = function (page, limit) ***REMOVED***
        return tslib_1.__awaiter(this, void 0, void 0, function () ***REMOVED***
            return tslib_1.__generator(this, function (_a) ***REMOVED***
                return [2 /*return*/, this.getStreams(undefined, undefined, undefined, Stream_1.StreamType.Live, page, limit)];
            ***REMOVED***);
        ***REMOVED***);
    ***REMOVED***;
    /**
     * Retrieves a list of all streams on channels the currently authenticated user is following.
     *
     * @param type Show only streams of a certain type.
     * @param page The result page you want to retrieve.
     * @param limit The number of results you want to retrieve.
     */
    StreamApi.prototype.getFollowedStreams = function (type, page, limit) ***REMOVED***
        if (limit === void 0) ***REMOVED*** limit = 25; ***REMOVED***
        return tslib_1.__awaiter(this, void 0, void 0, function () ***REMOVED***
            var query, data;
            var _this = this;
            return tslib_1.__generator(this, function (_a) ***REMOVED***
                switch (_a.label) ***REMOVED***
                    case 0:
                        query = ***REMOVED*** limit: limit.toString() ***REMOVED***;
                        if (type) ***REMOVED***
                            query.type = type;
                        ***REMOVED***
                        if (page) ***REMOVED***
                            query.offset = ((page - 1) * limit).toString();
                        ***REMOVED***
                        return [4 /*yield*/, this._client.callApi(***REMOVED***
                                url: 'streams/followed',
                                query: query,
                                scope: 'user_read'
                            ***REMOVED***)];
                    case 1:
                        data = _a.sent();
                        return [2 /*return*/, data.streams.map(function (streamData) ***REMOVED*** return new Stream_1.Stream(streamData, _this._client); ***REMOVED***)];
                ***REMOVED***
            ***REMOVED***);
        ***REMOVED***);
    ***REMOVED***;
    tslib_1.__decorate([
        cache_decorators_1.Cached(60)
    ], StreamApi.prototype, "getStreamByChannel", null);
    tslib_1.__decorate([
        cache_decorators_1.Cached(60)
    ], StreamApi.prototype, "getFollowedStreams", null);
    StreamApi = tslib_1.__decorate([
        cache_decorators_1.Cacheable,
        twitch_common_1.rtfm('twitch', 'StreamApi')
    ], StreamApi);
    return StreamApi;
***REMOVED***(BaseApi_1.BaseApi));
exports.StreamApi = StreamApi;
