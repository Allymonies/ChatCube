import type ***REMOVED*** ApiClient ***REMOVED*** from '../../../ApiClient';
import type ***REMOVED*** CheermoteBackground, CheermoteDisplayInfo, CheermoteFormat, CheermoteScale, CheermoteState ***REMOVED*** from '../../Shared/BaseCheermoteList';
import ***REMOVED*** BaseCheermoteList ***REMOVED*** from '../../Shared/BaseCheermoteList';
/** @private */
export declare type CheermoteActionImageUrlsByScale = Record<CheermoteScale, string>;
/** @private */
export declare type CheermoteActionImageUrlsByStateAndScale = Record<CheermoteState, CheermoteActionImageUrlsByScale>;
/** @private */
export declare type CheermoteActionImageUrlsByBackgroundAndStateAndScale = Record<CheermoteBackground, CheermoteActionImageUrlsByStateAndScale>;
/** @private */
export interface CheermoteActionTierData ***REMOVED***
    min_bits: number;
    id: string;
    color: string;
    images: CheermoteActionImageUrlsByBackgroundAndStateAndScale[];
***REMOVED***
/** @private */
export interface CheermoteActionData ***REMOVED***
    prefix: string;
    scales: string[];
    tiers: CheermoteActionTierData[];
    backgrounds: string[];
    states: string[];
    type: string;
    updated_at: string;
    priority: number;
***REMOVED***
/** @private */
export interface CheermoteListData ***REMOVED***
    actions: CheermoteActionData[];
***REMOVED***
/**
 * A list of cheermotes you can use globally or in a specific channel, depending on how you fetched the list.
 *
 * @inheritDoc
 */
export declare class CheermoteList extends BaseCheermoteList ***REMOVED***
    private readonly _data;
    private readonly _client;
    /** @private */
    constructor(data: CheermoteActionData[], client: ApiClient);
    /**
     * Gets the URL and color needed to properly represent a cheer of the given amount of bits with the given prefix.
     *
     * @param name The name/prefix of the cheermote.
     * @param bits The amount of bits cheered.
     * @param format The format of the cheermote you want to request.
     */
    getCheermoteDisplayInfo(name: string, bits: number, format?: Partial<CheermoteFormat>): CheermoteDisplayInfo;
    /**
     * Gets all possible cheermote names.
     */
    getPossibleNames(): string[];
***REMOVED***
