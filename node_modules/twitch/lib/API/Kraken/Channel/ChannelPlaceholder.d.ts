import type ***REMOVED*** UserIdResolvable, UserIdResolvableType ***REMOVED*** from 'twitch-common';
import type ***REMOVED*** ApiClient ***REMOVED*** from '../../../ApiClient';
import type ***REMOVED*** CheermoteList ***REMOVED*** from '../Bits/CheermoteList';
import type ***REMOVED*** Stream ***REMOVED*** from '../Stream/Stream';
import type ***REMOVED*** Channel ***REMOVED*** from './Channel';
import type ***REMOVED*** ChannelFollow ***REMOVED*** from './ChannelFollow';
import type ***REMOVED*** ChannelSubscription ***REMOVED*** from './ChannelSubscription';
/** @private */
export interface ChannelPlaceholderData ***REMOVED***
    _id: string;
***REMOVED***
/**
 * A placeholder for a channel.
 *
 * This is used for example when you only have retrieved user data, but not channel data.
 * This can do anything you can do with only a channel ID, as it's equivalent to the user ID.
 */
export declare class ChannelPlaceholder implements UserIdResolvableType ***REMOVED***
    /** @private */ protected readonly _data: ChannelPlaceholderData;
    /** @private */ protected readonly _client: ApiClient;
    /** @private */
    constructor(id: string, client: ApiClient);
    /** @private */
    get cacheKey(): string;
    /**
     * The ID of the channel.
     */
    get id(): string;
    /**
     * Retrieves the list of cheermotes you can use in the channel.
     */
    getCheermotes(): Promise<CheermoteList>;
    /**
     * Retrieves the channel data.
     */
    getChannel(): Promise<Channel>;
    /**
     * Retrieves the channel's stream data.
     */
    getStream(): Promise<Stream | null>;
    /**
     * Retrieves the channel's followers.
     */
    getFollowers(): Promise<ChannelFollow[]>;
    /**
     * Retrieves the channel's subscribers.
     */
    getSubscriptions(): Promise<ChannelSubscription[]>;
    /**
     * Retrieves the subscription data for the given user to the channel.
     *
     * Throws if the channel doesn't have a subscription program or the user is not subscribed to it.
     *
     * This method requires access to the channel. If you only have access to the user,
     * use ***REMOVED***@User#getSubscriptionTo***REMOVED*** instead.
     *
     * @param user The user you want to get the subscription data for.
     */
    getSubscriptionBy(user: UserIdResolvable): Promise<ChannelSubscription | null>;
    /**
     * Checks whether the given user is subscribed to the channel.
     *
     * @param user The user you want to check the subscription for.
     */
    hasSubscriber(user: UserIdResolvable): Promise<boolean>;
***REMOVED***
