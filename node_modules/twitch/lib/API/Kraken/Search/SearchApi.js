"use strict";
Object.defineProperty(exports, "__esModule", ***REMOVED*** value: true ***REMOVED***);
exports.SearchApi = void 0;
var tslib_1 = require("tslib");
var cache_decorators_1 = require("@d-fischer/cache-decorators");
var twitch_common_1 = require("twitch-common");
var BaseApi_1 = require("../../BaseApi");
var Channel_1 = require("../Channel/Channel");
var Stream_1 = require("../Stream/Stream");
/**
 * The API methods that deal with searching.
 *
 * Can be accessed using `client.kraken.search` on an ***REMOVED***@ApiClient***REMOVED*** instance.
 *
 * ## Example
 * ```ts
 * const api = new ApiClient(new StaticAuthProvider(clientId, accessToken));
 * const channel = await api.kraken.search.searchStreams('Hearthstone');
 * ```
 */
var SearchApi = /** @class */ (function (_super) ***REMOVED***
    tslib_1.__extends(SearchApi, _super);
    function SearchApi() ***REMOVED***
        return _super !== null && _super.apply(this, arguments) || this;
    ***REMOVED***
    /**
     * Retrieves a list of channels that match the given search term.
     *
     * @param term The term you want to search for.
     * @param page The result page you want to retrieve.
     * @param limit The number of results you want to retrieve.
     */
    SearchApi.prototype.searchChannels = function (term, page, limit) ***REMOVED***
        if (limit === void 0) ***REMOVED*** limit = 25; ***REMOVED***
        return tslib_1.__awaiter(this, void 0, void 0, function () ***REMOVED***
            var query, data;
            var _this = this;
            return tslib_1.__generator(this, function (_a) ***REMOVED***
                switch (_a.label) ***REMOVED***
                    case 0:
                        query = ***REMOVED*** query: term, limit: limit.toString() ***REMOVED***;
                        if (page) ***REMOVED***
                            query.offset = ((page - 1) * limit).toString();
                        ***REMOVED***
                        return [4 /*yield*/, this._client.callApi(***REMOVED*** url: 'search/channels', query: query ***REMOVED***)];
                    case 1:
                        data = _a.sent();
                        return [2 /*return*/, data.channels.map(function (channelData) ***REMOVED*** return new Channel_1.Channel(channelData, _this._client); ***REMOVED***)];
                ***REMOVED***
            ***REMOVED***);
        ***REMOVED***);
    ***REMOVED***;
    /**
     * Retrieves a list of streams that match the given search term.
     *
     * @param term The term you want to search for.
     * @param page The result page you want to retrieve.
     * @param limit The number of results you want to retrieve.
     * @param hls Whether you want only HLS or only non-HLS (RTMP) streams. If not set, finds both types of streams.
     */
    SearchApi.prototype.searchStreams = function (term, page, limit, hls) ***REMOVED***
        if (limit === void 0) ***REMOVED*** limit = 25; ***REMOVED***
        return tslib_1.__awaiter(this, void 0, void 0, function () ***REMOVED***
            var query, data;
            var _this = this;
            return tslib_1.__generator(this, function (_a) ***REMOVED***
                switch (_a.label) ***REMOVED***
                    case 0:
                        query = ***REMOVED*** query: term, limit: limit.toString() ***REMOVED***;
                        if (page) ***REMOVED***
                            query.offset = ((page - 1) * limit).toString();
                        ***REMOVED***
                        if (hls !== undefined) ***REMOVED***
                            query.hls = hls.toString();
                        ***REMOVED***
                        return [4 /*yield*/, this._client.callApi(***REMOVED*** url: 'search/streams', query: query ***REMOVED***)];
                    case 1:
                        data = _a.sent();
                        return [2 /*return*/, data.streams.map(function (streamData) ***REMOVED*** return new Stream_1.Stream(streamData, _this._client); ***REMOVED***)];
                ***REMOVED***
            ***REMOVED***);
        ***REMOVED***);
    ***REMOVED***;
    tslib_1.__decorate([
        cache_decorators_1.Cached(300)
    ], SearchApi.prototype, "searchChannels", null);
    tslib_1.__decorate([
        cache_decorators_1.Cached(300)
    ], SearchApi.prototype, "searchStreams", null);
    SearchApi = tslib_1.__decorate([
        cache_decorators_1.Cacheable,
        twitch_common_1.rtfm('twitch', 'SearchApi')
    ], SearchApi);
    return SearchApi;
***REMOVED***(BaseApi_1.BaseApi));
exports.SearchApi = SearchApi;
