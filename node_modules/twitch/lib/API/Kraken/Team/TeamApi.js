"use strict";
Object.defineProperty(exports, "__esModule", ***REMOVED*** value: true ***REMOVED***);
exports.TeamApi = void 0;
var tslib_1 = require("tslib");
var cache_decorators_1 = require("@d-fischer/cache-decorators");
var twitch_common_1 = require("twitch-common");
var BaseApi_1 = require("../../BaseApi");
var Team_1 = require("./Team");
var TeamWithUsers_1 = require("./TeamWithUsers");
/**
 * The API methods that deal with teams.
 *
 * Can be accessed using `client.kraken.teams` on an ***REMOVED***@ApiClient***REMOVED*** instance.
 *
 * ## Example
 * ```ts
 * const api = new ApiClient(new StaticAuthProvider(clientId, accessToken));
 * const team = await api.kraken.teams.getTeamByName('staff');
 * ```
 */
var TeamApi = /** @class */ (function (_super) ***REMOVED***
    tslib_1.__extends(TeamApi, _super);
    function TeamApi() ***REMOVED***
        return _super !== null && _super.apply(this, arguments) || this;
    ***REMOVED***
    /**
     * Get a list of teams.
     *
     * @param page The result page you want to retrieve.
     * @param limit The number of results you want to retrieve.
     */
    TeamApi.prototype.getTeams = function (page, limit) ***REMOVED***
        if (limit === void 0) ***REMOVED*** limit = 25; ***REMOVED***
        return tslib_1.__awaiter(this, void 0, void 0, function () ***REMOVED***
            var query, data;
            var _this = this;
            return tslib_1.__generator(this, function (_a) ***REMOVED***
                switch (_a.label) ***REMOVED***
                    case 0:
                        query = ***REMOVED******REMOVED***;
                        if (page) ***REMOVED***
                            query.offset = ((page - 1) * limit).toString();
                        ***REMOVED***
                        query.limit = limit.toString();
                        return [4 /*yield*/, this._client.callApi(***REMOVED***
                                url: 'teams',
                                query: query
                            ***REMOVED***)];
                    case 1:
                        data = _a.sent();
                        return [2 /*return*/, data.teams.map(function (teamData) ***REMOVED*** return new Team_1.Team(teamData, _this._client); ***REMOVED***)];
                ***REMOVED***
            ***REMOVED***);
        ***REMOVED***);
    ***REMOVED***;
    /**
     * Retrieves the team data for the given team name.
     *
     * @param team The team name you want to look up.
     */
    TeamApi.prototype.getTeamByName = function (team) ***REMOVED***
        return tslib_1.__awaiter(this, void 0, void 0, function () ***REMOVED***
            var teamData;
            return tslib_1.__generator(this, function (_a) ***REMOVED***
                switch (_a.label) ***REMOVED***
                    case 0: return [4 /*yield*/, this._client.callApi(***REMOVED*** url: "teams/" + team ***REMOVED***)];
                    case 1:
                        teamData = _a.sent();
                        return [2 /*return*/, new TeamWithUsers_1.TeamWithUsers(teamData, this._client)];
                ***REMOVED***
            ***REMOVED***);
        ***REMOVED***);
    ***REMOVED***;
    tslib_1.__decorate([
        cache_decorators_1.Cached(3600)
    ], TeamApi.prototype, "getTeams", null);
    tslib_1.__decorate([
        cache_decorators_1.Cached(3600)
    ], TeamApi.prototype, "getTeamByName", null);
    TeamApi = tslib_1.__decorate([
        cache_decorators_1.Cacheable,
        twitch_common_1.rtfm('twitch', 'TeamApi')
    ], TeamApi);
    return TeamApi;
***REMOVED***(BaseApi_1.BaseApi));
exports.TeamApi = TeamApi;
