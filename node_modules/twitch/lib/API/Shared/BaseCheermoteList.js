"use strict";
/// <reference lib="es2016.array.include" />
Object.defineProperty(exports, "__esModule", ***REMOVED*** value: true ***REMOVED***);
exports.BaseCheermoteList = exports.CheermoteScale = exports.CheermoteState = exports.CheermoteBackground = void 0;
var tslib_1 = require("tslib");
var shared_utils_1 = require("@d-fischer/shared-utils");
var CheermoteBackground;
(function (CheermoteBackground) ***REMOVED***
    /**
     * A dark background.
     *
     * Cheermotes might show artifacts on bright backgrounds.
     */
    CheermoteBackground["dark"] = "dark";
    /**
     * A bright background.
     *
     * Cheermotes might show artifacts on dark backgrounds.
     */
    CheermoteBackground["light"] = "light";
***REMOVED***)(CheermoteBackground || (CheermoteBackground = ***REMOVED******REMOVED***));
exports.CheermoteBackground = CheermoteBackground;
var CheermoteState;
(function (CheermoteState) ***REMOVED***
    /**
     * The cheermote should be animated.
     */
    CheermoteState["animated"] = "animated";
    /**
     * The cheermote should not be animated.
     */
    CheermoteState["static"] = "static";
***REMOVED***)(CheermoteState || (CheermoteState = ***REMOVED******REMOVED***));
exports.CheermoteState = CheermoteState;
var CheermoteScale;
(function (CheermoteScale) ***REMOVED***
    /**
     * The cheermote should not be scaled.
     */
    CheermoteScale["x1"] = "1";
    /**
     * The cheermote should be scaled 1.5x.
     */
    CheermoteScale["x1_5"] = "1.5";
    /**
     * The cheermote should be scaled 2x.
     */
    CheermoteScale["x2"] = "2";
    /**
     * The cheermote should be scaled 3x.
     */
    CheermoteScale["x3"] = "3";
    /**
     * The cheermote should be scaled 4x.
     */
    CheermoteScale["x4"] = "4";
***REMOVED***)(CheermoteScale || (CheermoteScale = ***REMOVED******REMOVED***));
exports.CheermoteScale = CheermoteScale;
/** @private */
var BaseCheermoteList = /** @class */ (function () ***REMOVED***
    function BaseCheermoteList() ***REMOVED***
    ***REMOVED***
    /**
     * Parses all the cheermotes out of a message.
     *
     * @param message The message.
     */
    BaseCheermoteList.prototype.parseMessage = function (message) ***REMOVED***
        var result = [];
        var names = this.getPossibleNames();
        var re = new RegExp('(?<=^|\\s)([a-z0-9]+?)(\\d+)(?=\\s|$)', 'gi');
        var match = null;
        while ((match = re.exec(message))) ***REMOVED***
            var name_1 = match[1].toLowerCase();
            if (names.includes(name_1)) ***REMOVED***
                var amount = Number(match[2]);
                result.push(***REMOVED***
                    name: name_1,
                    amount: amount,
                    position: shared_utils_1.utf8Length(message.substr(0, match.index)),
                    length: match[0].length,
                    displayInfo: this.getCheermoteDisplayInfo(name_1, amount)
                ***REMOVED***);
            ***REMOVED***
        ***REMOVED***
        return result;
    ***REMOVED***;
    /**
     * Transforms all the cheermotes in a message and returns an array of all the message parts.
     *
     * @param message The message.
     * @param transformer A function that transforms a message part into an arbitrary structure.
     */
    BaseCheermoteList.prototype.transformCheerMessage = function (message, transformer) ***REMOVED***
        var e_1, _a;
        var result = [];
        var currentPosition = 0;
        try ***REMOVED***
            for (var _b = tslib_1.__values(this.parseMessage(message)), _c = _b.next(); !_c.done; _c = _b.next()) ***REMOVED***
                var foundCheermote = _c.value;
                if (currentPosition < foundCheermote.position) ***REMOVED***
                    result.push(message.substring(currentPosition, foundCheermote.position));
                ***REMOVED***
                result.push(transformer(foundCheermote));
                currentPosition = foundCheermote.position + foundCheermote.length;
            ***REMOVED***
        ***REMOVED***
        catch (e_1_1) ***REMOVED*** e_1 = ***REMOVED*** error: e_1_1 ***REMOVED***; ***REMOVED***
        finally ***REMOVED***
            try ***REMOVED***
                if (_c && !_c.done && (_a = _b.return)) _a.call(_b);
            ***REMOVED***
            finally ***REMOVED*** if (e_1) throw e_1.error; ***REMOVED***
        ***REMOVED***
        if (currentPosition < message.length) ***REMOVED***
            result.push(message.substr(currentPosition));
        ***REMOVED***
        return result;
    ***REMOVED***;
    return BaseCheermoteList;
***REMOVED***());
exports.BaseCheermoteList = BaseCheermoteList;
