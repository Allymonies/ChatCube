import type ***REMOVED*** UserIdResolvable ***REMOVED*** from 'twitch-common';
import ***REMOVED*** BaseApi ***REMOVED*** from '../../BaseApi';
import ***REMOVED*** HelixPaginatedRequest ***REMOVED*** from '../HelixPaginatedRequest';
import type ***REMOVED*** HelixPaginatedResult ***REMOVED*** from '../HelixPaginatedResult';
import type ***REMOVED*** HelixForwardPagination ***REMOVED*** from '../HelixPagination';
import type ***REMOVED*** HelixBanData ***REMOVED*** from './HelixBan';
import ***REMOVED*** HelixBan ***REMOVED*** from './HelixBan';
import type ***REMOVED*** HelixBanEventData ***REMOVED*** from './HelixBanEvent';
import ***REMOVED*** HelixBanEvent ***REMOVED*** from './HelixBanEvent';
import type ***REMOVED*** HelixModeratorData ***REMOVED*** from './HelixModerator';
import ***REMOVED*** HelixModerator ***REMOVED*** from './HelixModerator';
import type ***REMOVED*** HelixModeratorEventData ***REMOVED*** from './HelixModeratorEvent';
import ***REMOVED*** HelixModeratorEvent ***REMOVED*** from './HelixModeratorEvent';
/**
 * Filters for the banned users request.
 */
export interface HelixBanFilter extends HelixForwardPagination ***REMOVED***
    /**
     * A user ID or a list thereof.
     */
    userId: string | string[];
***REMOVED***
/**
 * Filters for the moderators request.
 */
interface HelixModeratorFilter extends HelixForwardPagination ***REMOVED***
    /**
     * A user ID or a list thereof.
     */
    userId: string | string[];
***REMOVED***
/**
 * The Helix API methods that deal with moderation.
 *
 * Can be accessed using `client.helix.moderation` on an ***REMOVED***@ApiClient***REMOVED*** instance.
 *
 * ## Example
 * ```ts
 * const api = new ApiClient(new StaticAuthProvider(clientId, accessToken));
 * const ***REMOVED*** data: users ***REMOVED*** = await api.helix.moderation.getBannedUsers('61369223');
 * ```
 */
export declare class HelixModerationApi extends BaseApi ***REMOVED***
    /**
     * Retrieves a list of banned users in a given channel.
     *
     * @param channel The channel to retrieve the banned users from.
     * @param filter Additional filters for the result set.
     */
    getBannedUsers(channel: UserIdResolvable, filter?: HelixBanFilter): Promise<HelixPaginatedResult<HelixBan>>;
    /**
     * Creates a paginator for banned users in a given channel.
     *
     * @param channel The channel to retrieve the banned users from.
     */
    getBannedUsersPaginated(channel: UserIdResolvable): HelixPaginatedRequest<HelixBanData, HelixBan>;
    /**
     * Checks whether a given user is banned in a given channel.
     *
     * @param channel The channel to check for a ban of the given user.
     * @param user The user to check for a ban in the given channel.
     */
    checkUserBan(channel: UserIdResolvable, user: UserIdResolvable): Promise<boolean>;
    /**
     * Retrieves a list of ban events for a given channel.
     *
     * @param channel The channel to retrieve the ban events from.
     * @param filter Additional filters for the result set.
     */
    getBanEvents(channel: UserIdResolvable, filter?: HelixBanFilter): Promise<HelixPaginatedResult<HelixBanEvent>>;
    /**
     * Creates a paginator for ban events for a given channel.
     *
     * @param channel The channel to retrieve the ban events from.
     */
    getBanEventsPaginated(channel: UserIdResolvable): HelixPaginatedRequest<HelixBanEventData, HelixBanEvent>;
    /**
     * Retrieves a list of moderators in a given channel.
     *
     * @param channel The channel to retrieve moderators from.
     * @param filter Additional filters for the result set.
     */
    getModerators(channel: UserIdResolvable, filter?: HelixModeratorFilter): Promise<HelixPaginatedResult<HelixModerator>>;
    /**
     * Creates a paginator for moderators in a given channel.
     *
     * @param channel The channel to retrieve moderators from.
     */
    getModeratorsPaginated(channel: UserIdResolvable): HelixPaginatedRequest<HelixModeratorData, HelixModerator>;
    /**
     * Checks whether a given user is a moderator of a given channel.
     *
     * @param channel The channel to check.
     * @param user The user to check.
     */
    checkUserMod(channel: UserIdResolvable, user: UserIdResolvable): Promise<boolean>;
    /**
     * Retrieves a list of moderator events for a given channel.
     *
     * @param channel The channel to retrieve the moderator events from.
     * @param filter Additional filters for the result set.
     */
    getModeratorEvents(channel: UserIdResolvable, filter?: HelixModeratorFilter): Promise<HelixPaginatedResult<HelixModeratorEvent>>;
    /**
     * Creates a paginator for moderator events for a given channel.
     *
     * @param channel The channel to retrieve the moderator events from.
     */
    getModeratorEventsPaginated(channel: UserIdResolvable): HelixPaginatedRequest<HelixModeratorEventData, HelixModeratorEvent>;
    /**
     * Processes a message held by AutoMod.
     *
     * @param user The user who is processing the message.
     * @param msgId The ID of the message.
     * @param allow Whether to allow the message - `true` allows, and `false` denies.
     */
    processHeldAutoModMessage(user: UserIdResolvable, msgId: string, allow: boolean): Promise<void>;
***REMOVED***
export ***REMOVED******REMOVED***;
