"use strict";
Object.defineProperty(exports, "__esModule", ***REMOVED*** value: true ***REMOVED***);
exports.HelixModeratorEvent = exports.HelixModeratorEventType = void 0;
var tslib_1 = require("tslib");
var twitch_common_1 = require("twitch-common");
var HelixModerator_1 = require("./HelixModerator");
var HelixModeratorEventType;
(function (HelixModeratorEventType) ***REMOVED***
    /**
     * Sent when a user gains moderation privileges.
     */
    HelixModeratorEventType["Add"] = "moderation.moderator.add";
    /**
     * Sent when a user loses moderation privileges.
     */
    HelixModeratorEventType["Remove"] = "moderation.moderator.remove";
***REMOVED***)(HelixModeratorEventType || (HelixModeratorEventType = ***REMOVED******REMOVED***));
exports.HelixModeratorEventType = HelixModeratorEventType;
/**
 * An event that indicates the change of a moderator status, i.e. gaining or losing moderation privileges.
 */
var HelixModeratorEvent = /** @class */ (function (_super) ***REMOVED***
    tslib_1.__extends(HelixModeratorEvent, _super);
    /** @private */
    function HelixModeratorEvent(eventData, client) ***REMOVED***
        var _this = _super.call(this, eventData.event_data, client) || this;
        _this._eventData = eventData;
        return _this;
    ***REMOVED***
    Object.defineProperty(HelixModeratorEvent.prototype, "eventId", ***REMOVED***
        /**
         * The unique ID of the moderator event.
         */
        get: function () ***REMOVED***
            return this._eventData.id;
    ***REMOVED***
        enumerable: false,
        configurable: true
    ***REMOVED***);
    Object.defineProperty(HelixModeratorEvent.prototype, "eventType", ***REMOVED***
        /**
         * The type of the moderator event.
         */
        get: function () ***REMOVED***
            return this._eventData.event_type;
    ***REMOVED***
        enumerable: false,
        configurable: true
    ***REMOVED***);
    Object.defineProperty(HelixModeratorEvent.prototype, "eventDate", ***REMOVED***
        /**
         * The date of the moderator event.
         */
        get: function () ***REMOVED***
            return new Date(this._eventData.event_timestamp);
    ***REMOVED***
        enumerable: false,
        configurable: true
    ***REMOVED***);
    Object.defineProperty(HelixModeratorEvent.prototype, "eventVersion", ***REMOVED***
        /**
         * The version of the moderator event.
         */
        get: function () ***REMOVED***
            return this._eventData.version;
    ***REMOVED***
        enumerable: false,
        configurable: true
    ***REMOVED***);
    Object.defineProperty(HelixModeratorEvent.prototype, "broadcasterId", ***REMOVED***
        /**
         * The id of the broadcaster where the user gained/lost moderation privileges.
         */
        get: function () ***REMOVED***
            return this._eventData.event_data.broadcaster_id;
    ***REMOVED***
        enumerable: false,
        configurable: true
    ***REMOVED***);
    Object.defineProperty(HelixModeratorEvent.prototype, "broadcasterName", ***REMOVED***
        /**
         * The name of the broadcaster where the user gained/lost moderation privileges.
         */
        get: function () ***REMOVED***
            return this._eventData.event_data.broadcaster_login;
    ***REMOVED***
        enumerable: false,
        configurable: true
    ***REMOVED***);
    Object.defineProperty(HelixModeratorEvent.prototype, "broadcasterDisplayName", ***REMOVED***
        /**
         * The display name of the broadcaster where the user gained/lost moderation privileges.
         */
        get: function () ***REMOVED***
            return this._eventData.event_data.broadcaster_name;
    ***REMOVED***
        enumerable: false,
        configurable: true
    ***REMOVED***);
    /**
     * Retrieves more information about the broadcaster.
     */
    HelixModeratorEvent.prototype.getBroadcaster = function () ***REMOVED***
        return tslib_1.__awaiter(this, void 0, void 0, function () ***REMOVED***
            return tslib_1.__generator(this, function (_a) ***REMOVED***
                return [2 /*return*/, this._client.helix.users.getUserById(this._eventData.event_data.broadcaster_id)];
            ***REMOVED***);
        ***REMOVED***);
    ***REMOVED***;
    HelixModeratorEvent = tslib_1.__decorate([
        twitch_common_1.rtfm('twitch', 'HelixModeratorEvent', 'userId')
    ], HelixModeratorEvent);
    return HelixModeratorEvent;
***REMOVED***(HelixModerator_1.HelixModerator));
exports.HelixModeratorEvent = HelixModeratorEvent;
