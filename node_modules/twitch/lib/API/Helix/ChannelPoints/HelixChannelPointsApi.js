"use strict";
Object.defineProperty(exports, "__esModule", ***REMOVED*** value: true ***REMOVED***);
exports.HelixChannelPointsApi = void 0;
var tslib_1 = require("tslib");
var twitch_api_call_1 = require("twitch-api-call");
var twitch_common_1 = require("twitch-common");
var BaseApi_1 = require("../../BaseApi");
var HelixPaginatedRequest_1 = require("../HelixPaginatedRequest");
var HelixPaginatedResult_1 = require("../HelixPaginatedResult");
var HelixPagination_1 = require("../HelixPagination");
var HelixCustomReward_1 = require("./HelixCustomReward");
var HelixCustomRewardRedemption_1 = require("./HelixCustomRewardRedemption");
/**
 * The Helix API methods that deal with channel points.
 *
 * Can be accessed using `client.helix.channelPoints` on an ***REMOVED***@ApiClient***REMOVED*** instance.
 *
 * ## Example
 * ```ts
 * const api = new ApiClient(new StaticAuthProvider(clientId, accessToken));
 * const rewards = await api.helix.channelPoints.getCustomRewards('125328655');
 * ```
 */
var HelixChannelPointsApi = /** @class */ (function (_super) ***REMOVED***
    tslib_1.__extends(HelixChannelPointsApi, _super);
    function HelixChannelPointsApi() ***REMOVED***
        return _super !== null && _super.apply(this, arguments) || this;
    ***REMOVED***
    HelixChannelPointsApi_1 = HelixChannelPointsApi;
    /**
     * Retrieves all custom rewards for the given broadcaster.
     *
     * @param broadcaster The broadcaster to retrieve the rewards for.
     * @param onlyManageable Whether to only retrieve rewards that can be managed by the API.
     */
    HelixChannelPointsApi.prototype.getCustomRewards = function (broadcaster, onlyManageable) ***REMOVED***
        return tslib_1.__awaiter(this, void 0, void 0, function () ***REMOVED***
            var result;
            var _this = this;
            return tslib_1.__generator(this, function (_a) ***REMOVED***
                switch (_a.label) ***REMOVED***
                    case 0: return [4 /*yield*/, this._client.callApi(***REMOVED***
                            type: twitch_api_call_1.TwitchApiCallType.Helix,
                            url: 'channel_points/custom_rewards',
                            scope: 'channel:read:redemptions',
                            query: ***REMOVED***
                                broadcaster_id: twitch_common_1.extractUserId(broadcaster),
                                only_manageable_rewards: onlyManageable === null || onlyManageable === void 0 ? void 0 : onlyManageable.toString()
                            ***REMOVED***
                        ***REMOVED***)];
                    case 1:
                        result = _a.sent();
                        return [2 /*return*/, result.data.map(function (data) ***REMOVED*** return new HelixCustomReward_1.HelixCustomReward(data, _this._client); ***REMOVED***)];
                ***REMOVED***
            ***REMOVED***);
        ***REMOVED***);
    ***REMOVED***;
    /**
     * Retrieves custom rewards by IDs.
     *
     * @param broadcaster The broadcaster to retrieve the rewards for.
     * @param rewardIds The IDs of the rewards.
     */
    HelixChannelPointsApi.prototype.getCustomRewardsByIds = function (broadcaster, rewardIds) ***REMOVED***
        return tslib_1.__awaiter(this, void 0, void 0, function () ***REMOVED***
            var result;
            var _this = this;
            return tslib_1.__generator(this, function (_a) ***REMOVED***
                switch (_a.label) ***REMOVED***
                    case 0:
                        if (!rewardIds.length) ***REMOVED***
                            return [2 /*return*/, []];
                        ***REMOVED***
                        return [4 /*yield*/, this._client.callApi(***REMOVED***
                                type: twitch_api_call_1.TwitchApiCallType.Helix,
                                url: 'channel_points/custom_rewards',
                                scope: 'channel:read:redemptions',
                                query: ***REMOVED***
                                    broadcaster_id: twitch_common_1.extractUserId(broadcaster),
                                    id: rewardIds
                                ***REMOVED***
                            ***REMOVED***)];
                    case 1:
                        result = _a.sent();
                        return [2 /*return*/, result.data.map(function (data) ***REMOVED*** return new HelixCustomReward_1.HelixCustomReward(data, _this._client); ***REMOVED***)];
                ***REMOVED***
            ***REMOVED***);
        ***REMOVED***);
    ***REMOVED***;
    /**
     * Retrieves a custom reward by ID.
     *
     * @param broadcaster The broadcaster to retrieve the reward for.
     * @param rewardId The ID of the reward.
     */
    HelixChannelPointsApi.prototype.getCustomRewardById = function (broadcaster, rewardId) ***REMOVED***
        return tslib_1.__awaiter(this, void 0, void 0, function () ***REMOVED***
            var rewards;
            return tslib_1.__generator(this, function (_a) ***REMOVED***
                switch (_a.label) ***REMOVED***
                    case 0: return [4 /*yield*/, this.getCustomRewardsByIds(broadcaster, [rewardId])];
                    case 1:
                        rewards = _a.sent();
                        return [2 /*return*/, rewards.length ? rewards[0] : null];
                ***REMOVED***
            ***REMOVED***);
        ***REMOVED***);
    ***REMOVED***;
    /**
     * Creates a new custom reward.
     *
     * @param broadcaster The broadcaster to create the reward for.
     * @param data The reward data.
     *
     * @expandParams
     */
    HelixChannelPointsApi.prototype.createCustomReward = function (broadcaster, data) ***REMOVED***
        return tslib_1.__awaiter(this, void 0, void 0, function () ***REMOVED***
            var result;
            return tslib_1.__generator(this, function (_a) ***REMOVED***
                switch (_a.label) ***REMOVED***
                    case 0: return [4 /*yield*/, this._client.callApi(***REMOVED***
                            type: twitch_api_call_1.TwitchApiCallType.Helix,
                            url: 'channel_points/custom_rewards',
                            method: 'POST',
                            scope: 'channel:manage:redemptions',
                            query: ***REMOVED***
                                broadcaster_id: twitch_common_1.extractUserId(broadcaster)
                        ***REMOVED***
                            jsonBody: HelixChannelPointsApi_1._transformRewardData(data)
                        ***REMOVED***)];
                    case 1:
                        result = _a.sent();
                        return [2 /*return*/, new HelixCustomReward_1.HelixCustomReward(result.data[0], this._client)];
                ***REMOVED***
            ***REMOVED***);
        ***REMOVED***);
    ***REMOVED***;
    /**
     * Updates a custom reward.
     *
     * @param broadcaster The broadcaster to update the reward for.
     * @param rewardId The ID of the reward.
     * @param data The reward data.
     */
    HelixChannelPointsApi.prototype.updateCustomReward = function (broadcaster, rewardId, data) ***REMOVED***
        return tslib_1.__awaiter(this, void 0, void 0, function () ***REMOVED***
            var result;
            return tslib_1.__generator(this, function (_a) ***REMOVED***
                switch (_a.label) ***REMOVED***
                    case 0: return [4 /*yield*/, this._client.callApi(***REMOVED***
                            type: twitch_api_call_1.TwitchApiCallType.Helix,
                            url: 'channel_points/custom_rewards',
                            method: 'PATCH',
                            scope: 'channel:manage:redemptions',
                            query: ***REMOVED***
                                broadcaster_id: twitch_common_1.extractUserId(broadcaster),
                                id: rewardId
                        ***REMOVED***
                            jsonBody: HelixChannelPointsApi_1._transformRewardData(data)
                        ***REMOVED***)];
                    case 1:
                        result = _a.sent();
                        return [2 /*return*/, new HelixCustomReward_1.HelixCustomReward(result.data[0], this._client)];
                ***REMOVED***
            ***REMOVED***);
        ***REMOVED***);
    ***REMOVED***;
    /**
     * Deletes a custom reward.
     *
     * @param broadcaster The broadcaster to delete the reward for.
     * @param rewardId The ID of the reward.
     */
    HelixChannelPointsApi.prototype.deleteCustomReward = function (broadcaster, rewardId) ***REMOVED***
        return tslib_1.__awaiter(this, void 0, void 0, function () ***REMOVED***
            return tslib_1.__generator(this, function (_a) ***REMOVED***
                switch (_a.label) ***REMOVED***
                    case 0: return [4 /*yield*/, this._client.callApi(***REMOVED***
                            type: twitch_api_call_1.TwitchApiCallType.Helix,
                            url: 'channel_points/custom_rewards',
                            method: 'DELETE',
                            scope: 'channel:manage:redemptions',
                            query: ***REMOVED***
                                broadcaster_id: twitch_common_1.extractUserId(broadcaster),
                                id: rewardId
                            ***REMOVED***
                        ***REMOVED***)];
                    case 1:
                        _a.sent();
                        return [2 /*return*/];
                ***REMOVED***
            ***REMOVED***);
        ***REMOVED***);
    ***REMOVED***;
    /**
     * Retrieves custom reward redemptions by IDs.
     *
     * @param broadcaster The broadcaster to retrieve the redemptions for.
     * @param rewardId The ID of the reward.
     * @param redemptionIds The IDs of the redemptions.
     */
    HelixChannelPointsApi.prototype.getRedemptionsByIds = function (broadcaster, rewardId, redemptionIds) ***REMOVED***
        return tslib_1.__awaiter(this, void 0, void 0, function () ***REMOVED***
            var result;
            var _this = this;
            return tslib_1.__generator(this, function (_a) ***REMOVED***
                switch (_a.label) ***REMOVED***
                    case 0:
                        if (!redemptionIds.length) ***REMOVED***
                            return [2 /*return*/, []];
                        ***REMOVED***
                        return [4 /*yield*/, this._client.callApi(***REMOVED***
                                type: twitch_api_call_1.TwitchApiCallType.Helix,
                                url: 'channel_points/custom_rewards/redemptions',
                                scope: 'channel:read:redemptions',
                                query: ***REMOVED***
                                    broadcaster_id: twitch_common_1.extractUserId(broadcaster),
                                    reward_id: rewardId,
                                    id: redemptionIds
                                ***REMOVED***
                            ***REMOVED***)];
                    case 1:
                        result = _a.sent();
                        return [2 /*return*/, result.data.map(function (data) ***REMOVED*** return new HelixCustomRewardRedemption_1.HelixCustomRewardRedemption(data, _this._client); ***REMOVED***)];
                ***REMOVED***
            ***REMOVED***);
        ***REMOVED***);
    ***REMOVED***;
    /**
     * Retrieves a custom reward redemption by ID.
     *
     * @param broadcaster The broadcaster to retrieve the redemption for.
     * @param rewardId The ID of the reward.
     * @param redemptionId The ID of the redemption.
     */
    HelixChannelPointsApi.prototype.getRedemptionById = function (broadcaster, rewardId, redemptionId) ***REMOVED***
        return tslib_1.__awaiter(this, void 0, void 0, function () ***REMOVED***
            var redemptions;
            return tslib_1.__generator(this, function (_a) ***REMOVED***
                switch (_a.label) ***REMOVED***
                    case 0: return [4 /*yield*/, this.getRedemptionsByIds(broadcaster, rewardId, [redemptionId])];
                    case 1:
                        redemptions = _a.sent();
                        return [2 /*return*/, redemptions.length ? redemptions[0] : null];
                ***REMOVED***
            ***REMOVED***);
        ***REMOVED***);
    ***REMOVED***;
    /**
     * Retrieves custom reward redemptions for the given broadcaster.
     *
     * @param broadcaster The broadcaster to retrieve the redemptions for.
     * @param rewardId The ID of the reward.
     * @param status The status of the redemptions to retrieve.
     * @param filter
     *
     * @expandParams
     */
    HelixChannelPointsApi.prototype.getRedemptionsForBroadcaster = function (broadcaster, rewardId, status, filter) ***REMOVED***
        return tslib_1.__awaiter(this, void 0, void 0, function () ***REMOVED***
            var result;
            return tslib_1.__generator(this, function (_a) ***REMOVED***
                switch (_a.label) ***REMOVED***
                    case 0: return [4 /*yield*/, this._client.callApi(***REMOVED***
                            type: twitch_api_call_1.TwitchApiCallType.Helix,
                            url: 'channel_points/custom_rewards/redemptions',
                            scope: 'channel:read:redemptions',
                            query: tslib_1.__assign(***REMOVED*** broadcaster_id: twitch_common_1.extractUserId(broadcaster), reward_id: rewardId, status: status, sort: filter.newestFirst ? 'NEWEST' : 'OLDEST' ***REMOVED***, HelixPagination_1.makePaginationQuery(filter))
                        ***REMOVED***)];
                    case 1:
                        result = _a.sent();
                        return [2 /*return*/, HelixPaginatedResult_1.createPaginatedResult(result, HelixCustomRewardRedemption_1.HelixCustomRewardRedemption, this._client)];
                ***REMOVED***
            ***REMOVED***);
        ***REMOVED***);
    ***REMOVED***;
    /**
     * Creates a paginator for custom reward redemptions for the given broadcaster.
     *
     * @param broadcaster The broadcaster to retrieve the redemptions for.
     * @param rewardId The ID of the reward.
     * @param status The status of the redemptions to retrieve.
     * @param filter
     *
     * @expandParams
     */
    HelixChannelPointsApi.prototype.getRedemptionsForBroadcasterPaginated = function (broadcaster, rewardId, status, filter) ***REMOVED***
        var _this = this;
        return new HelixPaginatedRequest_1.HelixPaginatedRequest(***REMOVED***
            url: 'channel_points/custom_rewards/redemptions',
            scope: 'channel:read:redemptions',
            query: ***REMOVED***
                broadcaster_id: twitch_common_1.extractUserId(broadcaster),
                reward_id: rewardId,
                status: status,
                sort: filter.newestFirst ? 'NEWEST' : 'OLDEST'
            ***REMOVED***
    ***REMOVED*** this._client, function (data) ***REMOVED*** return new HelixCustomRewardRedemption_1.HelixCustomRewardRedemption(data, _this._client); ***REMOVED***, 50);
    ***REMOVED***;
    /**
     * Updates the status of the given redemptions by IDs.
     *
     * @param broadcaster The broadcaster to retrieve the redemptions for.
     * @param rewardId The ID of the reward.
     * @param redemptionIds The IDs of the redemptions to update.
     * @param status The status to set for the redemptions.
     */
    HelixChannelPointsApi.prototype.updateRedemptionStatusByIds = function (broadcaster, rewardId, redemptionIds, status) ***REMOVED***
        return tslib_1.__awaiter(this, void 0, void 0, function () ***REMOVED***
            var result;
            var _this = this;
            return tslib_1.__generator(this, function (_a) ***REMOVED***
                switch (_a.label) ***REMOVED***
                    case 0:
                        if (!redemptionIds.length) ***REMOVED***
                            return [2 /*return*/, []];
                        ***REMOVED***
                        return [4 /*yield*/, this._client.callApi(***REMOVED***
                                type: twitch_api_call_1.TwitchApiCallType.Helix,
                                url: 'channel_points/custom_rewards/redemptions',
                                method: 'PATCH',
                                scope: 'channel:manage:redemptions',
                                query: ***REMOVED***
                                    broadcaster_id: twitch_common_1.extractUserId(broadcaster),
                                    reward_id: rewardId,
                                    id: redemptionIds
                            ***REMOVED***
                                jsonBody: ***REMOVED***
                                    status: status
                                ***REMOVED***
                            ***REMOVED***)];
                    case 1:
                        result = _a.sent();
                        return [2 /*return*/, result.data.map(function (data) ***REMOVED*** return new HelixCustomRewardRedemption_1.HelixCustomRewardRedemption(data, _this._client); ***REMOVED***)];
                ***REMOVED***
            ***REMOVED***);
        ***REMOVED***);
    ***REMOVED***;
    HelixChannelPointsApi._transformRewardData = function (data) ***REMOVED***
        var _a, _b, _c;
        var result = ***REMOVED***
            title: data.title,
            cost: data.cost,
            prompt: data.prompt,
            background_color: data.backgroundColor,
            is_enabled: data.isEnabled,
            is_user_input_required: data.userInputRequired,
            should_redemptions_skip_request_queue: data.autoFulfill
        ***REMOVED***;
        if (data.maxRedemptionsPerStream !== undefined) ***REMOVED***
            result.is_max_per_stream_enabled = !!data.maxRedemptionsPerStream;
            result.max_per_stream = (_a = data.maxRedemptionsPerStream) !== null && _a !== void 0 ? _a : 0;
        ***REMOVED***
        if (data.maxRedemptionsPerUserPerStream !== undefined) ***REMOVED***
            result.is_max_per_user_per_stream_enabled = !!data.maxRedemptionsPerUserPerStream;
            result.max_per_user_per_stream = (_b = data.maxRedemptionsPerUserPerStream) !== null && _b !== void 0 ? _b : 0;
        ***REMOVED***
        if (data.globalCooldown !== undefined) ***REMOVED***
            result.is_global_cooldown_enabled = !!data.globalCooldown;
            result.global_cooldown_seconds = (_c = data.globalCooldown) !== null && _c !== void 0 ? _c : 0;
        ***REMOVED***
        if ('isPaused' in data) ***REMOVED***
            result.is_paused = data.isPaused;
        ***REMOVED***
        return result;
    ***REMOVED***;
    var HelixChannelPointsApi_1;
    HelixChannelPointsApi = HelixChannelPointsApi_1 = tslib_1.__decorate([
        twitch_common_1.rtfm('twitch', 'HelixChannelPointsApi')
    ], HelixChannelPointsApi);
    return HelixChannelPointsApi;
***REMOVED***(BaseApi_1.BaseApi));
exports.HelixChannelPointsApi = HelixChannelPointsApi;
