import type ***REMOVED*** UserIdResolvable ***REMOVED*** from 'twitch-common';
import ***REMOVED*** BaseApi ***REMOVED*** from '../../BaseApi';
import type ***REMOVED*** HelixEventData ***REMOVED*** from '../HelixEvent';
import ***REMOVED*** HelixPaginatedRequest ***REMOVED*** from '../HelixPaginatedRequest';
import type ***REMOVED*** HelixPaginatedResult ***REMOVED*** from '../HelixPaginatedResult';
import type ***REMOVED*** HelixForwardPagination ***REMOVED*** from '../HelixPagination';
import type ***REMOVED*** HelixHypeTrainEventData, HelixHypeTrainEventType ***REMOVED*** from './HelixHypeTrainEvent';
import ***REMOVED*** HelixHypeTrainEvent ***REMOVED*** from './HelixHypeTrainEvent';
/**
 * The Helix API methods that deal with Hype Trains.
 *
 * Can be accessed using `client.helix.hypeTrain` on an ***REMOVED***@ApiClient***REMOVED*** instance.
 *
 * ## Example
 * ```ts
 * const api = new ApiClient(new StaticAuthProvider(clientId, accessToken));
 * const ***REMOVED*** data: events ***REMOVED*** = await api.helix.hypeTrain.getHypeTrainEventsForBroadcaster('125328655');
 * ```
 */
export default class HelixHypeTrainApi extends BaseApi ***REMOVED***
    /**
     * Retrieves the events of the current or latest Hype Train for the specified broadcaster.
     *
     * @param broadcaster The broadcaster to fetch Hype Train events for.
     * @param pagination
     *
     * @expandParams
     */
    getHypeTrainEventsForBroadcaster(broadcaster: UserIdResolvable, pagination?: HelixForwardPagination): Promise<HelixPaginatedResult<HelixHypeTrainEvent>>;
    /**
     * Creates a paginator for the events of the current or latest Hype Train for the specified broadcaster.
     *
     * @param broadcaster The broadcaster to fetch Hype Train events for.
     */
    getHypeTrainEventsForBroadcasterPaginated(broadcaster: UserIdResolvable): HelixPaginatedRequest<HelixEventData<HelixHypeTrainEventData, HelixHypeTrainEventType>, HelixHypeTrainEvent>;
    /**
     * Retrieves a single Hype Train event by ID.
     *
     * @param id The ID of the Hype Train event.
     */
    getHypeTrainEventById(id: string): Promise<HelixHypeTrainEvent | null>;
***REMOVED***
