"use strict";
Object.defineProperty(exports, "__esModule", ***REMOVED*** value: true ***REMOVED***);
exports.HelixUser = exports.HelixUserType = exports.HelixBroadcasterType = void 0;
var tslib_1 = require("tslib");
var shared_utils_1 = require("@d-fischer/shared-utils");
var twitch_common_1 = require("twitch-common");
var NoSubscriptionProgramError_1 = require("../../../Errors/NoSubscriptionProgramError");
var HelixBroadcasterType;
(function (HelixBroadcasterType) ***REMOVED***
    /**
     * A Twitch Partner.
     */
    HelixBroadcasterType["Partner"] = "partner";
    /**
     * A Twitch Affiliate.
     */
    HelixBroadcasterType["Affiliate"] = "affiliate";
    /**
     * A user that's neither a partner nor an affiliate.
     */
    HelixBroadcasterType["None"] = "";
***REMOVED***)(HelixBroadcasterType || (HelixBroadcasterType = ***REMOVED******REMOVED***));
exports.HelixBroadcasterType = HelixBroadcasterType;
var HelixUserType;
(function (HelixUserType) ***REMOVED***
    /**
     * A Twitch staff member.
     */
    HelixUserType["Staff"] = "staff";
    /**
     * A Twitch administrator.
     */
    HelixUserType["Admin"] = "admin";
    /**
     * A global moderator.
     */
    HelixUserType["GlobalMod"] = "global_mod";
    /**
     * A user with no special permissions across Twitch.
     */
    HelixUserType["None"] = "";
***REMOVED***)(HelixUserType || (HelixUserType = ***REMOVED******REMOVED***));
exports.HelixUserType = HelixUserType;
/**
 * A Twitch user.
 */
var HelixUser = /** @class */ (function () ***REMOVED***
    /** @private */
    function HelixUser(data, client) ***REMOVED***
        this._data = data;
        this._client = client;
    ***REMOVED***
    Object.defineProperty(HelixUser.prototype, "cacheKey", ***REMOVED***
        /** @private */
        get: function () ***REMOVED***
            return this._data.id;
    ***REMOVED***
        enumerable: false,
        configurable: true
    ***REMOVED***);
    Object.defineProperty(HelixUser.prototype, "id", ***REMOVED***
        /**
         * The ID of the user.
         */
        get: function () ***REMOVED***
            return this._data.id;
    ***REMOVED***
        enumerable: false,
        configurable: true
    ***REMOVED***);
    Object.defineProperty(HelixUser.prototype, "name", ***REMOVED***
        /**
         * The name of the user.
         */
        get: function () ***REMOVED***
            return this._data.login;
    ***REMOVED***
        enumerable: false,
        configurable: true
    ***REMOVED***);
    Object.defineProperty(HelixUser.prototype, "displayName", ***REMOVED***
        /**
         * The display name of the user.
         */
        get: function () ***REMOVED***
            return this._data.display_name;
    ***REMOVED***
        enumerable: false,
        configurable: true
    ***REMOVED***);
    Object.defineProperty(HelixUser.prototype, "description", ***REMOVED***
        /**
         * The description of the user.
         */
        get: function () ***REMOVED***
            return this._data.description;
    ***REMOVED***
        enumerable: false,
        configurable: true
    ***REMOVED***);
    Object.defineProperty(HelixUser.prototype, "type", ***REMOVED***
        /**
         * The type of the user.
         */
        get: function () ***REMOVED***
            return this._data.type;
    ***REMOVED***
        enumerable: false,
        configurable: true
    ***REMOVED***);
    Object.defineProperty(HelixUser.prototype, "broadcasterType", ***REMOVED***
        /**
         * The type of the user.
         */
        get: function () ***REMOVED***
            return this._data.broadcaster_type;
    ***REMOVED***
        enumerable: false,
        configurable: true
    ***REMOVED***);
    Object.defineProperty(HelixUser.prototype, "profilePictureUrl", ***REMOVED***
        /**
         * The URL to the profile picture of the user.
         */
        get: function () ***REMOVED***
            return this._data.profile_image_url;
    ***REMOVED***
        enumerable: false,
        configurable: true
    ***REMOVED***);
    Object.defineProperty(HelixUser.prototype, "offlinePlaceholderUrl", ***REMOVED***
        /**
         * The URL to the offline video placeholder of the user.
         */
        get: function () ***REMOVED***
            return this._data.offline_image_url;
    ***REMOVED***
        enumerable: false,
        configurable: true
    ***REMOVED***);
    Object.defineProperty(HelixUser.prototype, "views", ***REMOVED***
        /**
         * The total number of views of the user's channel.
         */
        get: function () ***REMOVED***
            return this._data.view_count;
    ***REMOVED***
        enumerable: false,
        configurable: true
    ***REMOVED***);
    Object.defineProperty(HelixUser.prototype, "creationDate", ***REMOVED***
        /**
         * The date when the user was created, i.e. when they registered on Twitch.
         */
        get: function () ***REMOVED***
            return new Date(this._data.created_at);
    ***REMOVED***
        enumerable: false,
        configurable: true
    ***REMOVED***);
    /**
     * Retrieves the channel's stream data.
     */
    HelixUser.prototype.getStream = function () ***REMOVED***
        return tslib_1.__awaiter(this, void 0, void 0, function () ***REMOVED***
            return tslib_1.__generator(this, function (_a) ***REMOVED***
                return [2 /*return*/, this._client.helix.streams.getStreamByUserId(this)];
            ***REMOVED***);
        ***REMOVED***);
    ***REMOVED***;
    /**
     * Retrieves a list of broadcasters the user follows.
     */
    HelixUser.prototype.getFollows = function () ***REMOVED***
        return tslib_1.__awaiter(this, void 0, void 0, function () ***REMOVED***
            return tslib_1.__generator(this, function (_a) ***REMOVED***
                return [2 /*return*/, this._client.helix.users.getFollows(***REMOVED*** user: this ***REMOVED***)];
            ***REMOVED***);
        ***REMOVED***);
    ***REMOVED***;
    /**
     * Retrieves the follow data of the given user to the broadcaster.
     *
     * @param user The user to check the follow from.
     */
    HelixUser.prototype.getFollowFrom = function (user) ***REMOVED***
        return tslib_1.__awaiter(this, void 0, void 0, function () ***REMOVED***
            return tslib_1.__generator(this, function (_a) ***REMOVED***
                return [2 /*return*/, this._client.helix.users.getFollowFromUserToBroadcaster(user, this)];
            ***REMOVED***);
        ***REMOVED***);
    ***REMOVED***;
    /**
     * Retrieves the follow data of the user to the given broadcaster.
     *
     * @param broadcaster The broadcaster to check the follow to.
     */
    HelixUser.prototype.getFollowTo = function (broadcaster) ***REMOVED***
        return tslib_1.__awaiter(this, void 0, void 0, function () ***REMOVED***
            return tslib_1.__generator(this, function (_a) ***REMOVED***
                return [2 /*return*/, this._client.helix.users.getFollowFromUserToBroadcaster(this, broadcaster)];
            ***REMOVED***);
        ***REMOVED***);
    ***REMOVED***;
    /**
     * Checks whether the user is following the given broadcaster.
     *
     * @param broadcaster The broadcaster to check the user's follow to.
     */
    HelixUser.prototype.follows = function (broadcaster) ***REMOVED***
        return tslib_1.__awaiter(this, void 0, void 0, function () ***REMOVED***
            return tslib_1.__generator(this, function (_a) ***REMOVED***
                return [2 /*return*/, this._client.helix.users.userFollowsBroadcaster(this, broadcaster)];
            ***REMOVED***);
        ***REMOVED***);
    ***REMOVED***;
    /**
     * Checks whether the given user is following the broadcaster.
     *
     * @param user The user to check the broadcaster's follow from.
     */
    HelixUser.prototype.isFollowedBy = function (user) ***REMOVED***
        return tslib_1.__awaiter(this, void 0, void 0, function () ***REMOVED***
            return tslib_1.__generator(this, function (_a) ***REMOVED***
                return [2 /*return*/, this._client.helix.users.userFollowsBroadcaster(user, this)];
            ***REMOVED***);
        ***REMOVED***);
    ***REMOVED***;
    /**
     * Follows the broadcaster.
     */
    HelixUser.prototype.follow = function () ***REMOVED***
        return tslib_1.__awaiter(this, void 0, void 0, function () ***REMOVED***
            var currentUser;
            return tslib_1.__generator(this, function (_a) ***REMOVED***
                switch (_a.label) ***REMOVED***
                    case 0: return [4 /*yield*/, this._client.kraken.users.getMe()];
                    case 1:
                        currentUser = _a.sent();
                        return [2 /*return*/, currentUser.followChannel(this)];
                ***REMOVED***
            ***REMOVED***);
        ***REMOVED***);
    ***REMOVED***;
    /**
     * Unfollows the broadcaster.
     */
    HelixUser.prototype.unfollow = function () ***REMOVED***
        return tslib_1.__awaiter(this, void 0, void 0, function () ***REMOVED***
            var currentUser;
            return tslib_1.__generator(this, function (_a) ***REMOVED***
                switch (_a.label) ***REMOVED***
                    case 0: return [4 /*yield*/, this._client.kraken.users.getMe()];
                    case 1:
                        currentUser = _a.sent();
                        return [2 /*return*/, currentUser.unfollowChannel(this)];
                ***REMOVED***
            ***REMOVED***);
        ***REMOVED***);
    ***REMOVED***;
    /**
     * Retrieves the subscription data for the user to the given broadcaster, or `null` if the user is not subscribed.
     *
     * @param broadcaster The broadcaster you want to get the subscription data for.
     */
    HelixUser.prototype.getSubscriptionTo = function (broadcaster) ***REMOVED***
        return tslib_1.__awaiter(this, void 0, void 0, function () ***REMOVED***
            return tslib_1.__generator(this, function (_a) ***REMOVED***
                return [2 /*return*/, this._client.helix.subscriptions.getSubscriptionForUser(broadcaster, this)];
            ***REMOVED***);
        ***REMOVED***);
    ***REMOVED***;
    /**
     * Checks whether the user is subscribed to the given broadcaster.
     *
     * @param broadcaster The broadcaster you want to check the subscription for.
     */
    HelixUser.prototype.isSubscribedTo = function (broadcaster) ***REMOVED***
        return tslib_1.__awaiter(this, void 0, void 0, function () ***REMOVED***
            var e_1;
            return tslib_1.__generator(this, function (_a) ***REMOVED***
                switch (_a.label) ***REMOVED***
                    case 0:
                        _a.trys.push([0, 2, , 3]);
                        return [4 /*yield*/, this.getSubscriptionTo(broadcaster)];
                    case 1: return [2 /*return*/, (_a.sent()) !== null];
                    case 2:
                        e_1 = _a.sent();
                        if (e_1 instanceof NoSubscriptionProgramError_1.NoSubscriptionProgramError) ***REMOVED***
                            return [2 /*return*/, false];
                        ***REMOVED***
                        throw e_1;
                    case 3: return [2 /*return*/];
                ***REMOVED***
            ***REMOVED***);
        ***REMOVED***);
    ***REMOVED***;
    tslib_1.__decorate([
        shared_utils_1.Enumerable(false)
    ], HelixUser.prototype, "_data", void 0);
    tslib_1.__decorate([
        shared_utils_1.Enumerable(false)
    ], HelixUser.prototype, "_client", void 0);
    HelixUser = tslib_1.__decorate([
        twitch_common_1.rtfm('twitch', 'HelixUser', 'id')
    ], HelixUser);
    return HelixUser;
***REMOVED***());
exports.HelixUser = HelixUser;
