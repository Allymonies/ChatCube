import type ***REMOVED*** UserIdResolvable ***REMOVED*** from 'twitch-common';
import ***REMOVED*** BaseApi ***REMOVED*** from '../../BaseApi';
import type ***REMOVED*** CommercialLength ***REMOVED*** from '../../Shared/CommercialLength';
import ***REMOVED*** HelixChannel ***REMOVED*** from './HelixChannel';
import ***REMOVED*** HelixChannelEditor ***REMOVED*** from './HelixChannelEditor';
/**
 * Channel data to update using ***REMOVED***@HelixChannelApi#updateChannel***REMOVED***.
 */
export interface HelixChannelUpdate ***REMOVED***
    /**
     * The language of the stream.
     */
    language?: string;
    /**
     * The ID of the game you're playing.
     */
    gameId?: string;
    /**
     * The title of the stream.
     */
    title?: string;
    /**
     * The delay of the stream, in seconds.
     *
     * Only works if you're a Twitch partner.
     */
    delay?: number;
***REMOVED***
/**
 * The Helix API methods that deal with channels.
 *
 * Can be accessed using `client.helix.channels` on an ***REMOVED***@ApiClient***REMOVED*** instance.
 *
 * ## Example
 * ```ts
 * const api = new ApiClient(new StaticAuthProvider(clientId, accessToken));
 * const channel = await api.helix.channels.getChannelInfo('125328655');
 * ```
 */
export declare class HelixChannelApi extends BaseApi ***REMOVED***
    /**
     * Retrieves the channel data for the given user.
     *
     * @param user The user you want to get channel info for.
     */
    getChannelInfo(user: UserIdResolvable): Promise<HelixChannel | null>;
    /**
     * Updates the given user's channel data.
     *
     * @param user The user you want to update channel info for.
     * @param data The channel info to set.
     */
    updateChannelInfo(user: UserIdResolvable, data: HelixChannelUpdate): Promise<void>;
    /**
     * Starts a commercial on a channel.
     *
     * @param broadcaster The broadcaster on whose channel the commercial is started.
     * @param length The length of the commercial, in seconds.
     */
    startChannelCommercial(broadcaster: UserIdResolvable, length: CommercialLength): Promise<void>;
    /**
     * Retrieves a list of users who have editor permissions on your channel.
     */
    getChannelEditors(broadcaster: UserIdResolvable): Promise<HelixChannelEditor[]>;
***REMOVED***
