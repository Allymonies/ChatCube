"use strict";
Object.defineProperty(exports, "__esModule", ***REMOVED*** value: true ***REMOVED***);
exports.HelixVideoApi = void 0;
var tslib_1 = require("tslib");
var twitch_api_call_1 = require("twitch-api-call");
var twitch_common_1 = require("twitch-common");
var BaseApi_1 = require("../../BaseApi");
var HelixPaginatedRequest_1 = require("../HelixPaginatedRequest");
var HelixPaginatedResult_1 = require("../HelixPaginatedResult");
var HelixPagination_1 = require("../HelixPagination");
var HelixVideo_1 = require("./HelixVideo");
/**
 * The Helix API methods that deal with videos.
 *
 * Can be accessed using `client.helix.videos` on an ***REMOVED***@ApiClient***REMOVED*** instance.
 *
 * ## Example
 * ```ts
 * const api = new ApiClient(new StaticAuthProvider(clientId, accessToken));
 * const ***REMOVED*** data: videos ***REMOVED*** = await api.helix.videos.getVideosByUser('125328655');
 * ```
 */
var HelixVideoApi = /** @class */ (function (_super) ***REMOVED***
    tslib_1.__extends(HelixVideoApi, _super);
    function HelixVideoApi() ***REMOVED***
        return _super !== null && _super.apply(this, arguments) || this;
    ***REMOVED***
    HelixVideoApi_1 = HelixVideoApi;
    /**
     * Retrieves the video data for the given list of video IDs.
     *
     * @param ids The video IDs you want to look up.
     */
    HelixVideoApi.prototype.getVideosByIds = function (ids) ***REMOVED***
        return tslib_1.__awaiter(this, void 0, void 0, function () ***REMOVED***
            var result;
            return tslib_1.__generator(this, function (_a) ***REMOVED***
                switch (_a.label) ***REMOVED***
                    case 0: return [4 /*yield*/, this._getVideos('id', ids)];
                    case 1:
                        result = _a.sent();
                        return [2 /*return*/, result.data];
                ***REMOVED***
            ***REMOVED***);
        ***REMOVED***);
    ***REMOVED***;
    /**
     * Retrieves the video data for the given video ID.
     *
     * @param id The video ID you want to look up.
     */
    HelixVideoApi.prototype.getVideoById = function (id) ***REMOVED***
        return tslib_1.__awaiter(this, void 0, void 0, function () ***REMOVED***
            var videos;
            return tslib_1.__generator(this, function (_a) ***REMOVED***
                switch (_a.label) ***REMOVED***
                    case 0: return [4 /*yield*/, this.getVideosByIds(id)];
                    case 1:
                        videos = _a.sent();
                        return [2 /*return*/, videos.length ? videos[0] : null];
                ***REMOVED***
            ***REMOVED***);
        ***REMOVED***);
    ***REMOVED***;
    /**
     * Retrieves the videos of the given user.
     *
     * @param user The user you want to retrieve videos from.
     * @param filter Additional filters for the result set.
     */
    HelixVideoApi.prototype.getVideosByUser = function (user, filter) ***REMOVED***
        if (filter === void 0) ***REMOVED*** filter = ***REMOVED******REMOVED***; ***REMOVED***
        return tslib_1.__awaiter(this, void 0, void 0, function () ***REMOVED***
            var userId;
            return tslib_1.__generator(this, function (_a) ***REMOVED***
                userId = twitch_common_1.extractUserId(user);
                return [2 /*return*/, this._getVideos('user_id', userId, filter)];
            ***REMOVED***);
        ***REMOVED***);
    ***REMOVED***;
    /**
     * Creates a paginator for videos of the given user.
     *
     * @param user The user you want to retrieve videos from.
     * @param filter Additional filters for the result set.
     */
    HelixVideoApi.prototype.getVideosByUserPaginated = function (user, filter) ***REMOVED***
        if (filter === void 0) ***REMOVED*** filter = ***REMOVED******REMOVED***; ***REMOVED***
        var userId = twitch_common_1.extractUserId(user);
        return this._getVideosPaginated('user_id', userId, filter);
    ***REMOVED***;
    /**
     * Retrieves the videos of the given game.
     *
     * @param gameId The game you want to retrieve videos from.
     * @param filter Additional filters for the result set.
     */
    HelixVideoApi.prototype.getVideosByGame = function (gameId, filter) ***REMOVED***
        if (filter === void 0) ***REMOVED*** filter = ***REMOVED******REMOVED***; ***REMOVED***
        return tslib_1.__awaiter(this, void 0, void 0, function () ***REMOVED***
            return tslib_1.__generator(this, function (_a) ***REMOVED***
                return [2 /*return*/, this._getVideos('game_id', gameId, filter)];
            ***REMOVED***);
        ***REMOVED***);
    ***REMOVED***;
    /**
     * Creates a paginator for videos of the given game.
     *
     * @param gameId The game you want to retrieve videos from.
     * @param filter Additional filters for the result set.
     */
    HelixVideoApi.prototype.getVideosByGamePaginated = function (gameId, filter) ***REMOVED***
        if (filter === void 0) ***REMOVED*** filter = ***REMOVED******REMOVED***; ***REMOVED***
        return this._getVideosPaginated('game_id', gameId, filter);
    ***REMOVED***;
    /**
     * Deletes videos by its IDs.
     *
     * @param ids The IDs of the videos to delete.
     */
    HelixVideoApi.prototype.deleteVideosByIds = function (ids) ***REMOVED***
        return tslib_1.__awaiter(this, void 0, void 0, function () ***REMOVED***
            return tslib_1.__generator(this, function (_a) ***REMOVED***
                switch (_a.label) ***REMOVED***
                    case 0: return [4 /*yield*/, this._client.callApi(***REMOVED***
                            type: twitch_api_call_1.TwitchApiCallType.Helix,
                            url: 'videos',
                            method: 'DELETE',
                            scope: 'channel:manage:videos',
                            query: ***REMOVED***
                                id: ids
                            ***REMOVED***
                        ***REMOVED***)];
                    case 1:
                        _a.sent();
                        return [2 /*return*/];
                ***REMOVED***
            ***REMOVED***);
        ***REMOVED***);
    ***REMOVED***;
    HelixVideoApi.prototype._getVideos = function (filterType, filterValues, filter) ***REMOVED***
        if (filter === void 0) ***REMOVED*** filter = ***REMOVED******REMOVED***; ***REMOVED***
        return tslib_1.__awaiter(this, void 0, void 0, function () ***REMOVED***
            var result;
            return tslib_1.__generator(this, function (_a) ***REMOVED***
                switch (_a.label) ***REMOVED***
                    case 0:
                        if (Array.isArray(filterValues) && !filterValues.length) ***REMOVED***
                            return [2 /*return*/, ***REMOVED*** data: [] ***REMOVED***];
                        ***REMOVED***
                        return [4 /*yield*/, this._client.callApi(***REMOVED***
                                url: 'videos',
                                type: twitch_api_call_1.TwitchApiCallType.Helix,
                                query: tslib_1.__assign(tslib_1.__assign(***REMOVED******REMOVED***, HelixVideoApi_1._makeVideosQuery(filterType, filterValues, filter)), HelixPagination_1.makePaginationQuery(filter))
                            ***REMOVED***)];
                    case 1:
                        result = _a.sent();
                        return [2 /*return*/, HelixPaginatedResult_1.createPaginatedResult(result, HelixVideo_1.HelixVideo, this._client)];
                ***REMOVED***
            ***REMOVED***);
        ***REMOVED***);
    ***REMOVED***;
    HelixVideoApi.prototype._getVideosPaginated = function (filterType, filterValues, filter) ***REMOVED***
        var _this = this;
        if (filter === void 0) ***REMOVED*** filter = ***REMOVED******REMOVED***; ***REMOVED***
        return new HelixPaginatedRequest_1.HelixPaginatedRequest(***REMOVED***
            url: 'videos',
            query: HelixVideoApi_1._makeVideosQuery(filterType, filterValues, filter)
    ***REMOVED*** this._client, function (data) ***REMOVED*** return new HelixVideo_1.HelixVideo(data, _this._client); ***REMOVED***);
    ***REMOVED***;
    HelixVideoApi._makeVideosQuery = function (filterType, filterValues, filter) ***REMOVED***
        var _a;
        if (filter === void 0) ***REMOVED*** filter = ***REMOVED******REMOVED***; ***REMOVED***
        var language = filter.language, period = filter.period, orderBy = filter.orderBy, type = filter.type;
        return _a = ***REMOVED******REMOVED***,
            _a[filterType] = filterValues,
            _a.language = language,
            _a.period = period,
            _a.sort = orderBy,
            _a.type = type,
            _a;
    ***REMOVED***;
    var HelixVideoApi_1;
    HelixVideoApi = HelixVideoApi_1 = tslib_1.__decorate([
        twitch_common_1.rtfm('twitch', 'HelixVideoApi')
    ], HelixVideoApi);
    return HelixVideoApi;
***REMOVED***(BaseApi_1.BaseApi));
exports.HelixVideoApi = HelixVideoApi;
