"use strict";
Object.defineProperty(exports, "__esModule", ***REMOVED*** value: true ***REMOVED***);
exports.HelixVideo = void 0;
var tslib_1 = require("tslib");
var cache_decorators_1 = require("@d-fischer/cache-decorators");
var shared_utils_1 = require("@d-fischer/shared-utils");
var twitch_common_1 = require("twitch-common");
/**
 * A video on Twitch.
 */
var HelixVideo = /** @class */ (function () ***REMOVED***
    /** @private */
    function HelixVideo(data, client) ***REMOVED***
        this._data = data;
        this._client = client;
    ***REMOVED***
    Object.defineProperty(HelixVideo.prototype, "id", ***REMOVED***
        /**
         * The ID of the video.
         */
        get: function () ***REMOVED***
            return this._data.id;
    ***REMOVED***
        enumerable: false,
        configurable: true
    ***REMOVED***);
    Object.defineProperty(HelixVideo.prototype, "userId", ***REMOVED***
        /**
         * The ID of the user who created the video.
         */
        get: function () ***REMOVED***
            return this._data.user_id;
    ***REMOVED***
        enumerable: false,
        configurable: true
    ***REMOVED***);
    Object.defineProperty(HelixVideo.prototype, "userName", ***REMOVED***
        /**
         * The name of the user who created the video.
         */
        get: function () ***REMOVED***
            return this._data.user_login;
    ***REMOVED***
        enumerable: false,
        configurable: true
    ***REMOVED***);
    Object.defineProperty(HelixVideo.prototype, "userDisplayName", ***REMOVED***
        /**
         * The display name of the user who created the video.
         */
        get: function () ***REMOVED***
            return this._data.user_name;
    ***REMOVED***
        enumerable: false,
        configurable: true
    ***REMOVED***);
    /**
     * Retrieves information about the user who created the video.
     */
    HelixVideo.prototype.getUser = function () ***REMOVED***
        return tslib_1.__awaiter(this, void 0, void 0, function () ***REMOVED***
            return tslib_1.__generator(this, function (_a) ***REMOVED***
                return [2 /*return*/, this._client.helix.users.getUserById(this._data.user_id)];
            ***REMOVED***);
        ***REMOVED***);
    ***REMOVED***;
    Object.defineProperty(HelixVideo.prototype, "title", ***REMOVED***
        /**
         * The title of the video.
         */
        get: function () ***REMOVED***
            return this._data.title;
    ***REMOVED***
        enumerable: false,
        configurable: true
    ***REMOVED***);
    Object.defineProperty(HelixVideo.prototype, "description", ***REMOVED***
        /**
         * The description of the video.
         */
        get: function () ***REMOVED***
            return this._data.description;
    ***REMOVED***
        enumerable: false,
        configurable: true
    ***REMOVED***);
    Object.defineProperty(HelixVideo.prototype, "creationDate", ***REMOVED***
        /**
         * The date when the video was created.
         */
        get: function () ***REMOVED***
            return new Date(this._data.created_at);
    ***REMOVED***
        enumerable: false,
        configurable: true
    ***REMOVED***);
    Object.defineProperty(HelixVideo.prototype, "publishDate", ***REMOVED***
        /**
         * The date when the video was published.
         */
        get: function () ***REMOVED***
            return new Date(this._data.published_at);
    ***REMOVED***
        enumerable: false,
        configurable: true
    ***REMOVED***);
    Object.defineProperty(HelixVideo.prototype, "url", ***REMOVED***
        /**
         * The URL of the video.
         */
        get: function () ***REMOVED***
            return this._data.url;
    ***REMOVED***
        enumerable: false,
        configurable: true
    ***REMOVED***);
    Object.defineProperty(HelixVideo.prototype, "thumbnailUrl", ***REMOVED***
        /**
         * The URL of the thumbnail of the video.
         */
        get: function () ***REMOVED***
            return this._data.thumbnail_url;
    ***REMOVED***
        enumerable: false,
        configurable: true
    ***REMOVED***);
    Object.defineProperty(HelixVideo.prototype, "isPublic", ***REMOVED***
        /**
         * Whether the video is public or not.
         */
        get: function () ***REMOVED***
            return this._data.viewable === 'public';
    ***REMOVED***
        enumerable: false,
        configurable: true
    ***REMOVED***);
    Object.defineProperty(HelixVideo.prototype, "views", ***REMOVED***
        /**
         * The number of views of the video.
         */
        get: function () ***REMOVED***
            return this._data.view_count;
    ***REMOVED***
        enumerable: false,
        configurable: true
    ***REMOVED***);
    Object.defineProperty(HelixVideo.prototype, "language", ***REMOVED***
        /**
         * The language of the video.
         */
        get: function () ***REMOVED***
            return this._data.language;
    ***REMOVED***
        enumerable: false,
        configurable: true
    ***REMOVED***);
    Object.defineProperty(HelixVideo.prototype, "type", ***REMOVED***
        /**
         * The type of the video.
         */
        get: function () ***REMOVED***
            return this._data.type;
    ***REMOVED***
        enumerable: false,
        configurable: true
    ***REMOVED***);
    Object.defineProperty(HelixVideo.prototype, "duration", ***REMOVED***
        /**
         * The duration of the video, as formatted by Twitch.
         */
        get: function () ***REMOVED***
            return this._data.duration;
    ***REMOVED***
        enumerable: false,
        configurable: true
    ***REMOVED***);
    Object.defineProperty(HelixVideo.prototype, "durationInSeconds", ***REMOVED***
        /**
         * The duration of the video, in seconds.
         */
        get: function () ***REMOVED***
            var parts = this._data.duration.match(/\d+[hms]/g);
            if (!parts) ***REMOVED***
                throw new twitch_common_1.HellFreezesOverError("Could not parse duration string: " + this._data.duration);
            ***REMOVED***
            return parts
                .map(function (part) ***REMOVED***
                var partialMatch = /(\d+)([hms])/.exec(part);
                if (!partialMatch) ***REMOVED***
                    throw new twitch_common_1.HellFreezesOverError("Could not parse partial duration string: " + part);
                ***REMOVED***
                var _a = tslib_1.__read(partialMatch, 3), num = _a[1], unit = _a[2];
                return parseInt(num, 10) * ***REMOVED*** h: 3600, m: 60, s: 1 ***REMOVED***[unit];
            ***REMOVED***)
                .reduce(function (a, b) ***REMOVED*** return a + b; ***REMOVED***);
    ***REMOVED***
        enumerable: false,
        configurable: true
    ***REMOVED***);
    Object.defineProperty(HelixVideo.prototype, "streamId", ***REMOVED***
        /**
         * The ID of the stream this video belongs to.
         *
         * Returns null if the video is not an archived stream.
         */
        get: function () ***REMOVED***
            return this._data.stream_id;
    ***REMOVED***
        enumerable: false,
        configurable: true
    ***REMOVED***);
    Object.defineProperty(HelixVideo.prototype, "mutedSegmentData", ***REMOVED***
        /**
         * The raw data of muted segments of the video.
         */
        get: function () ***REMOVED***
            return this._data.muted_segments.slice();
    ***REMOVED***
        enumerable: false,
        configurable: true
    ***REMOVED***);
    /**
     * Checks whether the video is muted at a given offset or range.
     *
     * @param offset The start of your range, in seconds from the start of the video,
     * or if no duration is given, the exact offset that is checked.
     * @param duration The duration of your range, in seconds.
     * @param partial Whether the range check is only partial.
     *
     * By default, this function returns true only if the passed range is entirely contained in a muted segment.
     */
    HelixVideo.prototype.isMutedAt = function (offset, duration, partial) ***REMOVED***
        if (partial === void 0) ***REMOVED*** partial = false; ***REMOVED***
        if (duration == null) ***REMOVED***
            return this._data.muted_segments.some(function (seg) ***REMOVED*** return seg.offset <= offset && offset <= seg.offset + seg.duration; ***REMOVED***);
        ***REMOVED***
        var end = offset + duration;
        if (partial) ***REMOVED***
            return this._data.muted_segments.some(function (seg) ***REMOVED***
                var segEnd = seg.offset + seg.duration;
                return offset < segEnd && seg.offset < end;
            ***REMOVED***);
        ***REMOVED***
        return this._data.muted_segments.some(function (seg) ***REMOVED***
            var segEnd = seg.offset + seg.duration;
            return seg.offset <= offset && end <= segEnd;
        ***REMOVED***);
    ***REMOVED***;
    tslib_1.__decorate([
        shared_utils_1.Enumerable(false)
    ], HelixVideo.prototype, "_data", void 0);
    tslib_1.__decorate([
        shared_utils_1.Enumerable(false)
    ], HelixVideo.prototype, "_client", void 0);
    tslib_1.__decorate([
        cache_decorators_1.CachedGetter()
    ], HelixVideo.prototype, "durationInSeconds", null);
    HelixVideo = tslib_1.__decorate([
        cache_decorators_1.Cacheable,
        twitch_common_1.rtfm('twitch', 'HelixVideo', 'id')
    ], HelixVideo);
    return HelixVideo;
***REMOVED***());
exports.HelixVideo = HelixVideo;
