import ***REMOVED*** BaseApi ***REMOVED*** from '../../BaseApi';
import type ***REMOVED*** HelixGameData ***REMOVED*** from '../Game/HelixGame';
import ***REMOVED*** HelixGame ***REMOVED*** from '../Game/HelixGame';
import ***REMOVED*** HelixPaginatedRequest ***REMOVED*** from '../HelixPaginatedRequest';
import type ***REMOVED*** HelixPaginatedResult ***REMOVED*** from '../HelixPaginatedResult';
import type ***REMOVED*** HelixForwardPagination ***REMOVED*** from '../HelixPagination';
import type ***REMOVED*** HelixChannelSearchResultData ***REMOVED*** from './HelixChannelSearchResult';
import ***REMOVED*** HelixChannelSearchResult ***REMOVED*** from './HelixChannelSearchResult';
/**
 * Filters for a channel search.
 */
export interface HelixChannelSearchFilter ***REMOVED***
    /**
     * Include only channels that are currently live.
     */
    liveOnly?: boolean;
***REMOVED***
/** @inheritDoc */
export interface HelixPaginatedChannelSearchFilter extends HelixChannelSearchFilter, HelixForwardPagination ***REMOVED***
***REMOVED***
/**
 * The Helix API methods that run searches.
 *
 * Can be accessed using `client.helix.search` on an ***REMOVED***@ApiClient***REMOVED*** instance.
 *
 * ## Example
 * ```ts
 * const api = new ApiClient(new StaticAuthProvider(clientId, accessToken));
 * const channels = await api.helix.search.searchChannels('pear');
 * ```
 */
export declare class HelixSearchApi extends BaseApi ***REMOVED***
    /**
     * Search categories/games for an exact or partial match.
     *
     * @param query The search term.
     * @param pagination
     *
     * @expandParams
     */
    searchCategories(query: string, pagination?: HelixForwardPagination): Promise<HelixPaginatedResult<HelixGame>>;
    /**
     * Creates a paginator for a category/game search.
     *
     * @param query The search term.
     */
    searchCategoriesPaginated(query: string): HelixPaginatedRequest<HelixGameData, HelixGame>;
    /**
     * Search channels for an exact or partial match.
     *
     * @param query The search term.
     * @param filter
     *
     * @expandParams
     */
    searchChannels(query: string, filter?: HelixPaginatedChannelSearchFilter): Promise<HelixPaginatedResult<HelixChannelSearchResult>>;
    /**
     * Creates a paginator for a channel search.
     *
     * @param query The search term.
     * @param filter
     *
     * @expandParams
     */
    searchChannelsPaginated(query: string, filter?: HelixChannelSearchFilter): HelixPaginatedRequest<HelixChannelSearchResultData, HelixChannelSearchResult>;
***REMOVED***
