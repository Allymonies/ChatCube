"use strict";
Object.defineProperty(exports, "__esModule", ***REMOVED*** value: true ***REMOVED***);
exports.ApiClient = void 0;
var tslib_1 = require("tslib");
var cache_decorators_1 = require("@d-fischer/cache-decorators");
var deprecate_1 = require("@d-fischer/deprecate");
var twitch_api_call_1 = require("twitch-api-call");
var twitch_auth_1 = require("twitch-auth");
var twitch_common_1 = require("twitch-common");
var BadgesApi_1 = require("./API/Badges/BadgesApi");
var HelixApiGroup_1 = require("./API/Helix/HelixApiGroup");
var HelixRateLimiter_1 = require("./API/Helix/HelixRateLimiter");
var KrakenApiGroup_1 = require("./API/Kraken/KrakenApiGroup");
var BaseCheermoteList_1 = require("./API/Shared/BaseCheermoteList");
var UnsupportedApi_1 = require("./API/Unsupported/UnsupportedApi");
var ConfigError_1 = require("./Errors/ConfigError");
/**
 * An API client for the Twitch Kraken and Helix APIs.
 */
var ApiClient = /** @class */ (function () ***REMOVED***
    /**
     * Creates a new API client instance.
     *
     * @param config Configuration for the client instance.
     */
    function ApiClient(config) ***REMOVED***
        var authProvider = config.authProvider, restConfig = tslib_1.__rest(config, ["authProvider"]);
        if (!authProvider) ***REMOVED***
            throw new ConfigError_1.ConfigError('No auth provider given. Please supply the `authProvider` option.');
        ***REMOVED***
        this._helixRateLimiter = new HelixRateLimiter_1.HelixRateLimiter(***REMOVED*** logger: tslib_1.__assign(***REMOVED*** minLevel: config.logLevel ***REMOVED***, config.logger) ***REMOVED***);
        this._config = tslib_1.__assign(***REMOVED*** preAuth: false, cheermotes: ***REMOVED***
                defaultBackground: BaseCheermoteList_1.CheermoteBackground.dark,
                defaultState: BaseCheermoteList_1.CheermoteState.animated,
                defaultScale: BaseCheermoteList_1.CheermoteScale.x1
        ***REMOVED*** authProvider: authProvider ***REMOVED***, restConfig);
        if (this._config.preAuth) ***REMOVED***
            void authProvider.getAccessToken(this._config.initialScopes);
        ***REMOVED***
    ***REMOVED***
    /**
     * Creates a new instance with fixed credentials.
     *
     * @deprecated Use the constructor of ***REMOVED***@StaticAuthProvider***REMOVED*** or ***REMOVED***@RefreshableAuthProvider***REMOVED*** and pass it as `authProvider` option to this class' constructor instead.
     *
     * @param clientId The client ID of your application.
     * @param accessToken The access token to call the API with.
     *
     * You need to obtain one using one of the [Twitch OAuth flows](https://dev.twitch.tv/docs/authentication/getting-tokens-oauth/).
     * @param scopes The scopes your supplied token has.
     *
     * If this argument is given, the scopes need to be correct, or weird things might happen. If it's not (i.e. it's `undefined`), we fetch the correct scopes for you.
     *
     * If you can't exactly say which scopes your token has, don't use this parameter/set it to `undefined`.
     * @param refreshConfig Configuration to automatically refresh expired tokens.
     * @param config Additional configuration to pass to the constructor.
     * @param tokenType The type of token you passed.
     *
     * This should almost always be 'user' (which is the default).
     *
     * If you're passing 'app' here, please consider using ***REMOVED***@ApiClient.withClientCredentials***REMOVED*** instead.
     */
    ApiClient.withCredentials = function (clientId, accessToken, scopes, refreshConfig, config, tokenType) ***REMOVED***
        if (config === void 0) ***REMOVED*** config = ***REMOVED******REMOVED***; ***REMOVED***
        if (tokenType === void 0) ***REMOVED*** tokenType = 'user'; ***REMOVED***
        var authProvider = refreshConfig
            ? new twitch_auth_1.RefreshableAuthProvider(new twitch_auth_1.StaticAuthProvider(clientId, accessToken, scopes, tokenType), refreshConfig)
            : new twitch_auth_1.StaticAuthProvider(clientId, accessToken, scopes, tokenType);
        return new this(tslib_1.__assign(tslib_1.__assign(***REMOVED******REMOVED***, config), ***REMOVED*** authProvider: authProvider ***REMOVED***));
    ***REMOVED***;
    /**
     * Creates a new instance with client credentials.
     *
     * @deprecated Use the constructor of ***REMOVED***@ClientCredentialsAuthProvider***REMOVED*** and pass it as `authProvider` option to this class' constructor instead.
     *
     * @param clientId The client ID of your application.
     * @param clientSecret The client secret of your application.
     * @param config Additional configuration to pass to the constructor.
     */
    ApiClient.withClientCredentials = function (clientId, clientSecret, config) ***REMOVED***
        if (config === void 0) ***REMOVED*** config = ***REMOVED******REMOVED***; ***REMOVED***
        var authProvider = clientSecret
            ? new twitch_auth_1.ClientCredentialsAuthProvider(clientId, clientSecret)
            : new twitch_auth_1.StaticAuthProvider(clientId);
        return new this(tslib_1.__assign(tslib_1.__assign(***REMOVED******REMOVED***, config), ***REMOVED*** authProvider: authProvider ***REMOVED***));
    ***REMOVED***;
    /**
     * Makes a call to the Twitch API using given credentials.
     *
     * @deprecated Use `callTwitchApi` from `twitch-api-call` instead.
     *
     * @param options The configuration of the call.
     * @param clientId The client ID of your application.
     * @param accessToken The access token to call the API with.
     *
     * You need to obtain one using one of the [Twitch OAuth flows](https://dev.twitch.tv/docs/authentication/getting-tokens-oauth/).
     */
    // eslint-disable-next-line @typescript-eslint/no-explicit-any
    ApiClient.callApi = function (options, clientId, accessToken) ***REMOVED***
        return tslib_1.__awaiter(this, void 0, void 0, function () ***REMOVED***
            return tslib_1.__generator(this, function (_a) ***REMOVED***
                return [2 /*return*/, twitch_api_call_1.callTwitchApi(options, clientId, accessToken)];
            ***REMOVED***);
        ***REMOVED***);
    ***REMOVED***;
    /**
     * Makes a call to the Twitch API using given credentials.
     *
     * @deprecated Use `callTwitchApi` from `twitch-api-call` instead.
     *
     * @param options The configuration of the call.
     * @param clientId The client ID of your application.
     * @param accessToken The access token to call the API with.
     *
     * You need to obtain one using one of the [Twitch OAuth flows](https://dev.twitch.tv/docs/authentication/getting-tokens-oauth/).
     */
    // eslint-disable-next-line @typescript-eslint/naming-convention,@typescript-eslint/no-explicit-any
    ApiClient.callAPI = function (options, clientId, accessToken) ***REMOVED***
        return tslib_1.__awaiter(this, void 0, void 0, function () ***REMOVED***
            return tslib_1.__generator(this, function (_a) ***REMOVED***
                deprecate_1.default('[twitch] ChatClient.callAPI', 'Use callApi instead.');
                return [2 /*return*/, this.callApi(options, clientId, accessToken)];
            ***REMOVED***);
        ***REMOVED***);
    ***REMOVED***;
    /**
     * Retrieves an access token with your client credentials and an authorization code.
     *
     * @deprecated Use `exchangeCode` from `twitch-auth` instead.
     *
     * @param clientId The client ID of your application.
     * @param clientSecret The client secret of your application.
     * @param code The authorization code.
     * @param redirectUri The redirect URI. This serves no real purpose here, but must still match with the redirect URI you configured in the Twitch Developer dashboard.
     */
    ApiClient.getAccessToken = function (clientId, clientSecret, code, redirectUri) ***REMOVED***
        return tslib_1.__awaiter(this, void 0, void 0, function () ***REMOVED***
            return tslib_1.__generator(this, function (_a) ***REMOVED***
                return [2 /*return*/, twitch_auth_1.exchangeCode(clientId, clientSecret, code, redirectUri)];
            ***REMOVED***);
        ***REMOVED***);
    ***REMOVED***;
    /**
     * Retrieves an app access token with your client credentials.
     *
     * @deprecated Use `getAppToken` from `twitch-auth` instead.
     *
     * @param clientId The client ID of your application.
     * @param clientSecret The client secret of your application.
     */
    ApiClient.getAppAccessToken = function (clientId, clientSecret) ***REMOVED***
        return tslib_1.__awaiter(this, void 0, void 0, function () ***REMOVED***
            return tslib_1.__generator(this, function (_a) ***REMOVED***
                return [2 /*return*/, twitch_auth_1.getAppToken(clientId, clientSecret)];
            ***REMOVED***);
        ***REMOVED***);
    ***REMOVED***;
    /**
     * Refreshes an expired access token with your client credentials and the refresh token that was given by the initial authentication.
     *
     * @deprecated Use `refreshUserToken` from `twitch-auth` instead.
     *
     * @param clientId The client ID of your application.
     * @param clientSecret The client secret of your application.
     * @param refreshToken The refresh token.
     */
    ApiClient.refreshAccessToken = function (clientId, clientSecret, refreshToken) ***REMOVED***
        return tslib_1.__awaiter(this, void 0, void 0, function () ***REMOVED***
            return tslib_1.__generator(this, function (_a) ***REMOVED***
                return [2 /*return*/, twitch_auth_1.refreshUserToken(clientId, clientSecret, refreshToken)];
            ***REMOVED***);
        ***REMOVED***);
    ***REMOVED***;
    /**
     * Retrieves information about an access token.
     *
     * @deprecated Use `getTokenInfo` from `twitch-auth` instead.
     *
     * @param clientId The client ID of your application.
     * @param accessToken The access token to get the information of.
     *
     * You need to obtain one using one of the [Twitch OAuth flows](https://dev.twitch.tv/docs/authentication/getting-tokens-oauth/).
     */
    ApiClient.getTokenInfo = function (accessToken, clientId) ***REMOVED***
        return tslib_1.__awaiter(this, void 0, void 0, function () ***REMOVED***
            return tslib_1.__generator(this, function (_a) ***REMOVED***
                return [2 /*return*/, twitch_auth_1.getTokenInfo(accessToken, clientId)];
            ***REMOVED***);
        ***REMOVED***);
    ***REMOVED***;
    /**
     * Requests scopes from the auth provider.
     *
     * @param scopes The scopes to request.
     */
    ApiClient.prototype.requestScopes = function (scopes) ***REMOVED***
        return tslib_1.__awaiter(this, void 0, void 0, function () ***REMOVED***
            return tslib_1.__generator(this, function (_a) ***REMOVED***
                switch (_a.label) ***REMOVED***
                    case 0: return [4 /*yield*/, this._config.authProvider.getAccessToken(scopes)];
                    case 1:
                        _a.sent();
                        return [2 /*return*/];
                ***REMOVED***
            ***REMOVED***);
        ***REMOVED***);
    ***REMOVED***;
    /**
     * Retrieves information about your access token.
     */
    ApiClient.prototype.getTokenInfo = function () ***REMOVED***
        return tslib_1.__awaiter(this, void 0, void 0, function () ***REMOVED***
            var data, e_1;
            return tslib_1.__generator(this, function (_a) ***REMOVED***
                switch (_a.label) ***REMOVED***
                    case 0:
                        _a.trys.push([0, 2, , 3]);
                        return [4 /*yield*/, this.callApi(***REMOVED*** type: twitch_api_call_1.TwitchApiCallType.Auth, url: 'validate' ***REMOVED***)];
                    case 1:
                        data = _a.sent();
                        return [2 /*return*/, new twitch_auth_1.TokenInfo(data)];
                    case 2:
                        e_1 = _a.sent();
                        if (e_1 instanceof twitch_api_call_1.HttpStatusCodeError && e_1.statusCode === 401) ***REMOVED***
                            throw new twitch_auth_1.InvalidTokenError();
                        ***REMOVED***
                        throw e_1;
                    case 3: return [2 /*return*/];
                ***REMOVED***
            ***REMOVED***);
        ***REMOVED***);
    ***REMOVED***;
    /**
     * Retrieves an access token for the authentication provider.
     *
     * @param scopes The scopes to request.
     *
     * @deprecated Use ***REMOVED***@AuthProvider#getAccessToken***REMOVED*** directly instead.
     */
    ApiClient.prototype.getAccessToken = function (scopes) ***REMOVED***
        return tslib_1.__awaiter(this, void 0, void 0, function () ***REMOVED***
            return tslib_1.__generator(this, function (_a) ***REMOVED***
                return [2 /*return*/, this._config.authProvider.getAccessToken(scopes)];
            ***REMOVED***);
        ***REMOVED***);
    ***REMOVED***;
    Object.defineProperty(ApiClient.prototype, "currentScopes", ***REMOVED***
        /**
         * The scopes that are currently available using the access token.
         *
         * @deprecated Use ***REMOVED***@AuthProvider#currentScopes***REMOVED*** directly instead.
         */
        get: function () ***REMOVED***
            return this._config.authProvider.currentScopes;
    ***REMOVED***
        enumerable: false,
        configurable: true
    ***REMOVED***);
    /** @private */
    ApiClient.prototype.setAccessToken = function (token) ***REMOVED***
        this._config.authProvider.setAccessToken(token);
    ***REMOVED***;
    /**
     * Forces the authentication provider to refresh the access token, if possible.
     *
     * @deprecated Use ***REMOVED***@AuthProvider#refresh***REMOVED*** directly instead.
     */
    ApiClient.prototype.refresh = function () ***REMOVED***
        var _a, _b, _c;
        return tslib_1.__awaiter(this, void 0, void 0, function () ***REMOVED***
            return tslib_1.__generator(this, function (_d) ***REMOVED***
                return [2 /*return*/, (_c = (_b = (_a = this._config.authProvider).refresh) === null || _b === void 0 ? void 0 : _b.call(_a)) !== null && _c !== void 0 ? _c : null];
            ***REMOVED***);
        ***REMOVED***);
    ***REMOVED***;
    /**
     * Forces the authentication provider to refresh the access token, if possible.
     *
     * @deprecated Use ***REMOVED***@AuthProvider#refresh***REMOVED*** directly instead.
     */
    ApiClient.prototype.refreshAccessToken = function () ***REMOVED***
        var _a;
        return tslib_1.__awaiter(this, void 0, void 0, function () ***REMOVED***
            return tslib_1.__generator(this, function (_b) ***REMOVED***
                switch (_b.label) ***REMOVED***
                    case 0: return [4 /*yield*/, this.refresh()];
                    case 1: return [2 /*return*/, (_a = (_b.sent())) !== null && _a !== void 0 ? _a : undefined];
                ***REMOVED***
            ***REMOVED***);
        ***REMOVED***);
    ***REMOVED***;
    Object.defineProperty(ApiClient.prototype, "tokenType", ***REMOVED***
        /**
         * The type of token used by the client.
         */
        get: function () ***REMOVED***
            var _a;
            return (_a = this._config.authProvider.tokenType) !== null && _a !== void 0 ? _a : 'user';
    ***REMOVED***
        enumerable: false,
        configurable: true
    ***REMOVED***);
    Object.defineProperty(ApiClient.prototype, "clientId", ***REMOVED***
        /**
         * The client ID of your application.
         */
        get: function () ***REMOVED***
            return this._config.authProvider.clientId;
    ***REMOVED***
        enumerable: false,
        configurable: true
    ***REMOVED***);
    /**
     * Makes a call to the Twitch API using your access token.
     *
     * @param options The configuration of the call.
     */
    // eslint-disable-next-line @typescript-eslint/no-explicit-any
    ApiClient.prototype.callApi = function (options) ***REMOVED***
        var _a;
        return tslib_1.__awaiter(this, void 0, void 0, function () ***REMOVED***
            var authProvider, shouldAuth, accessToken, _b, newAccessToken, response;
            return tslib_1.__generator(this, function (_c) ***REMOVED***
                switch (_c.label) ***REMOVED***
                    case 0:
                        authProvider = this._config.authProvider;
                        shouldAuth = (_a = options.auth) !== null && _a !== void 0 ? _a : true;
                        if (!shouldAuth) return [3 /*break*/, 2];
                        return [4 /*yield*/, authProvider.getAccessToken(options.scope ? [options.scope] : undefined)];
                    case 1:
                        _b = _c.sent();
                        return [3 /*break*/, 3];
                    case 2:
                        _b = null;
                        _c.label = 3;
                    case 3:
                        accessToken = _b;
                        if (!accessToken) ***REMOVED***
                            return [2 /*return*/, twitch_api_call_1.callTwitchApi(options, authProvider.clientId, undefined, this._config.fetchOptions)];
                        ***REMOVED***
                        if (!(accessToken.isExpired && authProvider.refresh)) return [3 /*break*/, 5];
                        return [4 /*yield*/, authProvider.refresh()];
                    case 4:
                        newAccessToken = _c.sent();
                        if (newAccessToken) ***REMOVED***
                            accessToken = newAccessToken;
                        ***REMOVED***
                        _c.label = 5;
                    case 5: return [4 /*yield*/, this._callApiInternal(options, authProvider.clientId, accessToken.accessToken)];
                    case 6:
                        response = _c.sent();
                        if (!(response.status === 401 && authProvider.refresh)) return [3 /*break*/, 10];
                        return [4 /*yield*/, authProvider.refresh()];
                    case 7:
                        _c.sent();
                        return [4 /*yield*/, authProvider.getAccessToken(options.scope ? [options.scope] : [])];
                    case 8:
                        accessToken = _c.sent();
                        if (!accessToken) return [3 /*break*/, 10];
                        return [4 /*yield*/, this._callApiInternal(options, authProvider.clientId, accessToken.accessToken)];
                    case 9:
                        response = _c.sent();
                        _c.label = 10;
                    case 10: return [2 /*return*/, twitch_api_call_1.transformTwitchApiResponse(response)];
                ***REMOVED***
            ***REMOVED***);
        ***REMOVED***);
    ***REMOVED***;
    /**
     * Makes a call to the Twitch API using your access token.
     *
     * @deprecated Use callApi instead.
     *
     * @param options The configuration of the call.
     */
    // eslint-disable-next-line @typescript-eslint/naming-convention,@typescript-eslint/no-explicit-any
    ApiClient.prototype.callAPI = function (options) ***REMOVED***
        return tslib_1.__awaiter(this, void 0, void 0, function () ***REMOVED***
            return tslib_1.__generator(this, function (_a) ***REMOVED***
                deprecate_1.default('[twitch] ChatClient#callAPI', 'Use callApi instead.');
                return [2 /*return*/, this.callApi(options)];
            ***REMOVED***);
        ***REMOVED***);
    ***REMOVED***;
    Object.defineProperty(ApiClient.prototype, "cheermoteDefaults", ***REMOVED***
        /**
         * The default specs for cheermotes.
         */
        get: function () ***REMOVED***
            return this._config.cheermotes;
    ***REMOVED***
        enumerable: false,
        configurable: true
    ***REMOVED***);
    Object.defineProperty(ApiClient.prototype, "kraken", ***REMOVED***
        /**
         * A group of Kraken API methods.
         */
        get: function () ***REMOVED***
            return new KrakenApiGroup_1.KrakenApiGroup(this);
    ***REMOVED***
        enumerable: false,
        configurable: true
    ***REMOVED***);
    Object.defineProperty(ApiClient.prototype, "helix", ***REMOVED***
        /**
         * A group of Helix API methods.
         */
        get: function () ***REMOVED***
            return new HelixApiGroup_1.HelixApiGroup(this);
    ***REMOVED***
        enumerable: false,
        configurable: true
    ***REMOVED***);
    Object.defineProperty(ApiClient.prototype, "badges", ***REMOVED***
        /**
         * The API methods that deal with badges.
         *
         * @deprecated Use ***REMOVED***@HelixChatApi***REMOVED***'s badge methods instead.
         */
        get: function () ***REMOVED***
            return new BadgesApi_1.BadgesApi(this);
    ***REMOVED***
        enumerable: false,
        configurable: true
    ***REMOVED***);
    Object.defineProperty(ApiClient.prototype, "unsupported", ***REMOVED***
        /**
         * Various API methods that are not officially supported by Twitch.
         */
        get: function () ***REMOVED***
            return new UnsupportedApi_1.UnsupportedApi(this);
    ***REMOVED***
        enumerable: false,
        configurable: true
    ***REMOVED***);
    ApiClient.prototype._callApiInternal = function (options, clientId, accessToken) ***REMOVED***
        return tslib_1.__awaiter(this, void 0, void 0, function () ***REMOVED***
            var fetchOptions;
            return tslib_1.__generator(this, function (_a) ***REMOVED***
                fetchOptions = this._config.fetchOptions;
                if (options.type === twitch_api_call_1.TwitchApiCallType.Helix) ***REMOVED***
                    return [2 /*return*/, this._helixRateLimiter.request(***REMOVED*** options: options, clientId: clientId, accessToken: accessToken, fetchOptions: fetchOptions ***REMOVED***)];
                ***REMOVED***
                return [2 /*return*/, twitch_api_call_1.callTwitchApiRaw(options, clientId, accessToken, fetchOptions)];
            ***REMOVED***);
        ***REMOVED***);
    ***REMOVED***;
    tslib_1.__decorate([
        cache_decorators_1.CachedGetter()
    ], ApiClient.prototype, "kraken", null);
    tslib_1.__decorate([
        cache_decorators_1.CachedGetter()
    ], ApiClient.prototype, "helix", null);
    tslib_1.__decorate([
        cache_decorators_1.CachedGetter()
    ], ApiClient.prototype, "badges", null);
    tslib_1.__decorate([
        cache_decorators_1.CachedGetter()
    ], ApiClient.prototype, "unsupported", null);
    ApiClient = tslib_1.__decorate([
        cache_decorators_1.Cacheable,
        twitch_common_1.rtfm('twitch', 'ApiClient')
    ], ApiClient);
    return ApiClient;
***REMOVED***());
exports.ApiClient = ApiClient;
