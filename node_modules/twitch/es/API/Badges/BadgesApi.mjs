import ***REMOVED*** __awaiter, __decorate, __extends, __generator ***REMOVED*** from "tslib";
import ***REMOVED*** Cacheable, Cached ***REMOVED*** from '@d-fischer/cache-decorators';
import ***REMOVED*** TwitchApiCallType ***REMOVED*** from 'twitch-api-call';
import ***REMOVED*** extractUserId, rtfm ***REMOVED*** from 'twitch-common';
import ***REMOVED*** BaseApi ***REMOVED*** from "../BaseApi.mjs";
import ***REMOVED*** ChatBadgeList ***REMOVED*** from "./ChatBadgeList.mjs";
/**
 * The API methods that deal with badges.
 *
 * Can be accessed using `client.badges` on an ***REMOVED***@ApiClient***REMOVED*** instance.
 *
 * ## Example
 * ```ts
 * const api = new ApiClient(new StaticAuthProvider(clientId, accessToken));
 * const cheermotes = await api.badges.getGlobalBadges();
 * ```
 */
var BadgesApi = /** @class */ (function (_super) ***REMOVED***
    __extends(BadgesApi, _super);
    function BadgesApi() ***REMOVED***
        return _super !== null && _super.apply(this, arguments) || this;
    ***REMOVED***
    /**
     * Retrieves all globally applicable chat badges.
     *
     * @param language The language of the retrieved badge descriptions.
     */
    BadgesApi.prototype.getGlobalBadges = function (language) ***REMOVED***
        return __awaiter(this, void 0, Promise, function () ***REMOVED***
            var data;
            return __generator(this, function (_a) ***REMOVED***
                switch (_a.label) ***REMOVED***
                    case 0: return [4 /*yield*/, this._client.callApi(***REMOVED***
                            url: 'https://badges.twitch.tv/v1/badges/global/display',
                            query: ***REMOVED***
                                language: language
                        ***REMOVED***
                            type: TwitchApiCallType.Custom
                        ***REMOVED***)];
                    case 1:
                        data = _a.sent();
                        return [2 /*return*/, new ChatBadgeList(data.badge_sets)];
                ***REMOVED***
            ***REMOVED***);
        ***REMOVED***);
    ***REMOVED***;
    /**
     * Retrieves all applicable chat badges for a given channel.
     *
     * @param channel The channel to retrieve the chat badges for.
     * @param includeGlobal Whether to include global badges in the result list.
     * @param language The language of the retrieved badge descriptions.
     */
    BadgesApi.prototype.getChannelBadges = function (channel, includeGlobal, language) ***REMOVED***
        if (includeGlobal === void 0) ***REMOVED*** includeGlobal = true; ***REMOVED***
        return __awaiter(this, void 0, Promise, function () ***REMOVED***
            var data, channelBadges;
            return __generator(this, function (_a) ***REMOVED***
                switch (_a.label) ***REMOVED***
                    case 0: return [4 /*yield*/, this._client.callApi(***REMOVED***
                            url: "https://badges.twitch.tv/v1/badges/channels/" + extractUserId(channel) + "/display",
                            query: ***REMOVED***
                                language: language
                        ***REMOVED***
                            type: TwitchApiCallType.Custom
                        ***REMOVED***)];
                    case 1:
                        data = _a.sent();
                        channelBadges = new ChatBadgeList(data.badge_sets);
                        if (!includeGlobal) return [3 /*break*/, 3];
                        return [4 /*yield*/, this.getGlobalBadges(language)];
                    case 2: return [2 /*return*/, (_a.sent())._merge(channelBadges)];
                    case 3: return [2 /*return*/, channelBadges];
                ***REMOVED***
            ***REMOVED***);
        ***REMOVED***);
    ***REMOVED***;
    __decorate([
        Cached(3600)
    ], BadgesApi.prototype, "getGlobalBadges", null);
    __decorate([
        Cached(3600)
    ], BadgesApi.prototype, "getChannelBadges", null);
    BadgesApi = __decorate([
        Cacheable,
        rtfm('twitch', 'BadgesApi')
    ], BadgesApi);
    return BadgesApi;
***REMOVED***(BaseApi));
export ***REMOVED*** BadgesApi ***REMOVED***;
