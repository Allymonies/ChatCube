import ***REMOVED*** __awaiter, __decorate, __generator ***REMOVED*** from "tslib";
import ***REMOVED*** Enumerable ***REMOVED*** from '@d-fischer/shared-utils';
import ***REMOVED*** rtfm ***REMOVED*** from 'twitch-common';
/**
 * The type of a stream.
 */
export var HelixStreamType;
(function (HelixStreamType) ***REMOVED***
    /**
     * Returned by Twitch in case of an error.
     */
    HelixStreamType["None"] = "";
    /**
     * A live stream.
     */
    HelixStreamType["Live"] = "live";
    /**
     * A vodcast.
     *
     * Currently not supported by Twitch - but one can only hope and leave it in here.
     */
    HelixStreamType["Vodcast"] = "vodcast";
***REMOVED***)(HelixStreamType || (HelixStreamType = ***REMOVED******REMOVED***));
/**
 * A Twitch stream.
 */
var HelixStream = /** @class */ (function () ***REMOVED***
    /** @private */
    function HelixStream(data, client) ***REMOVED***
        this._data = data;
        this._client = client;
    ***REMOVED***
    Object.defineProperty(HelixStream.prototype, "id", ***REMOVED***
        /**
         * The stream ID.
         */
        get: function () ***REMOVED***
            return this._data.id;
    ***REMOVED***
        enumerable: false,
        configurable: true
    ***REMOVED***);
    Object.defineProperty(HelixStream.prototype, "userId", ***REMOVED***
        /**
         * The user ID.
         */
        get: function () ***REMOVED***
            return this._data.user_id;
    ***REMOVED***
        enumerable: false,
        configurable: true
    ***REMOVED***);
    Object.defineProperty(HelixStream.prototype, "userName", ***REMOVED***
        /**
         * The user's name.
         */
        get: function () ***REMOVED***
            return this._data.user_login;
    ***REMOVED***
        enumerable: false,
        configurable: true
    ***REMOVED***);
    Object.defineProperty(HelixStream.prototype, "userDisplayName", ***REMOVED***
        /**
         * The user's display name.
         */
        get: function () ***REMOVED***
            return this._data.user_name;
    ***REMOVED***
        enumerable: false,
        configurable: true
    ***REMOVED***);
    /**
     * Retrieves information about the user broadcasting the stream.
     */
    HelixStream.prototype.getUser = function () ***REMOVED***
        return __awaiter(this, void 0, Promise, function () ***REMOVED***
            return __generator(this, function (_a) ***REMOVED***
                return [2 /*return*/, this._client.helix.users.getUserById(this._data.user_id)];
            ***REMOVED***);
        ***REMOVED***);
    ***REMOVED***;
    Object.defineProperty(HelixStream.prototype, "gameId", ***REMOVED***
        /**
         * The game ID, or an empty string if the stream doesn't currently have a game.
         */
        get: function () ***REMOVED***
            return this._data.game_id;
    ***REMOVED***
        enumerable: false,
        configurable: true
    ***REMOVED***);
    Object.defineProperty(HelixStream.prototype, "gameName", ***REMOVED***
        /**
         * The game name, or an empty string if the stream doesn't currently have a game.
         */
        get: function () ***REMOVED***
            return this._data.game_name;
    ***REMOVED***
        enumerable: false,
        configurable: true
    ***REMOVED***);
    /**
     * Retrieves information about the game that is being played on the stream.
     *
     * Returns null if the stream doesn't currently have a game.
     */
    HelixStream.prototype.getGame = function () ***REMOVED***
        return __awaiter(this, void 0, Promise, function () ***REMOVED***
            return __generator(this, function (_a) ***REMOVED***
                return [2 /*return*/, this._data.game_id ? this._client.helix.games.getGameById(this._data.game_id) : null];
            ***REMOVED***);
        ***REMOVED***);
    ***REMOVED***;
    Object.defineProperty(HelixStream.prototype, "type", ***REMOVED***
        /**
         * The type of the stream.
         */
        get: function () ***REMOVED***
            return this._data.type;
    ***REMOVED***
        enumerable: false,
        configurable: true
    ***REMOVED***);
    Object.defineProperty(HelixStream.prototype, "title", ***REMOVED***
        /**
         * The title of the stream.
         */
        get: function () ***REMOVED***
            return this._data.title;
    ***REMOVED***
        enumerable: false,
        configurable: true
    ***REMOVED***);
    Object.defineProperty(HelixStream.prototype, "viewers", ***REMOVED***
        /**
         * The number of viewers the stream currently has.
         */
        get: function () ***REMOVED***
            return this._data.viewer_count;
    ***REMOVED***
        enumerable: false,
        configurable: true
    ***REMOVED***);
    Object.defineProperty(HelixStream.prototype, "startDate", ***REMOVED***
        /**
         * The time when the stream started.
         */
        get: function () ***REMOVED***
            return new Date(this._data.started_at);
    ***REMOVED***
        enumerable: false,
        configurable: true
    ***REMOVED***);
    Object.defineProperty(HelixStream.prototype, "language", ***REMOVED***
        /**
         * The language of the stream.
         */
        get: function () ***REMOVED***
            return this._data.language;
    ***REMOVED***
        enumerable: false,
        configurable: true
    ***REMOVED***);
    Object.defineProperty(HelixStream.prototype, "thumbnailUrl", ***REMOVED***
        /**
         * The URL of the thumbnail of the stream.
         */
        get: function () ***REMOVED***
            return this._data.thumbnail_url;
    ***REMOVED***
        enumerable: false,
        configurable: true
    ***REMOVED***);
    /**
     * Builds the thumbnail URL of the stream using the given dimensions.
     *
     * @param width The width of the thumbnail.
     * @param height The height of the thumbnail.
     */
    HelixStream.prototype.getThumbnailUrl = function (width, height) ***REMOVED***
        return this._data.thumbnail_url.replace('***REMOVED***width***REMOVED***', width.toString()).replace('***REMOVED***height***REMOVED***', height.toString());
    ***REMOVED***;
    Object.defineProperty(HelixStream.prototype, "tagIds", ***REMOVED***
        /**
         * The IDs of the tags of the stream.
         */
        get: function () ***REMOVED***
            var _a;
            return (_a = this._data.tag_ids) !== null && _a !== void 0 ? _a : [];
    ***REMOVED***
        enumerable: false,
        configurable: true
    ***REMOVED***);
    /**
     * Retrieves the tags of the stream.
     */
    HelixStream.prototype.getTags = function () ***REMOVED***
        var _a;
        return __awaiter(this, void 0, Promise, function () ***REMOVED***
            return __generator(this, function (_b) ***REMOVED***
                return [2 /*return*/, this._client.helix.tags.getStreamTagsByIds((_a = this._data.tag_ids) !== null && _a !== void 0 ? _a : [])];
            ***REMOVED***);
        ***REMOVED***);
    ***REMOVED***;
    Object.defineProperty(HelixStream.prototype, "isMature", ***REMOVED***
        /**
         * Whether the stream is set to be targeted to mature audiences only.
         */
        get: function () ***REMOVED***
            return this._data.is_mature;
    ***REMOVED***
        enumerable: false,
        configurable: true
    ***REMOVED***);
    __decorate([
        Enumerable(false)
    ], HelixStream.prototype, "_data", void 0);
    __decorate([
        Enumerable(false)
    ], HelixStream.prototype, "_client", void 0);
    HelixStream = __decorate([
        rtfm('twitch', 'HelixStream', 'id')
    ], HelixStream);
    return HelixStream;
***REMOVED***());
export ***REMOVED*** HelixStream ***REMOVED***;
