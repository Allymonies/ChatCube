import ***REMOVED*** __assign, __awaiter, __decorate, __extends, __generator, __read, __spread ***REMOVED*** from "tslib";
import ***REMOVED*** flatten ***REMOVED*** from '@d-fischer/shared-utils';
import ***REMOVED*** HttpStatusCodeError, TwitchApiCallType ***REMOVED*** from 'twitch-api-call';
import ***REMOVED*** extractUserId, extractUserName, rtfm ***REMOVED*** from 'twitch-common';
import ***REMOVED*** StreamNotLiveError ***REMOVED*** from "../../../Errors/StreamNotLiveError.mjs";
import ***REMOVED*** BaseApi ***REMOVED*** from "../../BaseApi.mjs";
import ***REMOVED*** HelixPaginatedRequest ***REMOVED*** from "../HelixPaginatedRequest.mjs";
import ***REMOVED*** createPaginatedResult ***REMOVED*** from "../HelixPaginatedResult.mjs";
import ***REMOVED*** makePaginationQuery ***REMOVED*** from "../HelixPagination.mjs";
import ***REMOVED*** HelixTag ***REMOVED*** from "../Tag/HelixTag.mjs";
import ***REMOVED*** HelixStream ***REMOVED*** from "./HelixStream.mjs";
import ***REMOVED*** HelixStreamMarker ***REMOVED*** from "./HelixStreamMarker.mjs";
import ***REMOVED*** HelixStreamMarkerWithVideo ***REMOVED*** from "./HelixStreamMarkerWithVideo.mjs";
/**
 * The Helix API methods that deal with streams.
 *
 * Can be accessed using `client.helix.streams` on an ***REMOVED***@ApiClient***REMOVED*** instance.
 *
 * ## Example
 * ```ts
 * const api = new ApiClient(new StaticAuthProvider(clientId, accessToken));
 * const stream = await api.helix.streams.getStreamByUserId('125328655');
 * ```
 */
var HelixStreamApi = /** @class */ (function (_super) ***REMOVED***
    __extends(HelixStreamApi, _super);
    function HelixStreamApi() ***REMOVED***
        return _super !== null && _super.apply(this, arguments) || this;
    ***REMOVED***
    HelixStreamApi_1 = HelixStreamApi;
    /**
     * Retrieves a list of streams.
     *
     * @expandParams
     */
    HelixStreamApi.prototype.getStreams = function (filter) ***REMOVED***
        if (filter === void 0) ***REMOVED*** filter = ***REMOVED******REMOVED***; ***REMOVED***
        return __awaiter(this, void 0, Promise, function () ***REMOVED***
            var result;
            return __generator(this, function (_a) ***REMOVED***
                switch (_a.label) ***REMOVED***
                    case 0: return [4 /*yield*/, this._client.callApi(***REMOVED***
                            url: 'streams',
                            type: TwitchApiCallType.Helix,
                            query: __assign(__assign(***REMOVED******REMOVED***, makePaginationQuery(filter)), ***REMOVED*** community_id: filter.community, game_id: filter.game, language: filter.language, type: filter.type, user_id: filter.userId, user_login: filter.userName ***REMOVED***)
                        ***REMOVED***)];
                    case 1:
                        result = _a.sent();
                        return [2 /*return*/, createPaginatedResult(result, HelixStream, this._client)];
                ***REMOVED***
            ***REMOVED***);
        ***REMOVED***);
    ***REMOVED***;
    /**
     * Creates a paginator for streams.
     *
     * @expandParams
     */
    HelixStreamApi.prototype.getStreamsPaginated = function (filter) ***REMOVED***
        var _this = this;
        if (filter === void 0) ***REMOVED*** filter = ***REMOVED******REMOVED***; ***REMOVED***
        return new HelixPaginatedRequest(***REMOVED***
            url: 'streams',
            query: ***REMOVED***
                community_id: filter.community,
                game_id: filter.game,
                language: filter.language,
                type: filter.type,
                user_id: filter.userId,
                user_login: filter.userName
            ***REMOVED***
    ***REMOVED*** this._client, function (data) ***REMOVED*** return new HelixStream(data, _this._client); ***REMOVED***);
    ***REMOVED***;
    /**
     * Retrieves the current stream for the given user name.
     *
     * @param user The user name to retrieve the stream for.
     */
    HelixStreamApi.prototype.getStreamByUserName = function (user) ***REMOVED***
        return __awaiter(this, void 0, Promise, function () ***REMOVED***
            var result;
            return __generator(this, function (_a) ***REMOVED***
                switch (_a.label) ***REMOVED***
                    case 0: return [4 /*yield*/, this.getStreams(***REMOVED*** userName: extractUserName(user) ***REMOVED***)];
                    case 1:
                        result = _a.sent();
                        return [2 /*return*/, result.data.length ? result.data[0] : null];
                ***REMOVED***
            ***REMOVED***);
        ***REMOVED***);
    ***REMOVED***;
    /**
     * Retrieves the current stream for the given user ID.
     *
     * @param user The user ID to retrieve the stream for.
     */
    HelixStreamApi.prototype.getStreamByUserId = function (user) ***REMOVED***
        return __awaiter(this, void 0, Promise, function () ***REMOVED***
            var result;
            return __generator(this, function (_a) ***REMOVED***
                switch (_a.label) ***REMOVED***
                    case 0: return [4 /*yield*/, this.getStreams(***REMOVED*** userId: extractUserId(user) ***REMOVED***)];
                    case 1:
                        result = _a.sent();
                        return [2 /*return*/, result.data.length ? result.data[0] : null];
                ***REMOVED***
            ***REMOVED***);
        ***REMOVED***);
    ***REMOVED***;
    /**
     * Retrieves a list of all stream markers for an user.
     *
     * @param user The user to list the stream markers for.
     */
    HelixStreamApi.prototype.getStreamMarkersForUser = function (user) ***REMOVED***
        return __awaiter(this, void 0, Promise, function () ***REMOVED***
            return __generator(this, function (_a) ***REMOVED***
                return [2 /*return*/, this._getStreamMarkers('user_id', extractUserId(user))];
            ***REMOVED***);
        ***REMOVED***);
    ***REMOVED***;
    /**
     * Creates a paginator for all stream markers for an user.
     *
     * @param user The user to list the stream markers for.
     */
    HelixStreamApi.prototype.getStreamMarkersForUserPaginated = function (user) ***REMOVED***
        return this._getStreamMarkersPaginated('user_id', extractUserId(user));
    ***REMOVED***;
    /**
     * Retrieves a list of all stream markers for a video.
     *
     * @param videoId The video to list the stream markers for.
     */
    HelixStreamApi.prototype.getStreamMarkersForVideo = function (videoId) ***REMOVED***
        return __awaiter(this, void 0, Promise, function () ***REMOVED***
            return __generator(this, function (_a) ***REMOVED***
                return [2 /*return*/, this._getStreamMarkers('video_id', videoId)];
            ***REMOVED***);
        ***REMOVED***);
    ***REMOVED***;
    /**
     * Creates a paginator for all stream markers for a video.
     *
     * @param videoId The video to list the stream markers for.
     */
    HelixStreamApi.prototype.getStreamMarkersForVideoPaginated = function (videoId) ***REMOVED***
        return this._getStreamMarkersPaginated('video_id', videoId);
    ***REMOVED***;
    /**
     * Creates a new stream marker.
     *
     * Only works while the specified user's stream is live.
     *
     * @param broadcaster The broadcaster to create a stream marker for.
     * @param description The description of the marker.
     */
    HelixStreamApi.prototype.createStreamMarker = function (broadcaster, description) ***REMOVED***
        return __awaiter(this, void 0, Promise, function () ***REMOVED***
            var result, e_1;
            return __generator(this, function (_a) ***REMOVED***
                switch (_a.label) ***REMOVED***
                    case 0:
                        _a.trys.push([0, 2, , 3]);
                        return [4 /*yield*/, this._client.callApi(***REMOVED***
                                url: 'streams/markers',
                                method: 'POST',
                                type: TwitchApiCallType.Helix,
                                scope: 'user:edit:broadcast',
                                query: ***REMOVED***
                                    user_id: extractUserId(broadcaster),
                                    description: description
                                ***REMOVED***
                            ***REMOVED***)];
                    case 1:
                        result = _a.sent();
                        return [2 /*return*/, new HelixStreamMarker(result.data[0], this._client)];
                    case 2:
                        e_1 = _a.sent();
                        if (e_1 instanceof HttpStatusCodeError && e_1.statusCode === 404) ***REMOVED***
                            throw new StreamNotLiveError();
                        ***REMOVED***
                        throw e_1;
                    case 3: return [2 /*return*/];
                ***REMOVED***
            ***REMOVED***);
        ***REMOVED***);
    ***REMOVED***;
    /**
     * Retrieves the tags of a stream.
     *
     * @param broadcaster The broadcaster of the stream.
     */
    HelixStreamApi.prototype.getStreamTags = function (broadcaster) ***REMOVED***
        return __awaiter(this, void 0, Promise, function () ***REMOVED***
            var result;
            return __generator(this, function (_a) ***REMOVED***
                switch (_a.label) ***REMOVED***
                    case 0: return [4 /*yield*/, this._client.callApi(***REMOVED***
                            type: TwitchApiCallType.Helix,
                            url: 'streams/tags',
                            query: ***REMOVED***
                                broadcaster_id: extractUserId(broadcaster)
                            ***REMOVED***
                        ***REMOVED***)];
                    case 1:
                        result = _a.sent();
                        return [2 /*return*/, result.data.map(function (data) ***REMOVED*** return new HelixTag(data); ***REMOVED***)];
                ***REMOVED***
            ***REMOVED***);
        ***REMOVED***);
    ***REMOVED***;
    /**
     * Replaces the tags of a stream.
     *
     * @param broadcaster The broadcaster of the stream.
     * @param tagIds The tags to set. If not given, removes all tags.
     */
    HelixStreamApi.prototype.replaceStreamTags = function (broadcaster, tagIds) ***REMOVED***
        return __awaiter(this, void 0, Promise, function () ***REMOVED***
            return __generator(this, function (_a) ***REMOVED***
                switch (_a.label) ***REMOVED***
                    case 0: return [4 /*yield*/, this._client.callApi(***REMOVED***
                            type: TwitchApiCallType.Helix,
                            url: 'streams/tags',
                            scope: 'user:edit:broadcast',
                            method: 'PUT',
                            query: ***REMOVED***
                                broadcaster_id: extractUserId(broadcaster)
                        ***REMOVED***
                            jsonBody: ***REMOVED***
                                tag_ids: tagIds
                            ***REMOVED***
                        ***REMOVED***)];
                    case 1:
                        _a.sent();
                        return [2 /*return*/];
                ***REMOVED***
            ***REMOVED***);
        ***REMOVED***);
    ***REMOVED***;
    /**
     * Retrieves the stream key of a stream.
     *
     * @param broadcaster The broadcaster to retrieve the stream key for.
     */
    HelixStreamApi.prototype.getStreamKey = function (broadcaster) ***REMOVED***
        return __awaiter(this, void 0, Promise, function () ***REMOVED***
            var result;
            return __generator(this, function (_a) ***REMOVED***
                switch (_a.label) ***REMOVED***
                    case 0: return [4 /*yield*/, this._client.callApi(***REMOVED***
                            type: TwitchApiCallType.Helix,
                            url: 'streams/key',
                            scope: 'channel:read:stream_key',
                            query: ***REMOVED***
                                broadcaster_id: extractUserId(broadcaster)
                            ***REMOVED***
                        ***REMOVED***)];
                    case 1:
                        result = _a.sent();
                        return [2 /*return*/, result.data[0].stream_key];
                ***REMOVED***
            ***REMOVED***);
        ***REMOVED***);
    ***REMOVED***;
    /**
     * Retrieves the streams that are currently live and are followed by the given user.
     *
     * @param user The user to check followed streams for.
     * @param pagination
     *
     * @expandParams
     */
    HelixStreamApi.prototype.getFollowedStreams = function (user, pagination) ***REMOVED***
        return __awaiter(this, void 0, Promise, function () ***REMOVED***
            var result;
            return __generator(this, function (_a) ***REMOVED***
                switch (_a.label) ***REMOVED***
                    case 0: return [4 /*yield*/, this._client.callApi(***REMOVED***
                            type: TwitchApiCallType.Helix,
                            url: 'streams/followed',
                            scope: 'user:read:follows',
                            query: __assign(***REMOVED*** user_id: extractUserId(user) ***REMOVED***, makePaginationQuery(pagination))
                        ***REMOVED***)];
                    case 1:
                        result = _a.sent();
                        return [2 /*return*/, createPaginatedResult(result, HelixStream, this._client)];
                ***REMOVED***
            ***REMOVED***);
        ***REMOVED***);
    ***REMOVED***;
    /**
     * Creates a paginator for the streams that are currently live and are followed by the given user.
     *
     * @param user The user to check followed streams for.
     */
    HelixStreamApi.prototype.getFollowedStreamsPaginated = function (user) ***REMOVED***
        var _this = this;
        return new HelixPaginatedRequest(***REMOVED***
            url: 'stream/followed',
            scope: 'user:read:follows',
            query: ***REMOVED***
                user_id: extractUserId(user)
            ***REMOVED***
    ***REMOVED*** this._client, function (data) ***REMOVED*** return new HelixStream(data, _this._client); ***REMOVED***);
    ***REMOVED***;
    HelixStreamApi.prototype._getStreamMarkers = function (queryType, id) ***REMOVED***
        var _a;
        return __awaiter(this, void 0, Promise, function () ***REMOVED***
            var result;
            var _b;
            return __generator(this, function (_c) ***REMOVED***
                switch (_c.label) ***REMOVED***
                    case 0: return [4 /*yield*/, this._client.callApi(***REMOVED***
                            url: 'streams/markers',
                            type: TwitchApiCallType.Helix,
                            query: (_b = ***REMOVED******REMOVED***,
                                _b[queryType] = id,
                                _b),
                            scope: 'user:read:broadcast'
                        ***REMOVED***)];
                    case 1:
                        result = _c.sent();
                        return [2 /*return*/, ***REMOVED***
                                data: flatten(result.data.map(HelixStreamApi_1._mapGetStreamMarkersResult.bind(this._client))),
                                cursor: (_a = result.pagination) === null || _a === void 0 ? void 0 : _a.cursor
                            ***REMOVED***];
                ***REMOVED***
            ***REMOVED***);
        ***REMOVED***);
    ***REMOVED***;
    HelixStreamApi.prototype._getStreamMarkersPaginated = function (queryType, id) ***REMOVED***
        var _a;
        return new HelixPaginatedRequest(***REMOVED***
            url: 'streams/markers',
            query: (_a = ***REMOVED******REMOVED***,
                _a[queryType] = id,
                _a),
            scope: 'user:read:broadcast'
    ***REMOVED*** this._client, HelixStreamApi_1._mapGetStreamMarkersResult.bind(this._client));
    ***REMOVED***;
    HelixStreamApi._mapGetStreamMarkersResult = function (data) ***REMOVED***
        var _this = this;
        return data.videos.reduce(function (result, video) ***REMOVED*** return __spread(result, video.markers.map(function (marker) ***REMOVED*** return new HelixStreamMarkerWithVideo(marker, video.video_id, _this); ***REMOVED***)); ***REMOVED***, []);
    ***REMOVED***;
    var HelixStreamApi_1;
    HelixStreamApi = HelixStreamApi_1 = __decorate([
        rtfm('twitch', 'HelixStreamApi')
    ], HelixStreamApi);
    return HelixStreamApi;
***REMOVED***(BaseApi));
export ***REMOVED*** HelixStreamApi ***REMOVED***;
