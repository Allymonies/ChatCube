import ***REMOVED*** __awaiter, __decorate, __extends, __generator ***REMOVED*** from "tslib";
import ***REMOVED*** TwitchApiCallType ***REMOVED*** from 'twitch-api-call';
import ***REMOVED*** extractUserId, rtfm ***REMOVED*** from 'twitch-common';
import ***REMOVED*** BaseApi ***REMOVED*** from "../../BaseApi.mjs";
import ***REMOVED*** HelixChannelEmote ***REMOVED*** from "./HelixChannelEmote.mjs";
import ***REMOVED*** HelixChatBadgeSet ***REMOVED*** from "./HelixChatBadgeSet.mjs";
import ***REMOVED*** HelixEmote ***REMOVED*** from "./HelixEmote.mjs";
import ***REMOVED*** HelixEmoteFromSet ***REMOVED*** from "./HelixEmoteFromSet.mjs";
/**
 * The Helix API methods that deal with chat.
 *
 * Can be accessed using `client.helix.chat` on an ***REMOVED***@ApiClient***REMOVED*** instance.
 *
 * ## Example
 * ```ts
 * const api = new ApiClient(new StaticAuthProvider(clientId, accessToken));
 * const rewards = await api.helix.chat.getChannelBadges('125328655');
 * ```
 */
var HelixChatApi = /** @class */ (function (_super) ***REMOVED***
    __extends(HelixChatApi, _super);
    function HelixChatApi() ***REMOVED***
        return _super !== null && _super.apply(this, arguments) || this;
    ***REMOVED***
    /**
     * Retrieves all global badges.
     */
    HelixChatApi.prototype.getGlobalBadges = function () ***REMOVED***
        return __awaiter(this, void 0, Promise, function () ***REMOVED***
            var result;
            return __generator(this, function (_a) ***REMOVED***
                switch (_a.label) ***REMOVED***
                    case 0: return [4 /*yield*/, this._client.callApi(***REMOVED***
                            type: TwitchApiCallType.Helix,
                            url: 'chat/badges/global'
                        ***REMOVED***)];
                    case 1:
                        result = _a.sent();
                        return [2 /*return*/, result.data.map(function (data) ***REMOVED*** return new HelixChatBadgeSet(data); ***REMOVED***)];
                ***REMOVED***
            ***REMOVED***);
        ***REMOVED***);
    ***REMOVED***;
    /**
     * Retrieves all badges specific to the given broadcaster.
     *
     * @param broadcaster The broadcaster to retrieve badges for.
     */
    HelixChatApi.prototype.getChannelBadges = function (broadcaster) ***REMOVED***
        return __awaiter(this, void 0, Promise, function () ***REMOVED***
            var result;
            return __generator(this, function (_a) ***REMOVED***
                switch (_a.label) ***REMOVED***
                    case 0: return [4 /*yield*/, this._client.callApi(***REMOVED***
                            type: TwitchApiCallType.Helix,
                            url: 'chat/badges',
                            query: ***REMOVED***
                                broadcaster_id: extractUserId(broadcaster)
                            ***REMOVED***
                        ***REMOVED***)];
                    case 1:
                        result = _a.sent();
                        return [2 /*return*/, result.data.map(function (data) ***REMOVED*** return new HelixChatBadgeSet(data); ***REMOVED***)];
                ***REMOVED***
            ***REMOVED***);
        ***REMOVED***);
    ***REMOVED***;
    /**
     * Retrieves all global emotes.
     */
    HelixChatApi.prototype.getGlobalEmotes = function () ***REMOVED***
        return __awaiter(this, void 0, Promise, function () ***REMOVED***
            var result;
            return __generator(this, function (_a) ***REMOVED***
                switch (_a.label) ***REMOVED***
                    case 0: return [4 /*yield*/, this._client.callApi(***REMOVED***
                            type: TwitchApiCallType.Helix,
                            url: 'chat/emotes/global'
                        ***REMOVED***)];
                    case 1:
                        result = _a.sent();
                        return [2 /*return*/, result.data.map(function (data) ***REMOVED*** return new HelixEmote(data); ***REMOVED***)];
                ***REMOVED***
            ***REMOVED***);
        ***REMOVED***);
    ***REMOVED***;
    /**
     * Retrieves all emotes from a channel.
     *
     * @param channel The channel to retrieve emotes from.
     */
    HelixChatApi.prototype.getChannelEmotes = function (channel) ***REMOVED***
        return __awaiter(this, void 0, Promise, function () ***REMOVED***
            var result;
            var _this = this;
            return __generator(this, function (_a) ***REMOVED***
                switch (_a.label) ***REMOVED***
                    case 0: return [4 /*yield*/, this._client.callApi(***REMOVED***
                            type: TwitchApiCallType.Helix,
                            url: 'chat/emotes',
                            query: ***REMOVED***
                                broadcaster_id: extractUserId(channel)
                            ***REMOVED***
                        ***REMOVED***)];
                    case 1:
                        result = _a.sent();
                        return [2 /*return*/, result.data.map(function (data) ***REMOVED*** return new HelixChannelEmote(data, _this._client); ***REMOVED***)];
                ***REMOVED***
            ***REMOVED***);
        ***REMOVED***);
    ***REMOVED***;
    /**
     * Retrieves all emotes from a list of emote sets.
     *
     * @param setIds The IDs of the emote sets to retrieve emotes from.
     */
    HelixChatApi.prototype.getEmotesFromSets = function (setIds) ***REMOVED***
        return __awaiter(this, void 0, Promise, function () ***REMOVED***
            var result;
            var _this = this;
            return __generator(this, function (_a) ***REMOVED***
                switch (_a.label) ***REMOVED***
                    case 0: return [4 /*yield*/, this._client.callApi(***REMOVED***
                            type: TwitchApiCallType.Helix,
                            url: 'chat/emotes/set',
                            query: ***REMOVED***
                                emote_set_id: setIds
                            ***REMOVED***
                        ***REMOVED***)];
                    case 1:
                        result = _a.sent();
                        return [2 /*return*/, result.data.map(function (data) ***REMOVED*** return new HelixEmoteFromSet(data, _this._client); ***REMOVED***)];
                ***REMOVED***
            ***REMOVED***);
        ***REMOVED***);
    ***REMOVED***;
    HelixChatApi = __decorate([
        rtfm('twitch', 'HelixChatApi')
    ], HelixChatApi);
    return HelixChatApi;
***REMOVED***(BaseApi));
export ***REMOVED*** HelixChatApi ***REMOVED***;
