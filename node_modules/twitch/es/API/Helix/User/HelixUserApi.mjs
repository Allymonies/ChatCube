import ***REMOVED*** __assign, __awaiter, __decorate, __extends, __generator ***REMOVED*** from "tslib";
import ***REMOVED*** TwitchApiCallType ***REMOVED*** from 'twitch-api-call';
import ***REMOVED*** extractUserId, extractUserName, HellFreezesOverError, rtfm ***REMOVED*** from 'twitch-common';
import ***REMOVED*** BaseApi ***REMOVED*** from "../../BaseApi.mjs";
import ***REMOVED*** HelixPaginatedRequest ***REMOVED*** from "../HelixPaginatedRequest.mjs";
import ***REMOVED*** HelixPaginatedRequestWithTotal ***REMOVED*** from "../HelixPaginatedRequestWithTotal.mjs";
import ***REMOVED*** createPaginatedResult, createPaginatedResultWithTotal ***REMOVED*** from "../HelixPaginatedResult.mjs";
import ***REMOVED*** makePaginationQuery ***REMOVED*** from "../HelixPagination.mjs";
import ***REMOVED*** HelixInstalledExtensionList ***REMOVED*** from "./Extensions/HelixInstalledExtensionList.mjs";
import ***REMOVED*** HelixUserExtension ***REMOVED*** from "./Extensions/HelixUserExtension.mjs";
import ***REMOVED*** HelixFollow ***REMOVED*** from "./HelixFollow.mjs";
import ***REMOVED*** HelixPrivilegedUser ***REMOVED*** from "./HelixPrivilegedUser.mjs";
import ***REMOVED*** HelixUser ***REMOVED*** from "./HelixUser.mjs";
import ***REMOVED*** HelixUserBlock ***REMOVED*** from "./HelixUserBlock.mjs";
/** @private */
export var UserLookupType;
(function (UserLookupType) ***REMOVED***
    UserLookupType["Id"] = "id";
    UserLookupType["Login"] = "login";
***REMOVED***)(UserLookupType || (UserLookupType = ***REMOVED******REMOVED***));
/**
 * The Helix API methods that deal with users.
 *
 * Can be accessed using `client.helix.users` on an ***REMOVED***@ApiClient***REMOVED*** instance.
 *
 * ## Example
 * ```ts
 * const api = new ApiClient(new StaticAuthProvider(clientId, accessToken));
 * const user = await api.helix.users.getUserById('125328655');
 * ```
 */
var HelixUserApi = /** @class */ (function (_super) ***REMOVED***
    __extends(HelixUserApi, _super);
    function HelixUserApi() ***REMOVED***
        return _super !== null && _super.apply(this, arguments) || this;
    ***REMOVED***
    HelixUserApi_1 = HelixUserApi;
    /**
     * Retrieves the user data for the given list of user IDs.
     *
     * @param userIds The user IDs you want to look up.
     */
    HelixUserApi.prototype.getUsersByIds = function (userIds) ***REMOVED***
        return __awaiter(this, void 0, Promise, function () ***REMOVED***
            return __generator(this, function (_a) ***REMOVED***
                return [2 /*return*/, this._getUsers(UserLookupType.Id, userIds.map(extractUserId))];
            ***REMOVED***);
        ***REMOVED***);
    ***REMOVED***;
    /**
     * Retrieves the user data for the given list of user names.
     *
     * @param userNames The user names you want to look up.
     */
    HelixUserApi.prototype.getUsersByNames = function (userNames) ***REMOVED***
        return __awaiter(this, void 0, Promise, function () ***REMOVED***
            return __generator(this, function (_a) ***REMOVED***
                return [2 /*return*/, this._getUsers(UserLookupType.Login, userNames.map(extractUserName))];
            ***REMOVED***);
        ***REMOVED***);
    ***REMOVED***;
    /**
     * Retrieves the user data for the given user ID.
     *
     * @param userId The user ID you want to look up.
     */
    HelixUserApi.prototype.getUserById = function (userId) ***REMOVED***
        return __awaiter(this, void 0, Promise, function () ***REMOVED***
            var users;
            return __generator(this, function (_a) ***REMOVED***
                switch (_a.label) ***REMOVED***
                    case 0: return [4 /*yield*/, this._getUsers(UserLookupType.Id, [extractUserId(userId)])];
                    case 1:
                        users = _a.sent();
                        return [2 /*return*/, users.length ? users[0] : null];
                ***REMOVED***
            ***REMOVED***);
        ***REMOVED***);
    ***REMOVED***;
    /**
     * Retrieves the user data for the given user name.
     *
     * @param userName The user name you want to look up.
     */
    HelixUserApi.prototype.getUserByName = function (userName) ***REMOVED***
        return __awaiter(this, void 0, Promise, function () ***REMOVED***
            var users;
            return __generator(this, function (_a) ***REMOVED***
                switch (_a.label) ***REMOVED***
                    case 0: return [4 /*yield*/, this._getUsers(UserLookupType.Login, [extractUserName(userName)])];
                    case 1:
                        users = _a.sent();
                        return [2 /*return*/, users.length ? users[0] : null];
                ***REMOVED***
            ***REMOVED***);
        ***REMOVED***);
    ***REMOVED***;
    /**
     * Retrieves the user data of the currently authenticated user.
     *
     * @param withEmail Whether you need the user's email address.
     */
    HelixUserApi.prototype.getMe = function (withEmail) ***REMOVED***
        var _a;
        if (withEmail === void 0) ***REMOVED*** withEmail = false; ***REMOVED***
        return __awaiter(this, void 0, Promise, function () ***REMOVED***
            var result;
            return __generator(this, function (_b) ***REMOVED***
                switch (_b.label) ***REMOVED***
                    case 0: return [4 /*yield*/, this._client.callApi(***REMOVED***
                            type: TwitchApiCallType.Helix,
                            url: 'users',
                            scope: withEmail ? 'user:read:email' : ''
                        ***REMOVED***)];
                    case 1:
                        result = _b.sent();
                        // eslint-disable-next-line @typescript-eslint/no-unnecessary-condition
                        if (!((_a = result.data) === null || _a === void 0 ? void 0 : _a.length)) ***REMOVED***
                            throw new HellFreezesOverError('Could not get authenticated user');
                        ***REMOVED***
                        return [2 /*return*/, new HelixPrivilegedUser(result.data[0], this._client)];
                ***REMOVED***
            ***REMOVED***);
        ***REMOVED***);
    ***REMOVED***;
    /**
     * Updates the currently authenticated user's data.
     *
     * @param data The data to update.
     */
    HelixUserApi.prototype.updateUser = function (data) ***REMOVED***
        return __awaiter(this, void 0, Promise, function () ***REMOVED***
            var result;
            return __generator(this, function (_a) ***REMOVED***
                switch (_a.label) ***REMOVED***
                    case 0: return [4 /*yield*/, this._client.callApi(***REMOVED***
                            type: TwitchApiCallType.Helix,
                            url: 'users',
                            method: 'PUT',
                            scope: 'user:edit',
                            query: ***REMOVED***
                                description: data.description
                            ***REMOVED***
                        ***REMOVED***)];
                    case 1:
                        result = _a.sent();
                        return [2 /*return*/, new HelixPrivilegedUser(result.data[0], this._client)];
                ***REMOVED***
            ***REMOVED***);
        ***REMOVED***);
    ***REMOVED***;
    /**
     * Retrieves a list of follow relations.
     *
     * @param filter Several filtering and pagination parameters. See the ***REMOVED***@HelixFollowFilter***REMOVED*** documentation.
     */
    HelixUserApi.prototype.getFollows = function (filter) ***REMOVED***
        return __awaiter(this, void 0, Promise, function () ***REMOVED***
            var query, result;
            return __generator(this, function (_a) ***REMOVED***
                switch (_a.label) ***REMOVED***
                    case 0:
                        query = HelixUserApi_1._makeFollowsQuery(filter);
                        return [4 /*yield*/, this._client.callApi(***REMOVED***
                                url: 'users/follows',
                                type: TwitchApiCallType.Helix,
                                query: query
                            ***REMOVED***)];
                    case 1:
                        result = _a.sent();
                        return [2 /*return*/, createPaginatedResultWithTotal(result, HelixFollow, this._client)];
                ***REMOVED***
            ***REMOVED***);
        ***REMOVED***);
    ***REMOVED***;
    /**
     * Creates a paginator for follow relations.
     *
     * @param filter Several filtering and pagination parameters. See the ***REMOVED***@HelixFollowFilter***REMOVED*** documentation.
     */
    HelixUserApi.prototype.getFollowsPaginated = function (filter) ***REMOVED***
        var _this = this;
        var query = HelixUserApi_1._makeFollowsQuery(filter);
        return new HelixPaginatedRequestWithTotal(***REMOVED***
            url: 'users/follows',
            query: query
    ***REMOVED*** this._client, function (data) ***REMOVED*** return new HelixFollow(data, _this._client); ***REMOVED***);
    ***REMOVED***;
    /**
     * Retrieves the follow relation bewteen a given user and a given broadcaster.
     *
     * @param user The user to retrieve the follow relation for.
     * @param broadcaster The broadcaster to retrieve the follow relation for.
     */
    HelixUserApi.prototype.getFollowFromUserToBroadcaster = function (user, broadcaster) ***REMOVED***
        return __awaiter(this, void 0, Promise, function () ***REMOVED***
            var result;
            return __generator(this, function (_a) ***REMOVED***
                switch (_a.label) ***REMOVED***
                    case 0: return [4 /*yield*/, this.getFollows(***REMOVED*** user: user, followedUser: broadcaster ***REMOVED***)];
                    case 1:
                        result = (_a.sent()).data;
                        return [2 /*return*/, result.length ? result[0] : null];
                ***REMOVED***
            ***REMOVED***);
        ***REMOVED***);
    ***REMOVED***;
    /**
     * Checks whether the given user follows the given broadcaster.
     *
     * @param user The user to check the follow for.
     * @param broadcaster The broadcaster to check the follow for.
     */
    HelixUserApi.prototype.userFollowsBroadcaster = function (user, broadcaster) ***REMOVED***
        return __awaiter(this, void 0, Promise, function () ***REMOVED***
            return __generator(this, function (_a) ***REMOVED***
                switch (_a.label) ***REMOVED***
                    case 0: return [4 /*yield*/, this.getFollowFromUserToBroadcaster(user, broadcaster)];
                    case 1: return [2 /*return*/, (_a.sent()) !== null];
                ***REMOVED***
            ***REMOVED***);
        ***REMOVED***);
    ***REMOVED***;
    /**
     * Creates a new follow from a user to another user.
     *
     * @param fromUser The user to create the follow for.
     * @param toUser The user to follow.
     * @param allowNotifications Whether email or push notifications are allowed to be created.
     *
     * The user `fromUser` still needs to have this enabled in their settings as well.
     */
    HelixUserApi.prototype.createFollow = function (fromUser, toUser, allowNotifications) ***REMOVED***
        return __awaiter(this, void 0, Promise, function () ***REMOVED***
            return __generator(this, function (_a) ***REMOVED***
                switch (_a.label) ***REMOVED***
                    case 0: return [4 /*yield*/, this._client.callApi(***REMOVED***
                            type: TwitchApiCallType.Helix,
                            url: 'users/follows',
                            method: 'POST',
                            scope: 'user:edit:follows',
                            jsonBody: ***REMOVED***
                                from_id: extractUserId(fromUser),
                                to_id: extractUserId(toUser),
                                allow_notifications: allowNotifications
                            ***REMOVED***
                        ***REMOVED***)];
                    case 1:
                        _a.sent();
                        return [2 /*return*/];
                ***REMOVED***
            ***REMOVED***);
        ***REMOVED***);
    ***REMOVED***;
    /**
     * Removes a follow from a user to another user.
     *
     * @param fromUser The user to remove the follow for.
     * @param toUser The user to unfollow.
     */
    HelixUserApi.prototype.deleteFollow = function (fromUser, toUser) ***REMOVED***
        return __awaiter(this, void 0, Promise, function () ***REMOVED***
            return __generator(this, function (_a) ***REMOVED***
                switch (_a.label) ***REMOVED***
                    case 0: return [4 /*yield*/, this._client.callApi(***REMOVED***
                            type: TwitchApiCallType.Helix,
                            url: 'users/follows',
                            method: 'DELETE',
                            scope: 'user:edit:follows',
                            jsonBody: ***REMOVED***
                                from_id: extractUserId(fromUser),
                                to_id: extractUserId(toUser)
                            ***REMOVED***
                        ***REMOVED***)];
                    case 1:
                        _a.sent();
                        return [2 /*return*/];
                ***REMOVED***
            ***REMOVED***);
        ***REMOVED***);
    ***REMOVED***;
    /**
     * Retrieves a list of users blocked by the given user.
     *
     * @param user The user to retrieve blocks for.
     * @param pagination
     *
     * @expandParams
     */
    HelixUserApi.prototype.getBlocks = function (user, pagination) ***REMOVED***
        return __awaiter(this, void 0, Promise, function () ***REMOVED***
            var result;
            return __generator(this, function (_a) ***REMOVED***
                switch (_a.label) ***REMOVED***
                    case 0: return [4 /*yield*/, this._client.callApi(***REMOVED***
                            type: TwitchApiCallType.Helix,
                            url: 'users/blocks',
                            scope: 'user:read:blocked_users',
                            query: __assign(***REMOVED*** broadcaster_id: extractUserId(user) ***REMOVED***, makePaginationQuery(pagination))
                        ***REMOVED***)];
                    case 1:
                        result = _a.sent();
                        return [2 /*return*/, createPaginatedResult(result, HelixUserBlock, this._client)];
                ***REMOVED***
            ***REMOVED***);
        ***REMOVED***);
    ***REMOVED***;
    /**
     * Creates a paginator for users blocked by the given user.
     *
     * @param user The user to retrieve blocks for.
     */
    HelixUserApi.prototype.getBlocksPaginated = function (user) ***REMOVED***
        var _this = this;
        return new HelixPaginatedRequest(***REMOVED***
            url: 'users/blocks',
            scope: 'user:read:blocked_users',
            query: ***REMOVED***
                broadcaster_id: extractUserId(user)
            ***REMOVED***
    ***REMOVED*** this._client, function (data) ***REMOVED*** return new HelixUserBlock(data, _this._client); ***REMOVED***);
    ***REMOVED***;
    /**
     * Blocks the given user.
     *
     * @param target The user to block.
     * @param additionalInfo Additional info to give context to the block.
     *
     * @expandParams
     */
    HelixUserApi.prototype.createBlock = function (target, additionalInfo) ***REMOVED***
        if (additionalInfo === void 0) ***REMOVED*** additionalInfo = ***REMOVED******REMOVED***; ***REMOVED***
        return __awaiter(this, void 0, Promise, function () ***REMOVED***
            return __generator(this, function (_a) ***REMOVED***
                switch (_a.label) ***REMOVED***
                    case 0: return [4 /*yield*/, this._client.callApi(***REMOVED***
                            type: TwitchApiCallType.Helix,
                            url: 'users/blocks',
                            method: 'PUT',
                            scope: 'user:manage:blocked_users',
                            query: ***REMOVED***
                                target_user_id: extractUserId(target),
                                source_context: additionalInfo.sourceContext,
                                reason: additionalInfo.reason
                            ***REMOVED***
                        ***REMOVED***)];
                    case 1:
                        _a.sent();
                        return [2 /*return*/];
                ***REMOVED***
            ***REMOVED***);
        ***REMOVED***);
    ***REMOVED***;
    /**
     * Unblocks the given user.
     *
     * @param target The user to unblock.
     */
    HelixUserApi.prototype.deleteBlock = function (target) ***REMOVED***
        return __awaiter(this, void 0, Promise, function () ***REMOVED***
            return __generator(this, function (_a) ***REMOVED***
                switch (_a.label) ***REMOVED***
                    case 0: return [4 /*yield*/, this._client.callApi(***REMOVED***
                            type: TwitchApiCallType.Helix,
                            url: 'users/blocks',
                            method: 'DELETE',
                            scope: 'user:manage:blocked_users',
                            query: ***REMOVED***
                                target_user_id: extractUserId(target)
                            ***REMOVED***
                        ***REMOVED***)];
                    case 1:
                        _a.sent();
                        return [2 /*return*/];
                ***REMOVED***
            ***REMOVED***);
        ***REMOVED***);
    ***REMOVED***;
    /**
     * Retrieves a list of all extensions for the authenticated user.
     */
    HelixUserApi.prototype.getMyExtensions = function () ***REMOVED***
        return __awaiter(this, void 0, Promise, function () ***REMOVED***
            var result;
            return __generator(this, function (_a) ***REMOVED***
                switch (_a.label) ***REMOVED***
                    case 0: return [4 /*yield*/, this._client.callApi(***REMOVED***
                            type: TwitchApiCallType.Helix,
                            url: 'users/extensions/list'
                        ***REMOVED***)];
                    case 1:
                        result = _a.sent();
                        return [2 /*return*/, result.data.map(function (data) ***REMOVED*** return new HelixUserExtension(data); ***REMOVED***)];
                ***REMOVED***
            ***REMOVED***);
        ***REMOVED***);
    ***REMOVED***;
    /**
     * Retrieves a list of all installed extensions for the given user.
     *
     * @param user The user to get the installed extensions for.
     *
     * If not given, get the installed extensions for the authenticated user.
     */
    HelixUserApi.prototype.getActiveExtensions = function (user) ***REMOVED***
        return __awaiter(this, void 0, Promise, function () ***REMOVED***
            var userId, result;
            return __generator(this, function (_a) ***REMOVED***
                switch (_a.label) ***REMOVED***
                    case 0:
                        userId = user ? extractUserId(user) : undefined;
                        return [4 /*yield*/, this._client.callApi(***REMOVED***
                                type: TwitchApiCallType.Helix,
                                url: 'users/extensions',
                                query: ***REMOVED***
                                    user_id: userId
                                ***REMOVED***
                            ***REMOVED***)];
                    case 1:
                        result = _a.sent();
                        return [2 /*return*/, new HelixInstalledExtensionList(result.data)];
                ***REMOVED***
            ***REMOVED***);
        ***REMOVED***);
    ***REMOVED***;
    /**
     * Updates the installed extensions for the authenticated user.
     *
     * @param data The extension installation payload.
     *
     * The format is shown on the [Twitch documentation](https://dev.twitch.tv/docs/api/reference#update-user-extensions).
     * Don't use the "data" wrapper though.
     */
    HelixUserApi.prototype.updateMyActiveExtensions = function (data) ***REMOVED***
        return __awaiter(this, void 0, Promise, function () ***REMOVED***
            var result;
            return __generator(this, function (_a) ***REMOVED***
                switch (_a.label) ***REMOVED***
                    case 0: return [4 /*yield*/, this._client.callApi(***REMOVED***
                            type: TwitchApiCallType.Helix,
                            url: 'users/extensions',
                            jsonBody: ***REMOVED*** data: data ***REMOVED***
                        ***REMOVED***)];
                    case 1:
                        result = _a.sent();
                        return [2 /*return*/, new HelixInstalledExtensionList(result.data)];
                ***REMOVED***
            ***REMOVED***);
        ***REMOVED***);
    ***REMOVED***;
    HelixUserApi._makeFollowsQuery = function (filter) ***REMOVED***
        var query = ***REMOVED******REMOVED***;
        var hasUserIdParam = false;
        if (filter.user) ***REMOVED***
            query.from_id = extractUserId(filter.user);
            hasUserIdParam = true;
        ***REMOVED***
        if (filter.followedUser) ***REMOVED***
            query.to_id = extractUserId(filter.followedUser);
            hasUserIdParam = true;
        ***REMOVED***
        if (!hasUserIdParam) ***REMOVED***
            throw new TypeError('At least one of user and followedUser have to be set');
        ***REMOVED***
        return query;
    ***REMOVED***;
    HelixUserApi.prototype._getUsers = function (lookupType, param) ***REMOVED***
        return __awaiter(this, void 0, void 0, function () ***REMOVED***
            var query, result;
            var _a;
            var _this = this;
            return __generator(this, function (_b) ***REMOVED***
                switch (_b.label) ***REMOVED***
                    case 0:
                        if (param.length === 0) ***REMOVED***
                            return [2 /*return*/, []];
                        ***REMOVED***
                        query = (_a = ***REMOVED******REMOVED***, _a[lookupType] = param, _a);
                        return [4 /*yield*/, this._client.callApi(***REMOVED***
                                type: TwitchApiCallType.Helix,
                                url: 'users',
                                query: query
                            ***REMOVED***)];
                    case 1:
                        result = _b.sent();
                        return [2 /*return*/, result.data.map(function (userData) ***REMOVED*** return new HelixUser(userData, _this._client); ***REMOVED***)];
                ***REMOVED***
            ***REMOVED***);
        ***REMOVED***);
    ***REMOVED***;
    var HelixUserApi_1;
    HelixUserApi = HelixUserApi_1 = __decorate([
        rtfm('twitch', 'HelixUserApi')
    ], HelixUserApi);
    return HelixUserApi;
***REMOVED***(BaseApi));
export ***REMOVED*** HelixUserApi ***REMOVED***;
