import ***REMOVED*** __decorate, __extends ***REMOVED*** from "tslib";
import ***REMOVED*** Enumerable, indexBy ***REMOVED*** from '@d-fischer/shared-utils';
import ***REMOVED*** HellFreezesOverError, rtfm ***REMOVED*** from 'twitch-common';
import ***REMOVED*** BaseCheermoteList ***REMOVED*** from "../../Shared/BaseCheermoteList.mjs";
/**
 * A list of cheermotes you can use globally or in a specific channel, depending on how you fetched the list.
 *
 * @inheritDoc
 */
var HelixCheermoteList = /** @class */ (function (_super) ***REMOVED***
    __extends(HelixCheermoteList, _super);
    /** @private */
    function HelixCheermoteList(data, client) ***REMOVED***
        var _this = _super.call(this) || this;
        _this._data = indexBy(data, function (action) ***REMOVED*** return action.prefix.toLowerCase(); ***REMOVED***);
        _this._client = client;
        return _this;
    ***REMOVED***
    /**
     * Gets the URL and color needed to properly represent a cheer of the given amount of bits with the given prefix.
     *
     * @param name The name/prefix of the cheermote.
     * @param bits The amount of bits cheered.
     * @param format The format of the cheermote you want to request.
     */
    HelixCheermoteList.prototype.getCheermoteDisplayInfo = function (name, bits, format) ***REMOVED***
        var _a, _b, _c;
        if (format === void 0) ***REMOVED*** format = ***REMOVED******REMOVED***; ***REMOVED***
        name = name.toLowerCase();
        var cheermoteDefaults = this._client.cheermoteDefaults;
        var background = (_a = format.background) !== null && _a !== void 0 ? _a : cheermoteDefaults.defaultBackground;
        var state = (_b = format.state) !== null && _b !== void 0 ? _b : cheermoteDefaults.defaultState;
        var scale = (_c = format.scale) !== null && _c !== void 0 ? _c : cheermoteDefaults.defaultScale;
        var tiers = this._data[name].tiers;
        var correctTier = tiers.sort(function (a, b) ***REMOVED*** return b.min_bits - a.min_bits; ***REMOVED***).find(function (tier) ***REMOVED*** return tier.min_bits <= bits; ***REMOVED***);
        if (!correctTier) ***REMOVED***
            throw new HellFreezesOverError("Cheermote \"" + name + "\" does not have an applicable tier for " + bits + " bits");
        ***REMOVED***
        return ***REMOVED***
            // @ts-expect-error TS7015 TODO will be fixed with the removal of enums
            // eslint-disable-next-line @typescript-eslint/no-unsafe-member-access,@typescript-eslint/no-unsafe-assignment
            url: correctTier.images[background][state][scale],
            color: correctTier.color
        ***REMOVED***;
    ***REMOVED***;
    /**
     * Gets all possible cheermote names.
     */
    HelixCheermoteList.prototype.getPossibleNames = function () ***REMOVED***
        return Object.keys(this._data);
    ***REMOVED***;
    __decorate([
        Enumerable(false)
    ], HelixCheermoteList.prototype, "_data", void 0);
    __decorate([
        Enumerable(false)
    ], HelixCheermoteList.prototype, "_client", void 0);
    HelixCheermoteList = __decorate([
        rtfm('twitch', 'HelixCheermoteList')
    ], HelixCheermoteList);
    return HelixCheermoteList;
***REMOVED***(BaseCheermoteList));
export ***REMOVED*** HelixCheermoteList ***REMOVED***;
