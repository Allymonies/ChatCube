import ***REMOVED*** __assign, __awaiter, __decorate, __extends, __generator ***REMOVED*** from "tslib";
import ***REMOVED*** TwitchApiCallType ***REMOVED*** from 'twitch-api-call';
import ***REMOVED*** rtfm ***REMOVED*** from 'twitch-common';
import ***REMOVED*** BaseApi ***REMOVED*** from "../../BaseApi.mjs";
import ***REMOVED*** HelixPaginatedRequest ***REMOVED*** from "../HelixPaginatedRequest.mjs";
import ***REMOVED*** createPaginatedResult ***REMOVED*** from "../HelixPaginatedResult.mjs";
import ***REMOVED*** makePaginationQuery ***REMOVED*** from "../HelixPagination.mjs";
import ***REMOVED*** HelixExtensionTransaction ***REMOVED*** from "./HelixExtensionTransaction.mjs";
/**
 * The Helix API methods that deal with extensions.
 *
 * Can be accessed using `client.helix.extensions` on an ***REMOVED***@ApiClient***REMOVED*** instance.
 *
 * ## Example
 * ```ts
 * const api = new ApiClient(new StaticAuthProvider(clientId, accessToken));
 * const transactions = await api.helix.extionsions.getExtensionTransactions('abcd');
 * ```
 */
var HelixExtensionsApi = /** @class */ (function (_super) ***REMOVED***
    __extends(HelixExtensionsApi, _super);
    function HelixExtensionsApi() ***REMOVED***
        return _super !== null && _super.apply(this, arguments) || this;
    ***REMOVED***
    /**
     * Retrieves a list of transactions for the given extension.
     *
     * @param extensionId The ID of the extension to retrieve transactions for.
     * @param filter Additional filters.
     */
    HelixExtensionsApi.prototype.getExtensionTransactions = function (extensionId, filter) ***REMOVED***
        if (filter === void 0) ***REMOVED*** filter = ***REMOVED******REMOVED***; ***REMOVED***
        return __awaiter(this, void 0, Promise, function () ***REMOVED***
            var result;
            return __generator(this, function (_a) ***REMOVED***
                switch (_a.label) ***REMOVED***
                    case 0: return [4 /*yield*/, this._client.callApi(***REMOVED***
                            type: TwitchApiCallType.Helix,
                            url: 'extensions/transactions',
                            query: __assign(***REMOVED*** extension_id: extensionId, id: filter.transactionIds ***REMOVED***, makePaginationQuery(filter))
                        ***REMOVED***)];
                    case 1:
                        result = _a.sent();
                        return [2 /*return*/, createPaginatedResult(result, HelixExtensionTransaction, this._client)];
                ***REMOVED***
            ***REMOVED***);
        ***REMOVED***);
    ***REMOVED***;
    /**
     * Creates a paginator for transactions for the given extension.
     *
     * @param extensionId The ID of the extension to retrieve transactions for.
     * @param filter Additional filters.
     */
    HelixExtensionsApi.prototype.getExtensionTransactionsPaginated = function (extensionId, filter) ***REMOVED***
        var _this = this;
        if (filter === void 0) ***REMOVED*** filter = ***REMOVED******REMOVED***; ***REMOVED***
        return new HelixPaginatedRequest(***REMOVED***
            url: 'extensions/transactions',
            query: ***REMOVED***
                extension_id: extensionId,
                id: filter.transactionIds
            ***REMOVED***
    ***REMOVED*** this._client, function (data) ***REMOVED*** return new HelixExtensionTransaction(data, _this._client); ***REMOVED***);
    ***REMOVED***;
    HelixExtensionsApi = __decorate([
        rtfm('twitch', 'HelixExtensionsApi')
    ], HelixExtensionsApi);
    return HelixExtensionsApi;
***REMOVED***(BaseApi));
export ***REMOVED*** HelixExtensionsApi ***REMOVED***;
