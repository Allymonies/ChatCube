import ***REMOVED*** __assign, __awaiter, __decorate, __extends, __generator ***REMOVED*** from "tslib";
import ***REMOVED*** TwitchApiCallType ***REMOVED*** from 'twitch-api-call';
import ***REMOVED*** extractUserId, rtfm ***REMOVED*** from 'twitch-common';
import ***REMOVED*** BaseApi ***REMOVED*** from "../../BaseApi.mjs";
import ***REMOVED*** HelixPaginatedRequest ***REMOVED*** from "../HelixPaginatedRequest.mjs";
import ***REMOVED*** createPaginatedResult ***REMOVED*** from "../HelixPaginatedResult.mjs";
import ***REMOVED*** makePaginationQuery ***REMOVED*** from "../HelixPagination.mjs";
import ***REMOVED*** HelixBan ***REMOVED*** from "./HelixBan.mjs";
import ***REMOVED*** HelixBanEvent ***REMOVED*** from "./HelixBanEvent.mjs";
import ***REMOVED*** HelixModerator ***REMOVED*** from "./HelixModerator.mjs";
import ***REMOVED*** HelixModeratorEvent ***REMOVED*** from "./HelixModeratorEvent.mjs";
/**
 * The Helix API methods that deal with moderation.
 *
 * Can be accessed using `client.helix.moderation` on an ***REMOVED***@ApiClient***REMOVED*** instance.
 *
 * ## Example
 * ```ts
 * const api = new ApiClient(new StaticAuthProvider(clientId, accessToken));
 * const ***REMOVED*** data: users ***REMOVED*** = await api.helix.moderation.getBannedUsers('61369223');
 * ```
 */
var HelixModerationApi = /** @class */ (function (_super) ***REMOVED***
    __extends(HelixModerationApi, _super);
    function HelixModerationApi() ***REMOVED***
        return _super !== null && _super.apply(this, arguments) || this;
    ***REMOVED***
    /**
     * Retrieves a list of banned users in a given channel.
     *
     * @param channel The channel to retrieve the banned users from.
     * @param filter Additional filters for the result set.
     */
    HelixModerationApi.prototype.getBannedUsers = function (channel, filter) ***REMOVED***
        return __awaiter(this, void 0, Promise, function () ***REMOVED***
            var result;
            return __generator(this, function (_a) ***REMOVED***
                switch (_a.label) ***REMOVED***
                    case 0: return [4 /*yield*/, this._client.callApi(***REMOVED***
                            type: TwitchApiCallType.Helix,
                            url: 'moderation/banned',
                            scope: 'moderation:read',
                            query: __assign(***REMOVED*** broadcaster_id: extractUserId(channel), user_id: filter === null || filter === void 0 ? void 0 : filter.userId ***REMOVED***, makePaginationQuery(filter))
                        ***REMOVED***)];
                    case 1:
                        result = _a.sent();
                        return [2 /*return*/, createPaginatedResult(result, HelixBan, this._client)];
                ***REMOVED***
            ***REMOVED***);
        ***REMOVED***);
    ***REMOVED***;
    /**
     * Creates a paginator for banned users in a given channel.
     *
     * @param channel The channel to retrieve the banned users from.
     */
    HelixModerationApi.prototype.getBannedUsersPaginated = function (channel) ***REMOVED***
        var _this = this;
        return new HelixPaginatedRequest(***REMOVED***
            url: 'moderation/banned',
            scope: 'moderation:read',
            query: ***REMOVED***
                broadcaster_id: extractUserId(channel)
            ***REMOVED***
    ***REMOVED*** this._client, function (data) ***REMOVED*** return new HelixBan(data, _this._client); ***REMOVED***, 50 // possibly a relatively consistent workaround for twitchdev/issues#18
        );
    ***REMOVED***;
    /**
     * Checks whether a given user is banned in a given channel.
     *
     * @param channel The channel to check for a ban of the given user.
     * @param user The user to check for a ban in the given channel.
     */
    HelixModerationApi.prototype.checkUserBan = function (channel, user) ***REMOVED***
        return __awaiter(this, void 0, Promise, function () ***REMOVED***
            var userId, result;
            return __generator(this, function (_a) ***REMOVED***
                switch (_a.label) ***REMOVED***
                    case 0:
                        userId = extractUserId(user);
                        return [4 /*yield*/, this.getBannedUsers(channel, ***REMOVED*** userId: userId ***REMOVED***)];
                    case 1:
                        result = _a.sent();
                        return [2 /*return*/, result.data.some(function (ban) ***REMOVED*** return ban.userId === userId; ***REMOVED***)];
                ***REMOVED***
            ***REMOVED***);
        ***REMOVED***);
    ***REMOVED***;
    /**
     * Retrieves a list of ban events for a given channel.
     *
     * @param channel The channel to retrieve the ban events from.
     * @param filter Additional filters for the result set.
     */
    HelixModerationApi.prototype.getBanEvents = function (channel, filter) ***REMOVED***
        return __awaiter(this, void 0, Promise, function () ***REMOVED***
            var result;
            return __generator(this, function (_a) ***REMOVED***
                switch (_a.label) ***REMOVED***
                    case 0: return [4 /*yield*/, this._client.callApi(***REMOVED***
                            type: TwitchApiCallType.Helix,
                            url: 'moderation/banned/events',
                            scope: 'moderation:read',
                            query: __assign(***REMOVED*** broadcaster_id: extractUserId(channel), user_id: filter === null || filter === void 0 ? void 0 : filter.userId ***REMOVED***, makePaginationQuery(filter))
                        ***REMOVED***)];
                    case 1:
                        result = _a.sent();
                        return [2 /*return*/, createPaginatedResult(result, HelixBanEvent, this._client)];
                ***REMOVED***
            ***REMOVED***);
        ***REMOVED***);
    ***REMOVED***;
    /**
     * Creates a paginator for ban events for a given channel.
     *
     * @param channel The channel to retrieve the ban events from.
     */
    HelixModerationApi.prototype.getBanEventsPaginated = function (channel) ***REMOVED***
        var _this = this;
        return new HelixPaginatedRequest(***REMOVED***
            url: 'moderation/banned/events',
            scope: 'moderation:read',
            query: ***REMOVED***
                broadcaster_id: extractUserId(channel)
            ***REMOVED***
    ***REMOVED*** this._client, function (data) ***REMOVED*** return new HelixBanEvent(data, _this._client); ***REMOVED***);
    ***REMOVED***;
    /**
     * Retrieves a list of moderators in a given channel.
     *
     * @param channel The channel to retrieve moderators from.
     * @param filter Additional filters for the result set.
     */
    HelixModerationApi.prototype.getModerators = function (channel, filter) ***REMOVED***
        return __awaiter(this, void 0, Promise, function () ***REMOVED***
            var result;
            return __generator(this, function (_a) ***REMOVED***
                switch (_a.label) ***REMOVED***
                    case 0: return [4 /*yield*/, this._client.callApi(***REMOVED***
                            type: TwitchApiCallType.Helix,
                            url: 'moderation/moderators',
                            scope: 'moderation:read',
                            query: __assign(***REMOVED*** broadcaster_id: extractUserId(channel), user_id: filter === null || filter === void 0 ? void 0 : filter.userId ***REMOVED***, makePaginationQuery(filter))
                        ***REMOVED***)];
                    case 1:
                        result = _a.sent();
                        return [2 /*return*/, createPaginatedResult(result, HelixModerator, this._client)];
                ***REMOVED***
            ***REMOVED***);
        ***REMOVED***);
    ***REMOVED***;
    /**
     * Creates a paginator for moderators in a given channel.
     *
     * @param channel The channel to retrieve moderators from.
     */
    HelixModerationApi.prototype.getModeratorsPaginated = function (channel) ***REMOVED***
        var _this = this;
        return new HelixPaginatedRequest(***REMOVED***
            url: 'moderation/moderators',
            scope: 'moderation:read',
            query: ***REMOVED***
                broadcaster_id: extractUserId(channel)
            ***REMOVED***
    ***REMOVED*** this._client, function (data) ***REMOVED*** return new HelixModerator(data, _this._client); ***REMOVED***);
    ***REMOVED***;
    /**
     * Checks whether a given user is a moderator of a given channel.
     *
     * @param channel The channel to check.
     * @param user The user to check.
     */
    HelixModerationApi.prototype.checkUserMod = function (channel, user) ***REMOVED***
        return __awaiter(this, void 0, Promise, function () ***REMOVED***
            var userId, result;
            return __generator(this, function (_a) ***REMOVED***
                switch (_a.label) ***REMOVED***
                    case 0:
                        userId = extractUserId(user);
                        return [4 /*yield*/, this.getModerators(channel, ***REMOVED*** userId: userId ***REMOVED***)];
                    case 1:
                        result = _a.sent();
                        return [2 /*return*/, result.data.some(function (mod) ***REMOVED*** return mod.userId === userId; ***REMOVED***)];
                ***REMOVED***
            ***REMOVED***);
        ***REMOVED***);
    ***REMOVED***;
    /**
     * Retrieves a list of moderator events for a given channel.
     *
     * @param channel The channel to retrieve the moderator events from.
     * @param filter Additional filters for the result set.
     */
    HelixModerationApi.prototype.getModeratorEvents = function (channel, filter) ***REMOVED***
        return __awaiter(this, void 0, Promise, function () ***REMOVED***
            var result;
            return __generator(this, function (_a) ***REMOVED***
                switch (_a.label) ***REMOVED***
                    case 0: return [4 /*yield*/, this._client.callApi(***REMOVED***
                            type: TwitchApiCallType.Helix,
                            url: 'moderation/moderators/events',
                            scope: 'moderation:read',
                            query: __assign(***REMOVED*** broadcaster_id: extractUserId(channel), user_id: filter === null || filter === void 0 ? void 0 : filter.userId ***REMOVED***, makePaginationQuery(filter))
                        ***REMOVED***)];
                    case 1:
                        result = _a.sent();
                        return [2 /*return*/, createPaginatedResult(result, HelixModeratorEvent, this._client)];
                ***REMOVED***
            ***REMOVED***);
        ***REMOVED***);
    ***REMOVED***;
    /**
     * Creates a paginator for moderator events for a given channel.
     *
     * @param channel The channel to retrieve the moderator events from.
     */
    HelixModerationApi.prototype.getModeratorEventsPaginated = function (channel) ***REMOVED***
        var _this = this;
        return new HelixPaginatedRequest(***REMOVED***
            url: 'moderation/moderators/events',
            scope: 'moderation:read',
            query: ***REMOVED***
                broadcaster_id: extractUserId(channel)
            ***REMOVED***
    ***REMOVED*** this._client, function (data) ***REMOVED*** return new HelixModeratorEvent(data, _this._client); ***REMOVED***);
    ***REMOVED***;
    /**
     * Processes a message held by AutoMod.
     *
     * @param user The user who is processing the message.
     * @param msgId The ID of the message.
     * @param allow Whether to allow the message - `true` allows, and `false` denies.
     */
    HelixModerationApi.prototype.processHeldAutoModMessage = function (user, msgId, allow) ***REMOVED***
        return __awaiter(this, void 0, Promise, function () ***REMOVED***
            return __generator(this, function (_a) ***REMOVED***
                switch (_a.label) ***REMOVED***
                    case 0: return [4 /*yield*/, this._client.callApi(***REMOVED***
                            type: TwitchApiCallType.Helix,
                            url: 'moderation/automod/message',
                            method: 'POST',
                            scope: 'moderator:manage:automod',
                            jsonBody: ***REMOVED***
                                user_id: extractUserId(user),
                                msg_id: msgId,
                                action: allow ? 'ALLOW' : 'DENY'
                            ***REMOVED***
                        ***REMOVED***)];
                    case 1:
                        _a.sent();
                        return [2 /*return*/];
                ***REMOVED***
            ***REMOVED***);
        ***REMOVED***);
    ***REMOVED***;
    HelixModerationApi = __decorate([
        rtfm('twitch', 'HelixModerationApi')
    ], HelixModerationApi);
    return HelixModerationApi;
***REMOVED***(BaseApi));
export ***REMOVED*** HelixModerationApi ***REMOVED***;
