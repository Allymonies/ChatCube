import ***REMOVED*** __assign, __awaiter, __decorate, __extends, __generator ***REMOVED*** from "tslib";
import ***REMOVED*** TwitchApiCallType ***REMOVED*** from 'twitch-api-call';
import ***REMOVED*** extractUserId, rtfm ***REMOVED*** from 'twitch-common';
import ***REMOVED*** BaseApi ***REMOVED*** from "../../BaseApi.mjs";
import ***REMOVED*** HelixPaginatedRequest ***REMOVED*** from "../HelixPaginatedRequest.mjs";
import ***REMOVED*** createPaginatedResult ***REMOVED*** from "../HelixPaginatedResult.mjs";
import ***REMOVED*** HelixClip ***REMOVED*** from "./HelixClip.mjs";
/**
 * The Helix API methods that deal with clips.
 *
 * Can be accessed using `client.helix.clips` on an ***REMOVED***@ApiClient***REMOVED*** instance.
 *
 * ## Example
 * ```ts
 * const api = new ApiClient(new StaticAuthProvider(clientId, accessToken));
 * const clipId = await api.helix.clips.createClip(***REMOVED*** channelId: '125328655' ***REMOVED***);
 * ```
 */
var HelixClipApi = /** @class */ (function (_super) ***REMOVED***
    __extends(HelixClipApi, _super);
    function HelixClipApi() ***REMOVED***
        return _super !== null && _super.apply(this, arguments) || this;
    ***REMOVED***
    /**
     * Retrieves the latest clips for the specified broadcaster.
     *
     * @param user The broadcaster to fetch clips for.
     * @param filter
     *
     * @expandParams
     */
    HelixClipApi.prototype.getClipsForBroadcaster = function (user, filter) ***REMOVED***
        if (filter === void 0) ***REMOVED*** filter = ***REMOVED******REMOVED***; ***REMOVED***
        return __awaiter(this, void 0, Promise, function () ***REMOVED***
            return __generator(this, function (_a) ***REMOVED***
                return [2 /*return*/, this._getClips(__assign(__assign(***REMOVED******REMOVED***, filter), ***REMOVED*** filterType: 'broadcaster_id', ids: extractUserId(user) ***REMOVED***))];
            ***REMOVED***);
        ***REMOVED***);
    ***REMOVED***;
    /**
     * Creates a paginator for the latest clips for the specified broadcaster.
     *
     * @param user The broadcaster to fetch clips for.
     * @param filter
     *
     * @expandParams
     */
    HelixClipApi.prototype.getClipsForBroadcasterPaginated = function (user, filter) ***REMOVED***
        if (filter === void 0) ***REMOVED*** filter = ***REMOVED******REMOVED***; ***REMOVED***
        return this._getClipsPaginated(__assign(__assign(***REMOVED******REMOVED***, filter), ***REMOVED*** filterType: 'broadcaster_id', ids: extractUserId(user) ***REMOVED***));
    ***REMOVED***;
    /**
     * Retrieves the latest clips for the specified game.
     *
     * @param gameId The game ID.
     * @param filter
     *
     * @expandParams
     */
    HelixClipApi.prototype.getClipsForGame = function (gameId, filter) ***REMOVED***
        if (filter === void 0) ***REMOVED*** filter = ***REMOVED******REMOVED***; ***REMOVED***
        return __awaiter(this, void 0, Promise, function () ***REMOVED***
            return __generator(this, function (_a) ***REMOVED***
                return [2 /*return*/, this._getClips(__assign(__assign(***REMOVED******REMOVED***, filter), ***REMOVED*** filterType: 'game_id', ids: gameId ***REMOVED***))];
            ***REMOVED***);
        ***REMOVED***);
    ***REMOVED***;
    /**
     * Creates a paginator for the latest clips for the specified game.
     *
     * @param gameId The game ID.
     * @param filter
     *
     * @expandParams
     */
    HelixClipApi.prototype.getClipsForGamePaginated = function (gameId, filter) ***REMOVED***
        if (filter === void 0) ***REMOVED*** filter = ***REMOVED******REMOVED***; ***REMOVED***
        return this._getClipsPaginated(__assign(__assign(***REMOVED******REMOVED***, filter), ***REMOVED*** filterType: 'game_id', ids: gameId ***REMOVED***));
    ***REMOVED***;
    /**
     * Retrieves the clips identified by the given IDs.
     *
     * @param ids The clip IDs.
     */
    HelixClipApi.prototype.getClipsByIds = function (ids) ***REMOVED***
        return __awaiter(this, void 0, Promise, function () ***REMOVED***
            var result;
            return __generator(this, function (_a) ***REMOVED***
                switch (_a.label) ***REMOVED***
                    case 0: return [4 /*yield*/, this._getClips(***REMOVED***
                            filterType: 'id',
                            ids: ids
                        ***REMOVED***)];
                    case 1:
                        result = _a.sent();
                        return [2 /*return*/, result.data];
                ***REMOVED***
            ***REMOVED***);
        ***REMOVED***);
    ***REMOVED***;
    /**
     * Retrieves the clip identified by the given ID.
     *
     * @param id The clip ID.
     */
    HelixClipApi.prototype.getClipById = function (id) ***REMOVED***
        return __awaiter(this, void 0, Promise, function () ***REMOVED***
            var clips;
            return __generator(this, function (_a) ***REMOVED***
                switch (_a.label) ***REMOVED***
                    case 0: return [4 /*yield*/, this.getClipsByIds([id])];
                    case 1:
                        clips = _a.sent();
                        return [2 /*return*/, clips.length ? clips[0] : null];
                ***REMOVED***
            ***REMOVED***);
        ***REMOVED***);
    ***REMOVED***;
    /**
     * Creates a clip of a running stream.
     *
     * Returns the ID of the clip.
     *
     * @expandParams
     */
    HelixClipApi.prototype.createClip = function (params) ***REMOVED***
        return __awaiter(this, void 0, Promise, function () ***REMOVED***
            var channelId, _a, createAfterDelay, result;
            return __generator(this, function (_b) ***REMOVED***
                switch (_b.label) ***REMOVED***
                    case 0:
                        channelId = params.channelId, _a = params.createAfterDelay, createAfterDelay = _a === void 0 ? false : _a;
                        return [4 /*yield*/, this._client.callApi(***REMOVED***
                                type: TwitchApiCallType.Helix,
                                url: 'clips',
                                method: 'POST',
                                scope: 'clips:edit',
                                query: ***REMOVED***
                                    broadcaster_id: channelId,
                                    has_delay: createAfterDelay.toString()
                                ***REMOVED***
                            ***REMOVED***)];
                    case 1:
                        result = _b.sent();
                        return [2 /*return*/, result.data[0].id];
                ***REMOVED***
            ***REMOVED***);
        ***REMOVED***);
    ***REMOVED***;
    HelixClipApi.prototype._getClips = function (params) ***REMOVED***
        return __awaiter(this, void 0, Promise, function () ***REMOVED***
            var filterType, ids, startDate, endDate, _a, limit, result;
            var _b;
            return __generator(this, function (_c) ***REMOVED***
                switch (_c.label) ***REMOVED***
                    case 0:
                        filterType = params.filterType, ids = params.ids, startDate = params.startDate, endDate = params.endDate, _a = params.limit, limit = _a === void 0 ? 20 : _a;
                        if (!ids.length) ***REMOVED***
                            return [2 /*return*/, ***REMOVED*** data: [] ***REMOVED***];
                        ***REMOVED***
                        return [4 /*yield*/, this._client.callApi(***REMOVED***
                                type: TwitchApiCallType.Helix,
                                url: 'clips',
                                query: (_b = ***REMOVED******REMOVED***,
                                    _b[filterType] = ids,
                                    _b.started_at = startDate,
                                    _b.ended_at = endDate,
                                    _b.first = limit.toString(),
                                    _b)
                            ***REMOVED***)];
                    case 1:
                        result = _c.sent();
                        return [2 /*return*/, createPaginatedResult(result, HelixClip, this._client)];
                ***REMOVED***
            ***REMOVED***);
        ***REMOVED***);
    ***REMOVED***;
    HelixClipApi.prototype._getClipsPaginated = function (params) ***REMOVED***
        var _a;
        var _this = this;
        var filterType = params.filterType, ids = params.ids, startDate = params.startDate, endDate = params.endDate;
        return new HelixPaginatedRequest(***REMOVED***
            url: 'clips',
            query: (_a = ***REMOVED******REMOVED***,
                _a[filterType] = ids,
                _a.started_at = startDate,
                _a.ended_at = endDate,
                _a)
    ***REMOVED*** this._client, function (data) ***REMOVED*** return new HelixClip(data, _this._client); ***REMOVED***);
    ***REMOVED***;
    HelixClipApi = __decorate([
        rtfm('twitch', 'HelixClipApi')
    ], HelixClipApi);
    return HelixClipApi;
***REMOVED***(BaseApi));
export ***REMOVED*** HelixClipApi ***REMOVED***;
