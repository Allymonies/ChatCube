import ***REMOVED*** __assign, __awaiter, __decorate, __extends, __generator ***REMOVED*** from "tslib";
import ***REMOVED*** TwitchApiCallType ***REMOVED*** from 'twitch-api-call';
import ***REMOVED*** extractUserId, rtfm ***REMOVED*** from 'twitch-common';
import ***REMOVED*** BaseApi ***REMOVED*** from "../../BaseApi.mjs";
import ***REMOVED*** HelixPaginatedRequestWithTotal ***REMOVED*** from "../HelixPaginatedRequestWithTotal.mjs";
import ***REMOVED*** HelixWebHookSubscription ***REMOVED*** from "./HelixWebHookSubscription.mjs";
/**
 * The API methods that deal with WebHooks.
 *
 * Can be accessed using `client.helix.webHooks` on an ***REMOVED***@ApiClient***REMOVED*** instance.
 *
 * ## Before using these methods...
 *
 * All of the methods in this class assume that you are already running a working WebHook listener at the given callback URL.
 *
 * If you don't already have one, we recommend use of the `twitch-webhooks` library, which handles subscribing and unsubscribing to these topics automatically.
 *
 * ## Example
 * ```ts
 * const api = new ApiClient(new StaticAuthProvider(clientId, accessToken));
 * await api.helix.webHooks.subscribeToUserFollowsTo('125328655', ***REMOVED*** callbackUrl: 'https://example.com' ***REMOVED***);
 * ```
 */
var HelixWebHooksApi = /** @class */ (function (_super) ***REMOVED***
    __extends(HelixWebHooksApi, _super);
    function HelixWebHooksApi() ***REMOVED***
        return _super !== null && _super.apply(this, arguments) || this;
    ***REMOVED***
    // TODO rename to getSubscriptionsPaginated and make sync
    /**
     * Retrieves the current WebHook subscriptions for the current client.
     *
     * Requires an app access token to work; does not work with user tokens.
     */
    HelixWebHooksApi.prototype.getSubscriptions = function () ***REMOVED***
        return __awaiter(this, void 0, Promise, function () ***REMOVED***
            var _this = this;
            return __generator(this, function (_a) ***REMOVED***
                return [2 /*return*/, new HelixPaginatedRequestWithTotal(***REMOVED***
                        url: 'webhooks/subscriptions'
                ***REMOVED*** this._client, function (data) ***REMOVED*** return new HelixWebHookSubscription(data, _this._client); ***REMOVED***)];
            ***REMOVED***);
        ***REMOVED***);
    ***REMOVED***;
    /**
     * Sends an arbitrary request to subscribe to or unsubscribe from an event.
     *
     * @expandParams
     */
    HelixWebHooksApi.prototype.sendHubRequest = function (options) ***REMOVED***
        return __awaiter(this, void 0, Promise, function () ***REMOVED***
            var mode, callbackUrl, topicUrl, _a, validityInSeconds, secret, scope;
            return __generator(this, function (_b) ***REMOVED***
                switch (_b.label) ***REMOVED***
                    case 0:
                        mode = options.mode, callbackUrl = options.callbackUrl, topicUrl = options.topicUrl, _a = options.validityInSeconds, validityInSeconds = _a === void 0 ? 3600 : _a, secret = options.secret, scope = options.scope;
                        return [4 /*yield*/, this._client.callApi(***REMOVED***
                                url: 'webhooks/hub',
                                type: TwitchApiCallType.Helix,
                                method: 'POST',
                                scope: scope,
                                jsonBody: ***REMOVED***
                                    'hub.mode': mode,
                                    'hub.topic': topicUrl,
                                    'hub.callback': callbackUrl,
                                    'hub.lease_seconds': mode === 'subscribe' ? validityInSeconds.toString() : undefined,
                                    'hub.secret': secret
                                ***REMOVED***
                            ***REMOVED***)];
                    case 1:
                        _b.sent();
                        return [2 /*return*/];
                ***REMOVED***
            ***REMOVED***);
        ***REMOVED***);
    ***REMOVED***;
    /**
     * Subscribes to events representing a user following other users.
     *
     * @expandParams
     *
     * @param user The user for which to get notifications about the users they will follow.
     * @param options
     */
    HelixWebHooksApi.prototype.subscribeToUserFollowsFrom = function (user, options) ***REMOVED***
        return __awaiter(this, void 0, Promise, function () ***REMOVED***
            return __generator(this, function (_a) ***REMOVED***
                return [2 /*return*/, this._sendUserFollowsHubRequest('subscribe', 'from', user, options)];
            ***REMOVED***);
        ***REMOVED***);
    ***REMOVED***;
    /**
     * Subscribes to events representing a user being followed by other users.
     *
     * @expandParams
     *
     * @param user The user for which to get notifications about the users they will be followed by.
     * @param options
     */
    HelixWebHooksApi.prototype.subscribeToUserFollowsTo = function (user, options) ***REMOVED***
        return __awaiter(this, void 0, Promise, function () ***REMOVED***
            return __generator(this, function (_a) ***REMOVED***
                return [2 /*return*/, this._sendUserFollowsHubRequest('subscribe', 'to', user, options)];
            ***REMOVED***);
        ***REMOVED***);
    ***REMOVED***;
    /**
     * Unsubscribes from events representing a user following other users.
     *
     * @expandParams
     *
     * @param user The user for which to not get any more notifications about the users they will follow.
     * @param options
     */
    HelixWebHooksApi.prototype.unsubscribeFromUserFollowsFrom = function (user, options) ***REMOVED***
        return __awaiter(this, void 0, Promise, function () ***REMOVED***
            return __generator(this, function (_a) ***REMOVED***
                return [2 /*return*/, this._sendUserFollowsHubRequest('unsubscribe', 'from', user, options)];
            ***REMOVED***);
        ***REMOVED***);
    ***REMOVED***;
    /**
     * Subscribes to events representing a Hype Train progressing.
     *
     * @expandParams
     *
     * @param broadcasterId The broadcaster / channel for which to get notifications about Hype Train events.
     * @param options
     */
    HelixWebHooksApi.prototype.subscribeToHypeTrainEvents = function (broadcasterId, options) ***REMOVED***
        return __awaiter(this, void 0, Promise, function () ***REMOVED***
            return __generator(this, function (_a) ***REMOVED***
                return [2 /*return*/, this._sendHypeTrainEventHubRequest('subscribe', broadcasterId, options)];
            ***REMOVED***);
        ***REMOVED***);
    ***REMOVED***;
    /**
     * Unsubscribes from events representing a Hype Train progressing.
     *
     * @expandParams
     *
     * @param broadcasterId The broadcaster / channel for which to get notifications about Hype Train events.
     * @param options
     */
    HelixWebHooksApi.prototype.unsubscribeFromHypeTrainEvents = function (broadcasterId, options) ***REMOVED***
        return __awaiter(this, void 0, Promise, function () ***REMOVED***
            return __generator(this, function (_a) ***REMOVED***
                return [2 /*return*/, this._sendHypeTrainEventHubRequest('unsubscribe', broadcasterId, options)];
            ***REMOVED***);
        ***REMOVED***);
    ***REMOVED***;
    /**
     * Unsubscribes from events representing a user being followed by other users.
     *
     * @expandParams
     *
     * @param user The user for which to not get any more notifications about the users they will be followed by.
     * @param options
     */
    HelixWebHooksApi.prototype.unsubscribeFromUserFollowsTo = function (user, options) ***REMOVED***
        return __awaiter(this, void 0, Promise, function () ***REMOVED***
            return __generator(this, function (_a) ***REMOVED***
                return [2 /*return*/, this._sendUserFollowsHubRequest('unsubscribe', 'to', user, options)];
            ***REMOVED***);
        ***REMOVED***);
    ***REMOVED***;
    /**
     * Subscribes to events representing a stream changing, i.e. going live, offline or changing its title or category.
     *
     * @expandParams
     *
     * @param user The user for which to get notifications about their streams changing.
     * @param options
     */
    HelixWebHooksApi.prototype.subscribeToStreamChanges = function (user, options) ***REMOVED***
        return __awaiter(this, void 0, Promise, function () ***REMOVED***
            return __generator(this, function (_a) ***REMOVED***
                return [2 /*return*/, this._sendStreamChangeHubRequest('subscribe', user, options)];
            ***REMOVED***);
        ***REMOVED***);
    ***REMOVED***;
    /**
     * Unsubscribes from events representing a stream changing.
     *
     * @expandParams
     *
     * @param user The user for which not to get any more notifications about their streams changing.
     * @param options
     */
    HelixWebHooksApi.prototype.unsubscribeFromStreamChanges = function (user, options) ***REMOVED***
        return __awaiter(this, void 0, Promise, function () ***REMOVED***
            return __generator(this, function (_a) ***REMOVED***
                return [2 /*return*/, this._sendStreamChangeHubRequest('unsubscribe', user, options)];
            ***REMOVED***);
        ***REMOVED***);
    ***REMOVED***;
    /**
     * Subscribes to events representing a user changing a public setting or their email address.
     *
     * @expandParams
     *
     * @param user The user for which to get notifications about changing a setting.
     * @param options
     * @param withEmail Whether to subscribe to email address changes. This adds the necessary scope to read the email address to the request.
     */
    HelixWebHooksApi.prototype.subscribeToUserChanges = function (user, options, withEmail) ***REMOVED***
        if (withEmail === void 0) ***REMOVED*** withEmail = false; ***REMOVED***
        return __awaiter(this, void 0, Promise, function () ***REMOVED***
            return __generator(this, function (_a) ***REMOVED***
                return [2 /*return*/, this._sendUserChangeHubRequest('subscribe', user, options, withEmail)];
            ***REMOVED***);
        ***REMOVED***);
    ***REMOVED***;
    /**
     * Unsubscribes from events representing a user changing a public setting or their email address.
     *
     * @expandParams
     *
     * @param user The user for which not to get any more notifications about changing a setting.
     * @param options
     */
    HelixWebHooksApi.prototype.unsubscribeFromUserChanges = function (user, options) ***REMOVED***
        return __awaiter(this, void 0, Promise, function () ***REMOVED***
            return __generator(this, function (_a) ***REMOVED***
                return [2 /*return*/, this._sendUserChangeHubRequest('unsubscribe', user, options)];
            ***REMOVED***);
        ***REMOVED***);
    ***REMOVED***;
    /**
     * Subscribes to events representing the start or end of a channel subscription.
     *
     * @expandParams
     *
     * @param user The user for which to get notifications about subscriptions to their channel.
     * @param options
     */
    HelixWebHooksApi.prototype.subscribeToSubscriptionEvents = function (user, options) ***REMOVED***
        return __awaiter(this, void 0, Promise, function () ***REMOVED***
            return __generator(this, function (_a) ***REMOVED***
                return [2 /*return*/, this._sendSubscriptionEventsHubRequest('subscribe', user, options)];
            ***REMOVED***);
        ***REMOVED***);
    ***REMOVED***;
    /**
     * Unsubscribes from events representing the start or end of a channel subscription.
     *
     * @expandParams
     *
     * @param user The user for which not to get any more notifications about subscriptions and unsubscriptions to their channel.
     * @param options
     */
    HelixWebHooksApi.prototype.unsubscribeFromSubscriptionEvents = function (user, options) ***REMOVED***
        return __awaiter(this, void 0, Promise, function () ***REMOVED***
            return __generator(this, function (_a) ***REMOVED***
                return [2 /*return*/, this._sendSubscriptionEventsHubRequest('unsubscribe', user, options)];
            ***REMOVED***);
        ***REMOVED***);
    ***REMOVED***;
    /**
     * Subscribes to extension transactions.
     *
     * @expandParams
     *
     * @param extensionId The extension ID for which to get notifications about transactions.
     * @param options
     */
    HelixWebHooksApi.prototype.subscribeToExtensionTransactions = function (extensionId, options) ***REMOVED***
        return __awaiter(this, void 0, Promise, function () ***REMOVED***
            return __generator(this, function (_a) ***REMOVED***
                return [2 /*return*/, this._sendExtensionTransactionsHubRequest('subscribe', extensionId, options)];
            ***REMOVED***);
        ***REMOVED***);
    ***REMOVED***;
    /**
     * Unsubscribes from extension transactions.
     *
     * @expandParams
     *
     * @param extensionId The extension ID for which not to get any more notifications about transactions.
     * @param options
     */
    HelixWebHooksApi.prototype.unsubscribeFromExtensionTransactions = function (extensionId, options) ***REMOVED***
        return __awaiter(this, void 0, Promise, function () ***REMOVED***
            return __generator(this, function (_a) ***REMOVED***
                return [2 /*return*/, this._sendExtensionTransactionsHubRequest('unsubscribe', extensionId, options)];
            ***REMOVED***);
        ***REMOVED***);
    ***REMOVED***;
    /**
     * Subscribes to events representing a ban or unban.
     *
     * @expandParams
     *
     * @param broadcaster The broadcaster for which to get notifications about bans or unbans in their channel.
     * @param options
     */
    HelixWebHooksApi.prototype.subscribeToBanEvents = function (broadcaster, options) ***REMOVED***
        return __awaiter(this, void 0, Promise, function () ***REMOVED***
            return __generator(this, function (_a) ***REMOVED***
                return [2 /*return*/, this._sendBanEventsHubRequest('subscribe', broadcaster, options)];
            ***REMOVED***);
        ***REMOVED***);
    ***REMOVED***;
    /**
     * Unsubscribes from events representing a ban or unban.
     *
     * @expandParams
     *
     * @param broadcaster The broadcaster for which not to get any more notifications about bans or unbans in their channel.
     * @param options
     */
    HelixWebHooksApi.prototype.unsubscribeFromBanEvents = function (broadcaster, options) ***REMOVED***
        return __awaiter(this, void 0, Promise, function () ***REMOVED***
            return __generator(this, function (_a) ***REMOVED***
                return [2 /*return*/, this._sendBanEventsHubRequest('unsubscribe', broadcaster, options)];
            ***REMOVED***);
        ***REMOVED***);
    ***REMOVED***;
    /**
     * Subscribes to events representing a ban or unban.
     *
     * @expandParams
     *
     * @param broadcaster The broadcaster for which to get notifications about bans or unbans in their channel.
     * @param user The user that is being banned or unbanned.
     * @param options
     */
    HelixWebHooksApi.prototype.subscribeToBanEventsForUser = function (broadcaster, user, options) ***REMOVED***
        return __awaiter(this, void 0, Promise, function () ***REMOVED***
            return __generator(this, function (_a) ***REMOVED***
                return [2 /*return*/, this._sendBanEventsHubRequest('subscribe', broadcaster, options, user)];
            ***REMOVED***);
        ***REMOVED***);
    ***REMOVED***;
    /**
     * Unsubscribes from events representing a ban or unban.
     *
     * @expandParams
     *
     * @param broadcaster The broadcaster for which not to get any more notifications about bans or unbans in their channel.
     * @param user The user that is being banned or unbanned.
     * @param options
     */
    HelixWebHooksApi.prototype.unsubscribeFromBanEventsForUser = function (broadcaster, user, options) ***REMOVED***
        return __awaiter(this, void 0, Promise, function () ***REMOVED***
            return __generator(this, function (_a) ***REMOVED***
                return [2 /*return*/, this._sendBanEventsHubRequest('unsubscribe', broadcaster, options, user)];
            ***REMOVED***);
        ***REMOVED***);
    ***REMOVED***;
    /**
     * Subscribes to events representing a user gaining or losing moderator privileges in a channel.
     *
     * @expandParams
     *
     * @param broadcaster The broadcaster for which to get notifications about moderator changes in their channel.
     * @param options
     */
    HelixWebHooksApi.prototype.subscribeToModeratorEvents = function (broadcaster, options) ***REMOVED***
        return __awaiter(this, void 0, Promise, function () ***REMOVED***
            return __generator(this, function (_a) ***REMOVED***
                return [2 /*return*/, this._sendModeratorEventsHubRequest('subscribe', broadcaster, options)];
            ***REMOVED***);
        ***REMOVED***);
    ***REMOVED***;
    /**
     * Unsubscribes from events representing a user gaining or losing moderator privileges in a channel.
     *
     * @expandParams
     *
     * @param broadcaster The broadcaster for which not to get any more notifications about moderator changes in their channel.
     * @param options
     */
    HelixWebHooksApi.prototype.unsubscribeFromModeratorEvents = function (broadcaster, options) ***REMOVED***
        return __awaiter(this, void 0, Promise, function () ***REMOVED***
            return __generator(this, function (_a) ***REMOVED***
                return [2 /*return*/, this._sendModeratorEventsHubRequest('unsubscribe', broadcaster, options)];
            ***REMOVED***);
        ***REMOVED***);
    ***REMOVED***;
    /**
     * Subscribes to events representing a user gaining or losing moderator privileges in a channel.
     *
     * @expandParams
     *
     * @param broadcaster The broadcaster for which to get notifications about moderator changes in their channel.
     * @param user The user that is being modded or unmodded.
     * @param options
     */
    HelixWebHooksApi.prototype.subscribeToModeratorEventsForUser = function (broadcaster, user, options) ***REMOVED***
        return __awaiter(this, void 0, Promise, function () ***REMOVED***
            return __generator(this, function (_a) ***REMOVED***
                return [2 /*return*/, this._sendModeratorEventsHubRequest('subscribe', broadcaster, options, user)];
            ***REMOVED***);
        ***REMOVED***);
    ***REMOVED***;
    /**
     * Unsubscribes from events representing a user gaining or losing moderator privileges in a channel.
     *
     * @expandParams
     *
     * @param broadcaster The broadcaster for which not to get any more notifications about moderator changes in their channel.
     * @param user The user that is being modded or unmodded.
     * @param options
     */
    HelixWebHooksApi.prototype.unsubscribeFromModeratorEventsForUser = function (broadcaster, user, options) ***REMOVED***
        return __awaiter(this, void 0, Promise, function () ***REMOVED***
            return __generator(this, function (_a) ***REMOVED***
                return [2 /*return*/, this._sendModeratorEventsHubRequest('unsubscribe', broadcaster, options, user)];
            ***REMOVED***);
        ***REMOVED***);
    ***REMOVED***;
    HelixWebHooksApi.prototype._sendUserFollowsHubRequest = function (mode, direction, user, options) ***REMOVED***
        return __awaiter(this, void 0, void 0, function () ***REMOVED***
            var userId;
            return __generator(this, function (_a) ***REMOVED***
                userId = extractUserId(user);
                return [2 /*return*/, this.sendHubRequest(__assign(***REMOVED*** mode: mode, topicUrl: "https://api.twitch.tv/helix/users/follows?first=1&" + direction + "_id=" + userId ***REMOVED***, options))];
            ***REMOVED***);
        ***REMOVED***);
    ***REMOVED***;
    HelixWebHooksApi.prototype._sendHypeTrainEventHubRequest = function (mode, user, options) ***REMOVED***
        return __awaiter(this, void 0, void 0, function () ***REMOVED***
            var userId;
            return __generator(this, function (_a) ***REMOVED***
                userId = extractUserId(user);
                return [2 /*return*/, this.sendHubRequest(__assign(***REMOVED*** mode: mode, topicUrl: "https://api.twitch.tv/helix/hypetrain/events?broadcaster_id=" + userId + "&first=1", scope: 'channel:read:hype_train' ***REMOVED***, options))];
            ***REMOVED***);
        ***REMOVED***);
    ***REMOVED***;
    HelixWebHooksApi.prototype._sendStreamChangeHubRequest = function (mode, user, options) ***REMOVED***
        return __awaiter(this, void 0, void 0, function () ***REMOVED***
            var userId;
            return __generator(this, function (_a) ***REMOVED***
                userId = extractUserId(user);
                return [2 /*return*/, this.sendHubRequest(__assign(***REMOVED*** mode: mode, topicUrl: "https://api.twitch.tv/helix/streams?user_id=" + userId ***REMOVED***, options))];
            ***REMOVED***);
        ***REMOVED***);
    ***REMOVED***;
    HelixWebHooksApi.prototype._sendUserChangeHubRequest = function (mode, user, options, withEmail) ***REMOVED***
        if (withEmail === void 0) ***REMOVED*** withEmail = false; ***REMOVED***
        return __awaiter(this, void 0, void 0, function () ***REMOVED***
            var userId;
            return __generator(this, function (_a) ***REMOVED***
                userId = extractUserId(user);
                return [2 /*return*/, this.sendHubRequest(__assign(***REMOVED*** mode: mode, topicUrl: "https://api.twitch.tv/helix/users?id=" + userId, scope: withEmail ? 'user:read:email' : undefined ***REMOVED***, options))];
            ***REMOVED***);
        ***REMOVED***);
    ***REMOVED***;
    HelixWebHooksApi.prototype._sendSubscriptionEventsHubRequest = function (mode, user, options) ***REMOVED***
        return __awaiter(this, void 0, void 0, function () ***REMOVED***
            var userId;
            return __generator(this, function (_a) ***REMOVED***
                userId = extractUserId(user);
                return [2 /*return*/, this.sendHubRequest(__assign(***REMOVED*** mode: mode, topicUrl: "https://api.twitch.tv/helix/subscriptions/events?broadcaster_id=" + userId + "&first=1", scope: 'channel:read:subscriptions' ***REMOVED***, options))];
            ***REMOVED***);
        ***REMOVED***);
    ***REMOVED***;
    HelixWebHooksApi.prototype._sendExtensionTransactionsHubRequest = function (mode, extensionId, options) ***REMOVED***
        return __awaiter(this, void 0, void 0, function () ***REMOVED***
            return __generator(this, function (_a) ***REMOVED***
                return [2 /*return*/, this.sendHubRequest(__assign(***REMOVED*** mode: mode, topicUrl: "https://api.twitch.tv/helix/extensions/transactions?extension_id=" + extensionId + "&first=1" ***REMOVED***, options))];
            ***REMOVED***);
        ***REMOVED***);
    ***REMOVED***;
    HelixWebHooksApi.prototype._sendBanEventsHubRequest = function (mode, broadcaster, options, user) ***REMOVED***
        return __awaiter(this, void 0, void 0, function () ***REMOVED***
            var broadcasterId, topicUrl;
            return __generator(this, function (_a) ***REMOVED***
                broadcasterId = extractUserId(broadcaster);
                topicUrl = "https://api.twitch.tv/helix/moderation/banned/events?broadcaster_id=" + broadcasterId + "&first=1";
                if (user) ***REMOVED***
                    topicUrl += "&user_id=" + extractUserId(user);
                ***REMOVED***
                return [2 /*return*/, this.sendHubRequest(__assign(***REMOVED*** mode: mode,
                        topicUrl: topicUrl, scope: 'moderation:read' ***REMOVED***, options))];
            ***REMOVED***);
        ***REMOVED***);
    ***REMOVED***;
    HelixWebHooksApi.prototype._sendModeratorEventsHubRequest = function (mode, broadcaster, options, user) ***REMOVED***
        return __awaiter(this, void 0, void 0, function () ***REMOVED***
            var broadcasterId, topicUrl;
            return __generator(this, function (_a) ***REMOVED***
                broadcasterId = extractUserId(broadcaster);
                topicUrl = "https://api.twitch.tv/helix/moderation/moderators/events?broadcaster_id=" + broadcasterId + "&first=1";
                if (user) ***REMOVED***
                    topicUrl += "&user_id=" + extractUserId(user);
                ***REMOVED***
                return [2 /*return*/, this.sendHubRequest(__assign(***REMOVED*** mode: mode,
                        topicUrl: topicUrl, scope: 'moderation:read' ***REMOVED***, options))];
            ***REMOVED***);
        ***REMOVED***);
    ***REMOVED***;
    HelixWebHooksApi = __decorate([
        rtfm('twitch', 'HelixWebHooksApi')
    ], HelixWebHooksApi);
    return HelixWebHooksApi;
***REMOVED***(BaseApi));
export ***REMOVED*** HelixWebHooksApi ***REMOVED***;
