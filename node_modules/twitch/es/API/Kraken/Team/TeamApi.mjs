import ***REMOVED*** __awaiter, __decorate, __extends, __generator ***REMOVED*** from "tslib";
import ***REMOVED*** Cacheable, Cached ***REMOVED*** from '@d-fischer/cache-decorators';
import ***REMOVED*** rtfm ***REMOVED*** from 'twitch-common';
import ***REMOVED*** BaseApi ***REMOVED*** from "../../BaseApi.mjs";
import ***REMOVED*** Team ***REMOVED*** from "./Team.mjs";
import ***REMOVED*** TeamWithUsers ***REMOVED*** from "./TeamWithUsers.mjs";
/**
 * The API methods that deal with teams.
 *
 * Can be accessed using `client.kraken.teams` on an ***REMOVED***@ApiClient***REMOVED*** instance.
 *
 * ## Example
 * ```ts
 * const api = new ApiClient(new StaticAuthProvider(clientId, accessToken));
 * const team = await api.kraken.teams.getTeamByName('staff');
 * ```
 */
var TeamApi = /** @class */ (function (_super) ***REMOVED***
    __extends(TeamApi, _super);
    function TeamApi() ***REMOVED***
        return _super !== null && _super.apply(this, arguments) || this;
    ***REMOVED***
    /**
     * Get a list of teams.
     *
     * @param page The result page you want to retrieve.
     * @param limit The number of results you want to retrieve.
     */
    TeamApi.prototype.getTeams = function (page, limit) ***REMOVED***
        if (limit === void 0) ***REMOVED*** limit = 25; ***REMOVED***
        return __awaiter(this, void 0, Promise, function () ***REMOVED***
            var query, data;
            var _this = this;
            return __generator(this, function (_a) ***REMOVED***
                switch (_a.label) ***REMOVED***
                    case 0:
                        query = ***REMOVED******REMOVED***;
                        if (page) ***REMOVED***
                            query.offset = ((page - 1) * limit).toString();
                        ***REMOVED***
                        query.limit = limit.toString();
                        return [4 /*yield*/, this._client.callApi(***REMOVED***
                                url: 'teams',
                                query: query
                            ***REMOVED***)];
                    case 1:
                        data = _a.sent();
                        return [2 /*return*/, data.teams.map(function (teamData) ***REMOVED*** return new Team(teamData, _this._client); ***REMOVED***)];
                ***REMOVED***
            ***REMOVED***);
        ***REMOVED***);
    ***REMOVED***;
    /**
     * Retrieves the team data for the given team name.
     *
     * @param team The team name you want to look up.
     */
    TeamApi.prototype.getTeamByName = function (team) ***REMOVED***
        return __awaiter(this, void 0, Promise, function () ***REMOVED***
            var teamData;
            return __generator(this, function (_a) ***REMOVED***
                switch (_a.label) ***REMOVED***
                    case 0: return [4 /*yield*/, this._client.callApi(***REMOVED*** url: "teams/" + team ***REMOVED***)];
                    case 1:
                        teamData = _a.sent();
                        return [2 /*return*/, new TeamWithUsers(teamData, this._client)];
                ***REMOVED***
            ***REMOVED***);
        ***REMOVED***);
    ***REMOVED***;
    __decorate([
        Cached(3600)
    ], TeamApi.prototype, "getTeams", null);
    __decorate([
        Cached(3600)
    ], TeamApi.prototype, "getTeamByName", null);
    TeamApi = __decorate([
        Cacheable,
        rtfm('twitch', 'TeamApi')
    ], TeamApi);
    return TeamApi;
***REMOVED***(BaseApi));
export ***REMOVED*** TeamApi ***REMOVED***;
