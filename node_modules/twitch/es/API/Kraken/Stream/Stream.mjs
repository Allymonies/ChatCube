import ***REMOVED*** __decorate ***REMOVED*** from "tslib";
import ***REMOVED*** Enumerable ***REMOVED*** from '@d-fischer/shared-utils';
import ***REMOVED*** rtfm ***REMOVED*** from 'twitch-common';
import ***REMOVED*** Channel ***REMOVED*** from "../Channel/Channel.mjs";
/**
 * The type of a stream.
 */
export var StreamType;
(function (StreamType) ***REMOVED***
    /**
     * A live stream.
     */
    StreamType["Live"] = "live";
    /**
     * An upload to the channel (VoD) that is streamed live for the first time.
     */
    StreamType["Premiere"] = "premiere";
    /**
     * A rerun of a past live stream.
     */
    StreamType["ReRun"] = "rerun";
    /**
     * All types of streams. Used for filtering.
     */
    StreamType["All"] = "all";
***REMOVED***)(StreamType || (StreamType = ***REMOVED******REMOVED***));
/**
 * A Twitch stream.
 */
var Stream = /** @class */ (function () ***REMOVED***
    /** @private */
    function Stream(data, client) ***REMOVED***
        this._data = data;
        this._client = client;
    ***REMOVED***
    Object.defineProperty(Stream.prototype, "id", ***REMOVED***
        /**
         * The ID of the stream.
         */
        get: function () ***REMOVED***
            return this._data._id.toString();
    ***REMOVED***
        enumerable: false,
        configurable: true
    ***REMOVED***);
    Object.defineProperty(Stream.prototype, "game", ***REMOVED***
        /**
         * The game played on the stream.
         */
        get: function () ***REMOVED***
            return this._data.game;
    ***REMOVED***
        enumerable: false,
        configurable: true
    ***REMOVED***);
    Object.defineProperty(Stream.prototype, "viewers", ***REMOVED***
        /**
         * The current number of concurrent viewers.
         */
        get: function () ***REMOVED***
            return this._data.viewers;
    ***REMOVED***
        enumerable: false,
        configurable: true
    ***REMOVED***);
    Object.defineProperty(Stream.prototype, "videoHeight", ***REMOVED***
        /**
         * The height of the stream video.
         */
        get: function () ***REMOVED***
            return this._data.video_height;
    ***REMOVED***
        enumerable: false,
        configurable: true
    ***REMOVED***);
    Object.defineProperty(Stream.prototype, "averageFps", ***REMOVED***
        /**
         * The average FPS (frames per second) that are shown on the stream.
         */
        get: function () ***REMOVED***
            return this._data.average_fps;
    ***REMOVED***
        enumerable: false,
        configurable: true
    ***REMOVED***);
    Object.defineProperty(Stream.prototype, "averageFPS", ***REMOVED***
        /** @deprecated Use averageFps instead. */
        // eslint-disable-next-line @typescript-eslint/naming-convention
        get: function () ***REMOVED***
            return this._data.average_fps;
    ***REMOVED***
        enumerable: false,
        configurable: true
    ***REMOVED***);
    Object.defineProperty(Stream.prototype, "delay", ***REMOVED***
        /**
         * The delay of the stream, in seconds.
         */
        get: function () ***REMOVED***
            return this._data.delay;
    ***REMOVED***
        enumerable: false,
        configurable: true
    ***REMOVED***);
    Object.defineProperty(Stream.prototype, "startDate", ***REMOVED***
        /**
         * The time when the stream started.
         */
        get: function () ***REMOVED***
            return new Date(this._data.created_at);
    ***REMOVED***
        enumerable: false,
        configurable: true
    ***REMOVED***);
    Object.defineProperty(Stream.prototype, "isPlaylist", ***REMOVED***
        /**
         * Whether the stream is running a playlist.
         */
        get: function () ***REMOVED***
            return this._data.is_playlist;
    ***REMOVED***
        enumerable: false,
        configurable: true
    ***REMOVED***);
    Object.defineProperty(Stream.prototype, "type", ***REMOVED***
        /**
         * The type of the stream.
         */
        get: function () ***REMOVED***
            return this._data.stream_type;
    ***REMOVED***
        enumerable: false,
        configurable: true
    ***REMOVED***);
    /**
     * Gets the URL of a preview image for the stream.
     *
     * @param size The size of the image.
     */
    Stream.prototype.getPreviewUrl = function (size) ***REMOVED***
        return this._data.preview[size];
    ***REMOVED***;
    Object.defineProperty(Stream.prototype, "channel", ***REMOVED***
        /**
         * The channel where the stream is shown.
         */
        get: function () ***REMOVED***
            return new Channel(this._data.channel, this._client);
    ***REMOVED***
        enumerable: false,
        configurable: true
    ***REMOVED***);
    __decorate([
        Enumerable(false)
    ], Stream.prototype, "_data", void 0);
    __decorate([
        Enumerable(false)
    ], Stream.prototype, "_client", void 0);
    Stream = __decorate([
        rtfm('twitch', 'Stream', 'id')
    ], Stream);
    return Stream;
***REMOVED***());
export ***REMOVED*** Stream ***REMOVED***;
