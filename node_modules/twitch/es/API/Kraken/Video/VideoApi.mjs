import ***REMOVED*** __assign, __awaiter, __decorate, __extends, __generator ***REMOVED*** from "tslib";
import ***REMOVED*** TwitchApiCallType ***REMOVED*** from 'twitch-api-call';
import ***REMOVED*** extractUserId, rtfm ***REMOVED*** from 'twitch-common';
import ***REMOVED*** BaseApi ***REMOVED*** from "../../BaseApi.mjs";
import ***REMOVED*** CreatedVideo ***REMOVED*** from "./CreatedVideo.mjs";
import ***REMOVED*** Video ***REMOVED*** from "./Video.mjs";
/**
 * The API methods that deal with users.
 *
 * Can be accessed using `client.kraken.videos` on an ***REMOVED***@ApiClient***REMOVED*** instance.
 *
 * ## Example
 * ```ts
 * const api = new ApiClient(new StaticAuthProvider(clientId, accessToken));
 * const user = await api.kraken.videos.getVideo('85448040');
 * ```
 */
var VideoApi = /** @class */ (function (_super) ***REMOVED***
    __extends(VideoApi, _super);
    function VideoApi() ***REMOVED***
        return _super !== null && _super.apply(this, arguments) || this;
    ***REMOVED***
    /**
     * Retrieves a video by ID.
     *
     * @param id The ID of the video.
     */
    VideoApi.prototype.getVideo = function (id) ***REMOVED***
        return __awaiter(this, void 0, Promise, function () ***REMOVED***
            var data;
            return __generator(this, function (_a) ***REMOVED***
                switch (_a.label) ***REMOVED***
                    case 0: return [4 /*yield*/, this._client.callApi(***REMOVED*** url: "videos/" + id ***REMOVED***)];
                    case 1:
                        data = _a.sent();
                        return [2 /*return*/, new Video(data, this._client)];
                ***REMOVED***
            ***REMOVED***);
        ***REMOVED***);
    ***REMOVED***;
    /**
     * Retrieves the top videos.
     *
     * @param game Show only videos of a certain game.
     * @param searchPeriod Show only videos from a certain time period.
     * @param type Show only videos of a certain type.
     * @param languageCode Show only videos in a certain language.
     * @param sort Sort the videos by specified criteria.
     * @param page The result page you want to retrieve.
     * @param limit The number of results you want to retrieve.
     */
    VideoApi.prototype.getTopVideos = function (game, searchPeriod, type, languageCode, sort, page, limit) ***REMOVED***
        if (limit === void 0) ***REMOVED*** limit = 10; ***REMOVED***
        return __awaiter(this, void 0, Promise, function () ***REMOVED***
            var query, data;
            var _this = this;
            return __generator(this, function (_a) ***REMOVED***
                switch (_a.label) ***REMOVED***
                    case 0:
                        query = ***REMOVED***
                            limit: limit.toString(),
                            game: game,
                            period: searchPeriod,
                            broadcast_type: type,
                            language: languageCode,
                            sort: sort,
                            offset: page ? ((page - 1) * limit).toString() : undefined
                        ***REMOVED***;
                        return [4 /*yield*/, this._client.callApi(***REMOVED*** url: 'videos/top', query: query ***REMOVED***)];
                    case 1:
                        data = _a.sent();
                        return [2 /*return*/, data.vods.map(function (vod) ***REMOVED*** return new Video(vod, _this._client); ***REMOVED***)];
                ***REMOVED***
            ***REMOVED***);
        ***REMOVED***);
    ***REMOVED***;
    /**
     * Retrieves the videos from channels followed by the authenticated user.
     *
     * @param type Show only videos of a certain type.
     * @param languageCode Show only videos in a certain language.
     * @param sort Sort the videos by specified criteria.
     * @param page The result page you want to retrieve.
     * @param limit The number of results you want to retrieve.
     */
    VideoApi.prototype.getFollowedVideos = function (type, languageCode, sort, page, limit) ***REMOVED***
        if (limit === void 0) ***REMOVED*** limit = 10; ***REMOVED***
        return __awaiter(this, void 0, Promise, function () ***REMOVED***
            var query, data;
            var _this = this;
            return __generator(this, function (_a) ***REMOVED***
                switch (_a.label) ***REMOVED***
                    case 0:
                        query = ***REMOVED***
                            limit: limit.toString(),
                            broadcast_type: type,
                            language: languageCode,
                            sort: sort,
                            offset: page ? ((page - 1) * limit).toString() : undefined
                        ***REMOVED***;
                        return [4 /*yield*/, this._client.callApi(***REMOVED*** url: 'videos/followed', query: query ***REMOVED***)];
                    case 1:
                        data = _a.sent();
                        return [2 /*return*/, data.vods.map(function (vod) ***REMOVED*** return new Video(vod, _this._client); ***REMOVED***)];
                ***REMOVED***
            ***REMOVED***);
        ***REMOVED***);
    ***REMOVED***;
    /**
     * Creates a new video.
     *
     * @param channel The channel to upload the video to.
     * @param createData The data for the video.
     */
    VideoApi.prototype.createVideo = function (channel, createData) ***REMOVED***
        return __awaiter(this, void 0, Promise, function () ***REMOVED***
            var channelId, data;
            return __generator(this, function (_a) ***REMOVED***
                switch (_a.label) ***REMOVED***
                    case 0:
                        channelId = extractUserId(channel);
                        return [4 /*yield*/, this._client.callApi(***REMOVED***
                                url: 'videos',
                                method: 'POST',
                                scope: 'channel_editor',
                                query: __assign(***REMOVED*** channel_id: channelId ***REMOVED***, createData)
                            ***REMOVED***)];
                    case 1:
                        data = _a.sent();
                        return [2 /*return*/, new CreatedVideo(data, this._client)];
                ***REMOVED***
            ***REMOVED***);
        ***REMOVED***);
    ***REMOVED***;
    /**
     * Completes a video upload.
     *
     * @param id The ID of the video.
     * @param token The upload token.
     */
    VideoApi.prototype.completeVideoUpload = function (id, token) ***REMOVED***
        return __awaiter(this, void 0, Promise, function () ***REMOVED***
            return __generator(this, function (_a) ***REMOVED***
                switch (_a.label) ***REMOVED***
                    case 0: return [4 /*yield*/, this._client.callApi(***REMOVED***
                            url: "https://uploads.twitch.tv/upload/" + id + "/complete",
                            type: TwitchApiCallType.Custom,
                            method: 'POST',
                            auth: false,
                            query: ***REMOVED***
                                upload_token: token
                            ***REMOVED***
                        ***REMOVED***)];
                    case 1:
                        _a.sent();
                        return [2 /*return*/];
                ***REMOVED***
            ***REMOVED***);
        ***REMOVED***);
    ***REMOVED***;
    /**
     * Updates an already uploaded video.
     *
     * @param id The ID of the video.
     * @param updateData The data to change for the video.
     */
    VideoApi.prototype.updateVideo = function (id, updateData) ***REMOVED***
        return __awaiter(this, void 0, Promise, function () ***REMOVED***
            return __generator(this, function (_a) ***REMOVED***
                switch (_a.label) ***REMOVED***
                    case 0: return [4 /*yield*/, this._client.callApi(***REMOVED***
                            url: "videos/" + id,
                            method: 'PUT',
                            scope: 'channel_editor',
                            jsonBody: updateData
                        ***REMOVED***)];
                    case 1:
                        _a.sent();
                        return [2 /*return*/];
                ***REMOVED***
            ***REMOVED***);
        ***REMOVED***);
    ***REMOVED***;
    /**
     * Deletes a video.
     *
     * @param id The ID of the video.
     */
    VideoApi.prototype.deleteVideo = function (id) ***REMOVED***
        return __awaiter(this, void 0, Promise, function () ***REMOVED***
            return __generator(this, function (_a) ***REMOVED***
                switch (_a.label) ***REMOVED***
                    case 0: return [4 /*yield*/, this._client.callApi(***REMOVED***
                            url: "videos/" + id,
                            method: 'DELETE',
                            scope: 'channel_editor'
                        ***REMOVED***)];
                    case 1:
                        _a.sent();
                        return [2 /*return*/];
                ***REMOVED***
            ***REMOVED***);
        ***REMOVED***);
    ***REMOVED***;
    VideoApi = __decorate([
        rtfm('twitch', 'VideoApi')
    ], VideoApi);
    return VideoApi;
***REMOVED***(BaseApi));
export ***REMOVED*** VideoApi ***REMOVED***;
