import ***REMOVED*** __awaiter, __decorate, __generator ***REMOVED*** from "tslib";
import ***REMOVED*** Enumerable ***REMOVED*** from '@d-fischer/shared-utils';
import ***REMOVED*** rtfm ***REMOVED*** from 'twitch-common';
/**
 * Information about a user's chat appearance and privileges.
 */
var UserChatInfo = /** @class */ (function () ***REMOVED***
    /** @private */
    function UserChatInfo(data, client) ***REMOVED***
        this._data = data;
        this._client = client;
    ***REMOVED***
    Object.defineProperty(UserChatInfo.prototype, "userId", ***REMOVED***
        /**
         * The ID of the user.
         */
        get: function () ***REMOVED***
            return this._data._id;
    ***REMOVED***
        enumerable: false,
        configurable: true
    ***REMOVED***);
    /**
     * Retrieves more information about the user.
     */
    UserChatInfo.prototype.getUser = function () ***REMOVED***
        return __awaiter(this, void 0, Promise, function () ***REMOVED***
            return __generator(this, function (_a) ***REMOVED***
                return [2 /*return*/, this._client.kraken.users.getUser(this._data._id)];
            ***REMOVED***);
        ***REMOVED***);
    ***REMOVED***;
    Object.defineProperty(UserChatInfo.prototype, "userName", ***REMOVED***
        /**
         * The name of the user.
         */
        get: function () ***REMOVED***
            return this._data.login;
    ***REMOVED***
        enumerable: false,
        configurable: true
    ***REMOVED***);
    Object.defineProperty(UserChatInfo.prototype, "displayName", ***REMOVED***
        /**
         * The display name of the user.
         */
        get: function () ***REMOVED***
            return this._data.display_name;
    ***REMOVED***
        enumerable: false,
        configurable: true
    ***REMOVED***);
    Object.defineProperty(UserChatInfo.prototype, "color", ***REMOVED***
        /**
         * The color that the user appears in in chat.
         */
        get: function () ***REMOVED***
            return this._data.color;
    ***REMOVED***
        enumerable: false,
        configurable: true
    ***REMOVED***);
    Object.defineProperty(UserChatInfo.prototype, "isKnownBot", ***REMOVED***
        /**
         * Whether the user is a known bot.
         */
        get: function () ***REMOVED***
            return this._data.is_known_bot;
    ***REMOVED***
        enumerable: false,
        configurable: true
    ***REMOVED***);
    Object.defineProperty(UserChatInfo.prototype, "isVerifiedBot", ***REMOVED***
        /**
         * Whether the user is a verified bot.
         */
        get: function () ***REMOVED***
            return this._data.is_verified_bot;
    ***REMOVED***
        enumerable: false,
        configurable: true
    ***REMOVED***);
    Object.defineProperty(UserChatInfo.prototype, "isAtLeastKnownBot", ***REMOVED***
        /**
         * Whether the user is at least a known bot (i.e. known or verified).
         */
        get: function () ***REMOVED***
            return this._data.is_known_bot || this._data.is_verified_bot;
    ***REMOVED***
        enumerable: false,
        configurable: true
    ***REMOVED***);
    /**
     * Checks whether the user has access to a given global badge.
     *
     * @param id The ID of a badge.
     */
    UserChatInfo.prototype.hasBadge = function (id) ***REMOVED***
        return this._data.badges.some(function (badge) ***REMOVED*** return badge.id === id; ***REMOVED***);
    ***REMOVED***;
    __decorate([
        Enumerable(false)
    ], UserChatInfo.prototype, "_data", void 0);
    __decorate([
        Enumerable(false)
    ], UserChatInfo.prototype, "_client", void 0);
    UserChatInfo = __decorate([
        rtfm('twitch-chat-client', 'UserChatInfo', 'userId')
    ], UserChatInfo);
    return UserChatInfo;
***REMOVED***());
export ***REMOVED*** UserChatInfo ***REMOVED***;
