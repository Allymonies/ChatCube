'use strict';

var hasSymbols = typeof Symbol === 'function' && typeof Symbol.iterator === 'symbol';

var isPrimitive = require('./helpers/isPrimitive');
var isCallable = require('is-callable');
var isDate = require('is-date-object');
var isSymbol = require('is-symbol');

var ordinaryToPrimitive = function OrdinaryToPrimitive(O, hint) ***REMOVED***
	if (typeof O === 'undefined' || O === null) ***REMOVED***
		throw new TypeError('Cannot call method on ' + O);
	***REMOVED***
	if (typeof hint !== 'string' || (hint !== 'number' && hint !== 'string')) ***REMOVED***
		throw new TypeError('hint must be "string" or "number"');
	***REMOVED***
	var methodNames = hint === 'string' ? ['toString', 'valueOf'] : ['valueOf', 'toString'];
	var method, result, i;
	for (i = 0; i < methodNames.length; ++i) ***REMOVED***
		method = O[methodNames[i]];
		if (isCallable(method)) ***REMOVED***
			result = method.call(O);
			if (isPrimitive(result)) ***REMOVED***
				return result;
			***REMOVED***
		***REMOVED***
	***REMOVED***
	throw new TypeError('No default value');
***REMOVED***;

var GetMethod = function GetMethod(O, P) ***REMOVED***
	var func = O[P];
	if (func !== null && typeof func !== 'undefined') ***REMOVED***
		if (!isCallable(func)) ***REMOVED***
			throw new TypeError(func + ' returned for property ' + P + ' of object ' + O + ' is not a function');
		***REMOVED***
		return func;
	***REMOVED***
	return void 0;
***REMOVED***;

// http://www.ecma-international.org/ecma-262/6.0/#sec-toprimitive
module.exports = function ToPrimitive(input) ***REMOVED***
	if (isPrimitive(input)) ***REMOVED***
		return input;
	***REMOVED***
	var hint = 'default';
	if (arguments.length > 1) ***REMOVED***
		if (arguments[1] === String) ***REMOVED***
			hint = 'string';
		***REMOVED*** else if (arguments[1] === Number) ***REMOVED***
			hint = 'number';
		***REMOVED***
	***REMOVED***

	var exoticToPrim;
	if (hasSymbols) ***REMOVED***
		if (Symbol.toPrimitive) ***REMOVED***
			exoticToPrim = GetMethod(input, Symbol.toPrimitive);
		***REMOVED*** else if (isSymbol(input)) ***REMOVED***
			exoticToPrim = Symbol.prototype.valueOf;
		***REMOVED***
	***REMOVED***
	if (typeof exoticToPrim !== 'undefined') ***REMOVED***
		var result = exoticToPrim.call(input, hint);
		if (isPrimitive(result)) ***REMOVED***
			return result;
		***REMOVED***
		throw new TypeError('unable to convert exotic object to primitive');
	***REMOVED***
	if (hint === 'default' && (isDate(input) || isSymbol(input))) ***REMOVED***
		hint = 'string';
	***REMOVED***
	return ordinaryToPrimitive(input, hint === 'default' ? 'number' : hint);
***REMOVED***;
