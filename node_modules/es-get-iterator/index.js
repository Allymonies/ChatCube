'use strict';

/* eslint global-require: 0 */
// the code is structured this way so that bundlers can
// alias out `has-symbols` to `() => true` or `() => false` if your target
// environments' Symbol capabilities are known, and then use
// dead code elimination on the rest of this module.
//
// Similarly, `isarray` can be aliased to `Array.isArray` if
// available in all target environments.

var isArguments = require('is-arguments');

if (require('has-symbols')() || require('has-symbols/shams')()) ***REMOVED***
	var $iterator = Symbol.iterator;
	// Symbol is available natively or shammed
	// natively:
	//  - Chrome >= 38
	//  - Edge 12-14?, Edge >= 15 for sure
	//  - FF >= 36
	//  - Safari >= 9
	//  - node >= 0.12
	module.exports = function getIterator(iterable) ***REMOVED***
		// alternatively, `iterable[$iterator]?.()`
		if (iterable != null && typeof iterable[$iterator] !== 'undefined') ***REMOVED***
			return iterable[$iterator]();
		***REMOVED***
		if (isArguments(iterable)) ***REMOVED***
			// arguments objects lack Symbol.iterator
			// - node 0.12
			return Array.prototype[$iterator].call(iterable);
		***REMOVED***
	***REMOVED***;
***REMOVED*** else ***REMOVED***
	// Symbol is not available, native or shammed
	var isArray = require('isarray');
	var isString = require('is-string');
	var GetIntrinsic = require('get-intrinsic');
	var $Map = GetIntrinsic('%Map%', true);
	var $Set = GetIntrinsic('%Set%', true);
	var callBound = require('call-bind/callBound');
	var $arrayPush = callBound('Array.prototype.push');
	var $charCodeAt = callBound('String.prototype.charCodeAt');
	var $stringSlice = callBound('String.prototype.slice');

	var advanceStringIndex = function advanceStringIndex(S, index) ***REMOVED***
		var length = S.length;
		if ((index + 1) >= length) ***REMOVED***
			return index + 1;
		***REMOVED***

		var first = $charCodeAt(S, index);
		if (first < 0xD800 || first > 0xDBFF) ***REMOVED***
			return index + 1;
		***REMOVED***

		var second = $charCodeAt(S, index + 1);
		if (second < 0xDC00 || second > 0xDFFF) ***REMOVED***
			return index + 1;
		***REMOVED***

		return index + 2;
	***REMOVED***;

	var getArrayIterator = function getArrayIterator(arraylike) ***REMOVED***
		var i = 0;
		return ***REMOVED***
			next: function next() ***REMOVED***
				var done = i >= arraylike.length;
				var value;
				if (!done) ***REMOVED***
					value = arraylike[i];
					i += 1;
				***REMOVED***
				return ***REMOVED***
					done: done,
					value: value
				***REMOVED***;
			***REMOVED***
		***REMOVED***;
	***REMOVED***;

	var getNonCollectionIterator = function getNonCollectionIterator(iterable, noPrimordialCollections) ***REMOVED***
		if (isArray(iterable) || isArguments(iterable)) ***REMOVED***
			return getArrayIterator(iterable);
		***REMOVED***
		if (isString(iterable)) ***REMOVED***
			var i = 0;
			return ***REMOVED***
				next: function next() ***REMOVED***
					var nextIndex = advanceStringIndex(iterable, i);
					var value = $stringSlice(iterable, i, nextIndex);
					i = nextIndex;
					return ***REMOVED***
						done: nextIndex > iterable.length,
						value: value
					***REMOVED***;
				***REMOVED***
			***REMOVED***;
		***REMOVED***

		// es6-shim and es-shims' es-map use a string "_es6-shim iterator_" property on different iterables, such as MapIterator.
		if (noPrimordialCollections && typeof iterable['_es6-shim iterator_'] !== 'undefined') ***REMOVED***
			return iterable['_es6-shim iterator_']();
		***REMOVED***
	***REMOVED***;

	if (!$Map && !$Set) ***REMOVED***
		// the only language iterables are Array, String, arguments
		// - Safari <= 6.0
		// - Chrome < 38
		// - node < 0.12
		// - FF < 13
		// - IE < 11
		// - Edge < 11

		module.exports = function getIterator(iterable) ***REMOVED***
			if (iterable != null) ***REMOVED***
				return getNonCollectionIterator(iterable, true);
			***REMOVED***
		***REMOVED***;
	***REMOVED*** else ***REMOVED***
		// either Map or Set are available, but Symbol is not
		// - es6-shim on an ES5 browser
		// - Safari 6.2 (maybe 6.1?)
		// - FF v[13, 36)
		// - IE 11
		// - Edge 11
		// - Safari v[6, 9)

		var isMap = require('is-map');
		var isSet = require('is-set');

		// Firefox >= 27, IE 11, Safari 6.2 - 9, Edge 11, es6-shim in older envs, all have forEach
		var $mapForEach = callBound('Map.prototype.forEach', true);
		var $setForEach = callBound('Set.prototype.forEach', true);
		if (typeof process === 'undefined' || !process.versions || !process.versions.node) ***REMOVED*** // "if is not node"

			// Firefox 17 - 26 has `.iterator()`, whose iterator `.next()` either
			// returns a value, or throws a StopIteration object. These browsers
			// do not have any other mechanism for iteration.
			var $mapIterator = callBound('Map.prototype.iterator', true);
			var $setIterator = callBound('Set.prototype.iterator', true);
			var getStopIterationIterator = function (iterator) ***REMOVED***
				var done = false;
				return ***REMOVED***
					next: function next() ***REMOVED***
						try ***REMOVED***
							return ***REMOVED***
								done: done,
								value: done ? undefined : iterator.next()
							***REMOVED***;
						***REMOVED*** catch (e) ***REMOVED***
							done = true;
							return ***REMOVED***
								done: true,
								value: undefined
							***REMOVED***;
						***REMOVED***
					***REMOVED***
				***REMOVED***;
			***REMOVED***;
		***REMOVED***
		// Firefox 27-35, and some older es6-shim versions, use a string "@@iterator" property
		// this returns a proper iterator object, so we should use it instead of forEach.
		// newer es6-shim versions use a string "_es6-shim iterator_" property.
		var $mapAtAtIterator = callBound('Map.prototype.@@iterator', true) || callBound('Map.prototype._es6-shim iterator_', true);
		var $setAtAtIterator = callBound('Set.prototype.@@iterator', true) || callBound('Set.prototype._es6-shim iterator_', true);

		var getCollectionIterator = function getCollectionIterator(iterable) ***REMOVED***
			if (isMap(iterable)) ***REMOVED***
				if ($mapIterator) ***REMOVED***
					return getStopIterationIterator($mapIterator(iterable));
				***REMOVED***
				if ($mapAtAtIterator) ***REMOVED***
					return $mapAtAtIterator(iterable);
				***REMOVED***
				if ($mapForEach) ***REMOVED***
					var entries = [];
					$mapForEach(iterable, function (v, k) ***REMOVED***
						$arrayPush(entries, [k, v]);
					***REMOVED***);
					return getArrayIterator(entries);
				***REMOVED***
			***REMOVED***
			if (isSet(iterable)) ***REMOVED***
				if ($setIterator) ***REMOVED***
					return getStopIterationIterator($setIterator(iterable));
				***REMOVED***
				if ($setAtAtIterator) ***REMOVED***
					return $setAtAtIterator(iterable);
				***REMOVED***
				if ($setForEach) ***REMOVED***
					var values = [];
					$setForEach(iterable, function (v) ***REMOVED***
						$arrayPush(values, v);
					***REMOVED***);
					return getArrayIterator(values);
				***REMOVED***
			***REMOVED***
		***REMOVED***;

		module.exports = function getIterator(iterable) ***REMOVED***
			return getCollectionIterator(iterable) || getNonCollectionIterator(iterable);
		***REMOVED***;
	***REMOVED***
***REMOVED***
