'use strict';

/**
 * Checks if a status code is allowed in a close frame.
 *
 * @param ***REMOVED***Number***REMOVED*** code The status code
 * @return ***REMOVED***Boolean***REMOVED*** `true` if the status code is valid, else `false`
 * @public
 */
function isValidStatusCode(code) ***REMOVED***
  return (
    (code >= 1000 &&
      code <= 1014 &&
      code !== 1004 &&
      code !== 1005 &&
      code !== 1006) ||
    (code >= 3000 && code <= 4999)
  );
***REMOVED***

/**
 * Checks if a given buffer contains only correct UTF-8.
 * Ported from https://www.cl.cam.ac.uk/%7Emgk25/ucs/utf8_check.c by
 * Markus Kuhn.
 *
 * @param ***REMOVED***Buffer***REMOVED*** buf The buffer to check
 * @return ***REMOVED***Boolean***REMOVED*** `true` if `buf` contains only correct UTF-8, else `false`
 * @public
 */
function _isValidUTF8(buf) ***REMOVED***
  const len = buf.length;
  let i = 0;

  while (i < len) ***REMOVED***
    if ((buf[i] & 0x80) === 0) ***REMOVED***
      // 0xxxxxxx
      i++;
    ***REMOVED*** else if ((buf[i] & 0xe0) === 0xc0) ***REMOVED***
      // 110xxxxx 10xxxxxx
      if (
        i + 1 === len ||
        (buf[i + 1] & 0xc0) !== 0x80 ||
        (buf[i] & 0xfe) === 0xc0 // Overlong
      ) ***REMOVED***
        return false;
      ***REMOVED***

      i += 2;
    ***REMOVED*** else if ((buf[i] & 0xf0) === 0xe0) ***REMOVED***
      // 1110xxxx 10xxxxxx 10xxxxxx
      if (
        i + 2 >= len ||
        (buf[i + 1] & 0xc0) !== 0x80 ||
        (buf[i + 2] & 0xc0) !== 0x80 ||
        (buf[i] === 0xe0 && (buf[i + 1] & 0xe0) === 0x80) || // Overlong
        (buf[i] === 0xed && (buf[i + 1] & 0xe0) === 0xa0) // Surrogate (U+D800 - U+DFFF)
      ) ***REMOVED***
        return false;
      ***REMOVED***

      i += 3;
    ***REMOVED*** else if ((buf[i] & 0xf8) === 0xf0) ***REMOVED***
      // 11110xxx 10xxxxxx 10xxxxxx 10xxxxxx
      if (
        i + 3 >= len ||
        (buf[i + 1] & 0xc0) !== 0x80 ||
        (buf[i + 2] & 0xc0) !== 0x80 ||
        (buf[i + 3] & 0xc0) !== 0x80 ||
        (buf[i] === 0xf0 && (buf[i + 1] & 0xf0) === 0x80) || // Overlong
        (buf[i] === 0xf4 && buf[i + 1] > 0x8f) ||
        buf[i] > 0xf4 // > U+10FFFF
      ) ***REMOVED***
        return false;
      ***REMOVED***

      i += 4;
    ***REMOVED*** else ***REMOVED***
      return false;
    ***REMOVED***
  ***REMOVED***

  return true;
***REMOVED***

try ***REMOVED***
  let isValidUTF8 = require('utf-8-validate');

  /* istanbul ignore if */
  if (typeof isValidUTF8 === 'object') ***REMOVED***
    isValidUTF8 = isValidUTF8.Validation.isValidUTF8; // utf-8-validate@<3.0.0
  ***REMOVED***

  module.exports = ***REMOVED***
    isValidStatusCode,
    isValidUTF8(buf) ***REMOVED***
      return buf.length < 150 ? _isValidUTF8(buf) : isValidUTF8(buf);
    ***REMOVED***
  ***REMOVED***;
***REMOVED*** catch (e) /* istanbul ignore next */ ***REMOVED***
  module.exports = ***REMOVED***
    isValidStatusCode,
    isValidUTF8: _isValidUTF8
  ***REMOVED***;
***REMOVED***
