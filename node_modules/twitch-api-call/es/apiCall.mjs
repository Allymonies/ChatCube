/// <reference lib="dom" />
import ***REMOVED*** __assign, __awaiter, __generator ***REMOVED*** from "tslib";
import fetch, ***REMOVED*** Headers ***REMOVED*** from '@d-fischer/cross-fetch';
import ***REMOVED*** stringify ***REMOVED*** from '@d-fischer/qs';
import ***REMOVED*** transformTwitchApiResponse ***REMOVED*** from "./helpers/transform.mjs";
import ***REMOVED*** getTwitchApiUrl ***REMOVED*** from "./helpers/url.mjs";
import ***REMOVED*** TwitchApiCallType ***REMOVED*** from "./TwitchApiCallOptions.mjs";
/**
 * Makes a call to the Twitch API using the given credentials, returning the raw Response object.
 *
 * @param options
 * @param clientId
 * @param accessToken
 * @param fetchOptions
 */
export function callTwitchApiRaw(options, clientId, accessToken, fetchOptions) ***REMOVED***
    var _a;
    if (fetchOptions === void 0) ***REMOVED*** fetchOptions = ***REMOVED******REMOVED***; ***REMOVED***
    return __awaiter(this, void 0, Promise, function () ***REMOVED***
        var type, url, params, headers, body, requestOptions;
        return __generator(this, function (_b) ***REMOVED***
            type = options.type === undefined ? TwitchApiCallType.Kraken : options.type;
            url = getTwitchApiUrl(options.url, type);
            params = stringify(options.query, ***REMOVED*** arrayFormat: 'repeat' ***REMOVED***);
            headers = new Headers(***REMOVED***
                Accept: type === TwitchApiCallType.Kraken ? 'application/vnd.twitchtv.v5+json' : 'application/json'
            ***REMOVED***);
            body = undefined;
            if (options.body) ***REMOVED***
                body = stringify(options.body);
                headers.append('Content-Type', 'application/x-www-form-urlencoded');
            ***REMOVED***
            else if (options.jsonBody) ***REMOVED***
                body = JSON.stringify(options.jsonBody);
                headers.append('Content-Type', 'application/json');
            ***REMOVED***
            if (clientId && type !== TwitchApiCallType.Auth) ***REMOVED***
                headers.append('Client-ID', clientId);
            ***REMOVED***
            if (accessToken) ***REMOVED***
                headers.append('Authorization', (type === TwitchApiCallType.Helix ? 'Bearer' : 'OAuth') + " " + accessToken);
            ***REMOVED***
            requestOptions = __assign(__assign(***REMOVED******REMOVED***, fetchOptions), ***REMOVED*** method: (_a = options.method) !== null && _a !== void 0 ? _a : 'GET', headers: headers,
                body: body ***REMOVED***);
            return [2 /*return*/, fetch(params ? url + "?" + params : url, requestOptions)];
        ***REMOVED***);
    ***REMOVED***);
***REMOVED***
/**
 * Makes a call to the Twitch API using given credentials.
 *
 * @param options The configuration of the call.
 * @param clientId The client ID of your application.
 * @param accessToken The access token to call the API with.
 *
 * You need to obtain one using one of the [Twitch OAuth flows](https://dev.twitch.tv/docs/authentication/getting-tokens-oauth/).
 * @param fetchOptions Additional options to be passed to the `fetch` function.
 */
// eslint-disable-next-line @typescript-eslint/no-explicit-any
export function callTwitchApi(options, clientId, accessToken, fetchOptions) ***REMOVED***
    if (fetchOptions === void 0) ***REMOVED*** fetchOptions = ***REMOVED******REMOVED***; ***REMOVED***
    return __awaiter(this, void 0, Promise, function () ***REMOVED***
        var response;
        return __generator(this, function (_a) ***REMOVED***
            switch (_a.label) ***REMOVED***
                case 0: return [4 /*yield*/, callTwitchApiRaw(options, clientId, accessToken, fetchOptions)];
                case 1:
                    response = _a.sent();
                    return [2 /*return*/, transformTwitchApiResponse(response)];
            ***REMOVED***
        ***REMOVED***);
    ***REMOVED***);
***REMOVED***
