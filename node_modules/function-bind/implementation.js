'use strict';

/* eslint no-invalid-this: 1 */

var ERROR_MESSAGE = 'Function.prototype.bind called on incompatible ';
var slice = Array.prototype.slice;
var toStr = Object.prototype.toString;
var funcType = '[object Function]';

module.exports = function bind(that) ***REMOVED***
    var target = this;
    if (typeof target !== 'function' || toStr.call(target) !== funcType) ***REMOVED***
        throw new TypeError(ERROR_MESSAGE + target);
    ***REMOVED***
    var args = slice.call(arguments, 1);

    var bound;
    var binder = function () ***REMOVED***
        if (this instanceof bound) ***REMOVED***
            var result = target.apply(
                this,
                args.concat(slice.call(arguments))
            );
            if (Object(result) === result) ***REMOVED***
                return result;
            ***REMOVED***
            return this;
        ***REMOVED*** else ***REMOVED***
            return target.apply(
                that,
                args.concat(slice.call(arguments))
            );
        ***REMOVED***
    ***REMOVED***;

    var boundLength = Math.max(0, target.length - args.length);
    var boundArgs = [];
    for (var i = 0; i < boundLength; i++) ***REMOVED***
        boundArgs.push('$' + i);
    ***REMOVED***

    bound = Function('binder', 'return function (' + boundArgs.join(',') + ')***REMOVED*** return binder.apply(this,arguments); ***REMOVED***')(binder);

    if (target.prototype) ***REMOVED***
        var Empty = function Empty() ***REMOVED******REMOVED***;
        Empty.prototype = target.prototype;
        bound.prototype = new Empty();
        Empty.prototype = null;
    ***REMOVED***

    return bound;
***REMOVED***;
