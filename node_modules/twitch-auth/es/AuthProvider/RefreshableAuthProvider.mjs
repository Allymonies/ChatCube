import ***REMOVED*** __awaiter, __decorate, __generator ***REMOVED*** from "tslib";
import ***REMOVED*** Enumerable ***REMOVED*** from '@d-fischer/shared-utils';
import ***REMOVED*** rtfm ***REMOVED*** from 'twitch-common';
import ***REMOVED*** refreshUserToken ***REMOVED*** from "../helpers.mjs";
/**
 * Enhances another auth provider with the ability to make use of refresh
 * tokens, automatically refreshing the access token whenever necessary.
 */
var RefreshableAuthProvider = /** @class */ (function () ***REMOVED***
    /**
     * Creates a new auth provider based on the given one that can automatically
     * refresh access tokens.
     *
     * @param childProvider The base auth provider.
     * @param refreshConfig The information necessary to automatically refresh an access token.
     */
    function RefreshableAuthProvider(childProvider, refreshConfig) ***REMOVED***
        this._clientSecret = refreshConfig.clientSecret;
        this._refreshToken = refreshConfig.refreshToken;
        this._childProvider = childProvider;
        this._initialExpiry = refreshConfig.expiry;
        this._onRefresh = refreshConfig.onRefresh;
    ***REMOVED***
    Object.defineProperty(RefreshableAuthProvider.prototype, "tokenType", ***REMOVED***
        /**
         * The type of tokens the provider generates.
         *
         * It is the same as the underlying base auth provider's token type.
         */
        get: function () ***REMOVED***
            return this._childProvider.tokenType;
    ***REMOVED***
        enumerable: false,
        configurable: true
    ***REMOVED***);
    /**
     * Retrieves an access token.
     *
     * If the current access token does not have the requested scopes, the base auth
     * provider is called.
     *
     * If the current access token is expired, automatically renew it.
     *
     * @param scopes The requested scopes.
     */
    RefreshableAuthProvider.prototype.getAccessToken = function (scopes) ***REMOVED***
        return __awaiter(this, void 0, Promise, function () ***REMOVED***
            var oldToken, newToken, now, refreshedToken;
            var _this = this;
            return __generator(this, function (_a) ***REMOVED***
                switch (_a.label) ***REMOVED***
                    case 0:
                        if (typeof scopes === 'string') ***REMOVED***
                            scopes = scopes.split(' ');
                        ***REMOVED***
                        return [4 /*yield*/, this._childProvider.getAccessToken()];
                    case 1:
                        oldToken = _a.sent();
                        if (!(oldToken && scopes && scopes.some(function (scope) ***REMOVED*** return !_this.currentScopes.includes(scope); ***REMOVED***))) return [3 /*break*/, 3];
                        return [4 /*yield*/, this._childProvider.getAccessToken(scopes)];
                    case 2:
                        newToken = _a.sent();
                        // ...but if the token doesn't change, carry on
                        if (newToken !== oldToken) ***REMOVED***
                            return [2 /*return*/, newToken];
                        ***REMOVED***
                        _a.label = 3;
                    case 3:
                        // if we don't have a current token, we just pass this and refresh right away
                        if (oldToken) ***REMOVED***
                            if (this._initialExpiry) ***REMOVED***
                                now = new Date();
                                if (now < this._initialExpiry) ***REMOVED***
                                    return [2 /*return*/, oldToken];
                                ***REMOVED***
                            ***REMOVED***
                            else if (!oldToken.isExpired) ***REMOVED***
                                return [2 /*return*/, oldToken];
                            ***REMOVED***
                        ***REMOVED***
                        return [4 /*yield*/, this.refresh()];
                    case 4:
                        refreshedToken = _a.sent();
                        if (oldToken) ***REMOVED***
                            return [2 /*return*/, refreshedToken];
                        ***REMOVED***
                        // need to check again for scopes after refreshing, in case a refresh token was passed without an access token
                        return [2 /*return*/, this._childProvider.getAccessToken(scopes)];
                ***REMOVED***
            ***REMOVED***);
        ***REMOVED***);
    ***REMOVED***;
    /**
     * Force a refresh of the access token.
     */
    RefreshableAuthProvider.prototype.refresh = function () ***REMOVED***
        return __awaiter(this, void 0, Promise, function () ***REMOVED***
            var tokenData;
            return __generator(this, function (_a) ***REMOVED***
                switch (_a.label) ***REMOVED***
                    case 0: return [4 /*yield*/, refreshUserToken(this.clientId, this._clientSecret, this._refreshToken)];
                    case 1:
                        tokenData = _a.sent();
                        this.setAccessToken(tokenData);
                        this._refreshToken = tokenData.refreshToken;
                        this._initialExpiry = undefined;
                        if (this._onRefresh) ***REMOVED***
                            this._onRefresh(tokenData);
                        ***REMOVED***
                        return [2 /*return*/, tokenData];
                ***REMOVED***
            ***REMOVED***);
        ***REMOVED***);
    ***REMOVED***;
    /** @private */
    RefreshableAuthProvider.prototype.setAccessToken = function (token) ***REMOVED***
        this._childProvider.setAccessToken(token);
    ***REMOVED***;
    Object.defineProperty(RefreshableAuthProvider.prototype, "clientId", ***REMOVED***
        /**
         * The client ID.
         */
        get: function () ***REMOVED***
            return this._childProvider.clientId;
    ***REMOVED***
        enumerable: false,
        configurable: true
    ***REMOVED***);
    Object.defineProperty(RefreshableAuthProvider.prototype, "currentScopes", ***REMOVED***
        /**
         * The scopes that are currently available using the access token.
         */
        get: function () ***REMOVED***
            return this._childProvider.currentScopes;
    ***REMOVED***
        enumerable: false,
        configurable: true
    ***REMOVED***);
    __decorate([
        Enumerable(false)
    ], RefreshableAuthProvider.prototype, "_clientSecret", void 0);
    __decorate([
        Enumerable(false)
    ], RefreshableAuthProvider.prototype, "_refreshToken", void 0);
    RefreshableAuthProvider = __decorate([
        rtfm('twitch-auth', 'RefreshableAuthProvider', 'clientId')
    ], RefreshableAuthProvider);
    return RefreshableAuthProvider;
***REMOVED***());
export ***REMOVED*** RefreshableAuthProvider ***REMOVED***;
