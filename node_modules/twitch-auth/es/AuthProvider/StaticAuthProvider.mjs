import ***REMOVED*** __awaiter, __decorate, __generator ***REMOVED*** from "tslib";
import ***REMOVED*** Enumerable ***REMOVED*** from '@d-fischer/shared-utils';
import ***REMOVED*** rtfm ***REMOVED*** from 'twitch-common';
import ***REMOVED*** AccessToken ***REMOVED*** from "../AccessToken.mjs";
import ***REMOVED*** getTokenInfo ***REMOVED*** from "../helpers.mjs";
/**
 * An auth provider that always returns the same initially given credentials.
 *
 * You are advised to roll your own auth provider that can handle scope upgrades,
 * or to plan ahead and supply only access tokens that account for all scopes
 * you will ever need.
 */
var StaticAuthProvider = /** @class */ (function () ***REMOVED***
    /**
     * Creates a new auth provider with static credentials.
     *
     * @param clientId The client ID.
     * @param accessToken The access token to provide.
     *
     * You need to obtain one using one of the [Twitch OAuth flows](https://dev.twitch.tv/docs/authentication/getting-tokens-oauth/).
     * @param scopes The scopes the supplied token has.
     * @param tokenType The type of the supplied token.
     */
    function StaticAuthProvider(clientId, accessToken, scopes, tokenType) ***REMOVED***
        if (tokenType === void 0) ***REMOVED*** tokenType = 'user'; ***REMOVED***
        this._clientId = clientId || '';
        this.tokenType = tokenType;
        if (accessToken) ***REMOVED***
            this._accessToken =
                typeof accessToken === 'string'
                    ? new AccessToken(***REMOVED***
                        access_token: accessToken,
                        scope: scopes,
                        refresh_token: ''
                    ***REMOVED***)
                    : accessToken;
            this._scopes = scopes;
        ***REMOVED***
    ***REMOVED***
    /**
     * Retrieves an access token.
     *
     * If the current access token does not have the requested scopes, this method throws.
     * This makes supplying an access token with the correct scopes from the beginning necessary.
     *
     * @param scopes The requested scopes.
     */
    StaticAuthProvider.prototype.getAccessToken = function (scopes) ***REMOVED***
        var _a;
        return __awaiter(this, void 0, Promise, function () ***REMOVED***
            var tokenInfo;
            var _this = this;
            return __generator(this, function (_b) ***REMOVED***
                switch (_b.label) ***REMOVED***
                    case 0:
                        if (!(scopes && scopes.length > 0)) return [3 /*break*/, 3];
                        if (!!this._scopes) return [3 /*break*/, 2];
                        if (!this._accessToken) ***REMOVED***
                            throw new Error('Auth provider has not been initialized with a token yet and is requesting scopes');
                        ***REMOVED***
                        return [4 /*yield*/, getTokenInfo(this._accessToken.accessToken, this._clientId)];
                    case 1:
                        tokenInfo = _b.sent();
                        this._scopes = tokenInfo.scopes;
                        _b.label = 2;
                    case 2:
                        if (typeof scopes === 'string') ***REMOVED***
                            scopes = scopes.split(' ');
                        ***REMOVED***
                        if (scopes.some(function (scope) ***REMOVED*** return !_this._scopes.includes(scope); ***REMOVED***)) ***REMOVED***
                            throw new Error("This token does not have the requested scopes (" + scopes.join(', ') + ") and can not be upgraded.\nIf you need dynamically upgrading scopes, please implement the AuthProvider interface accordingly:\n\n\thttps://d-fischer.github.io/twitch-auth/reference/interfaces/AuthProvider.html");
                        ***REMOVED***
                        _b.label = 3;
                    case 3: return [2 /*return*/, (_a = this._accessToken) !== null && _a !== void 0 ? _a : null];
                ***REMOVED***
            ***REMOVED***);
        ***REMOVED***);
    ***REMOVED***;
    /** @private */
    StaticAuthProvider.prototype.setAccessToken = function (token) ***REMOVED***
        this._accessToken = token;
    ***REMOVED***;
    Object.defineProperty(StaticAuthProvider.prototype, "clientId", ***REMOVED***
        /**
         * The client ID.
         */
        get: function () ***REMOVED***
            return this._clientId;
    ***REMOVED***
        enumerable: false,
        configurable: true
    ***REMOVED***);
    Object.defineProperty(StaticAuthProvider.prototype, "currentScopes", ***REMOVED***
        /**
         * The scopes that are currently available using the access token.
         */
        get: function () ***REMOVED***
            var _a;
            return (_a = this._scopes) !== null && _a !== void 0 ? _a : [];
    ***REMOVED***
        enumerable: false,
        configurable: true
    ***REMOVED***);
    __decorate([
        Enumerable(false)
    ], StaticAuthProvider.prototype, "_clientId", void 0);
    __decorate([
        Enumerable(false)
    ], StaticAuthProvider.prototype, "_accessToken", void 0);
    StaticAuthProvider = __decorate([
        rtfm('twitch-auth', 'StaticAuthProvider', 'clientId')
    ], StaticAuthProvider);
    return StaticAuthProvider;
***REMOVED***());
export ***REMOVED*** StaticAuthProvider ***REMOVED***;
