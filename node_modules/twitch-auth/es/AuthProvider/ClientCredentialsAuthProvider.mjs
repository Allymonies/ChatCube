import ***REMOVED*** __awaiter, __decorate, __generator ***REMOVED*** from "tslib";
import ***REMOVED*** Enumerable ***REMOVED*** from '@d-fischer/shared-utils';
import ***REMOVED*** rtfm ***REMOVED*** from 'twitch-common';
import ***REMOVED*** getAppToken ***REMOVED*** from "../helpers.mjs";
/**
 * An auth provider that retrieve tokens using client credentials.
 */
var ClientCredentialsAuthProvider = /** @class */ (function () ***REMOVED***
    /**
     * Creates a new auth provider to receive an application token with using the client ID and secret.
     *
     * @param clientId The client ID of your application.
     * @param clientSecret The client secret of your application.
     */
    function ClientCredentialsAuthProvider(clientId, clientSecret) ***REMOVED***
        /**
         * The type of tokens the provider generates.
         *
         * This auth provider generates app tokens.
         */
        this.tokenType = 'app';
        this._clientId = clientId;
        this._clientSecret = clientSecret;
    ***REMOVED***
    /**
     * Retrieves an access token.
     *
     * If any scopes are provided, this throws. The client credentials flow does not support scopes.
     *
     * @param scopes The requested scopes.
     */
    ClientCredentialsAuthProvider.prototype.getAccessToken = function (scopes) ***REMOVED***
        return __awaiter(this, void 0, Promise, function () ***REMOVED***
            return __generator(this, function (_a) ***REMOVED***
                if (scopes && scopes.length > 0) ***REMOVED***
                    throw new Error("Scope " + (typeof scopes === 'string' ? scopes : scopes.join(', ')) + " requested but the client credentials flow does not support scopes");
                ***REMOVED***
                if (!this._token || this._token.isExpired) ***REMOVED***
                    return [2 /*return*/, this.refresh()];
                ***REMOVED***
                return [2 /*return*/, this._token];
            ***REMOVED***);
        ***REMOVED***);
    ***REMOVED***;
    /**
     * Retrieves a new app access token.
     */
    ClientCredentialsAuthProvider.prototype.refresh = function () ***REMOVED***
        return __awaiter(this, void 0, Promise, function () ***REMOVED***
            var _a;
            return __generator(this, function (_b) ***REMOVED***
                switch (_b.label) ***REMOVED***
                    case 0:
                        _a = this;
                        return [4 /*yield*/, getAppToken(this._clientId, this._clientSecret)];
                    case 1: return [2 /*return*/, (_a._token = _b.sent())];
                ***REMOVED***
            ***REMOVED***);
        ***REMOVED***);
    ***REMOVED***;
    /** @private */
    ClientCredentialsAuthProvider.prototype.setAccessToken = function (token) ***REMOVED***
        this._token = token;
    ***REMOVED***;
    Object.defineProperty(ClientCredentialsAuthProvider.prototype, "clientId", ***REMOVED***
        /**
         * The client ID.
         */
        get: function () ***REMOVED***
            return this._clientId;
    ***REMOVED***
        enumerable: false,
        configurable: true
    ***REMOVED***);
    Object.defineProperty(ClientCredentialsAuthProvider.prototype, "currentScopes", ***REMOVED***
        /**
         * The scopes that are currently available using the access token.
         */
        get: function () ***REMOVED***
            return [];
    ***REMOVED***
        enumerable: false,
        configurable: true
    ***REMOVED***);
    __decorate([
        Enumerable(false)
    ], ClientCredentialsAuthProvider.prototype, "_clientSecret", void 0);
    __decorate([
        Enumerable(false)
    ], ClientCredentialsAuthProvider.prototype, "_token", void 0);
    ClientCredentialsAuthProvider = __decorate([
        rtfm('twitch-auth', 'ClientCredentialsAuthProvider', 'clientId')
    ], ClientCredentialsAuthProvider);
    return ClientCredentialsAuthProvider;
***REMOVED***());
export ***REMOVED*** ClientCredentialsAuthProvider ***REMOVED***;
