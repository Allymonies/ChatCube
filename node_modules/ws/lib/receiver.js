'use strict';

const ***REMOVED*** Writable ***REMOVED*** = require('stream');

const PerMessageDeflate = require('./permessage-deflate');
const ***REMOVED***
  BINARY_TYPES,
  EMPTY_BUFFER,
  kStatusCode,
  kWebSocket
***REMOVED*** = require('./constants');
const ***REMOVED*** concat, toArrayBuffer, unmask ***REMOVED*** = require('./buffer-util');
const ***REMOVED*** isValidStatusCode, isValidUTF8 ***REMOVED*** = require('./validation');

const GET_INFO = 0;
const GET_PAYLOAD_LENGTH_16 = 1;
const GET_PAYLOAD_LENGTH_64 = 2;
const GET_MASK = 3;
const GET_DATA = 4;
const INFLATING = 5;

/**
 * HyBi Receiver implementation.
 *
 * @extends Writable
 */
class Receiver extends Writable ***REMOVED***
  /**
   * Creates a Receiver instance.
   *
   * @param ***REMOVED***Object***REMOVED*** [options] Options object
   * @param ***REMOVED***String***REMOVED*** [options.binaryType=nodebuffer] The type for binary data
   * @param ***REMOVED***Object***REMOVED*** [options.extensions] An object containing the negotiated
   *     extensions
   * @param ***REMOVED***Boolean***REMOVED*** [options.isServer=false] Specifies whether to operate in
   *     client or server mode
   * @param ***REMOVED***Number***REMOVED*** [options.maxPayload=0] The maximum allowed message length
   * @param ***REMOVED***Boolean***REMOVED*** [options.skipUTF8Validation=false] Specifies whether or
   *     not to skip UTF-8 validation for text and close messages
   */
  constructor(options = ***REMOVED******REMOVED***) ***REMOVED***
    super();

    this._binaryType = options.binaryType || BINARY_TYPES[0];
    this._extensions = options.extensions || ***REMOVED******REMOVED***;
    this._isServer = !!options.isServer;
    this._maxPayload = options.maxPayload | 0;
    this._skipUTF8Validation = !!options.skipUTF8Validation;
    this[kWebSocket] = undefined;

    this._bufferedBytes = 0;
    this._buffers = [];

    this._compressed = false;
    this._payloadLength = 0;
    this._mask = undefined;
    this._fragmented = 0;
    this._masked = false;
    this._fin = false;
    this._opcode = 0;

    this._totalPayloadLength = 0;
    this._messageLength = 0;
    this._fragments = [];

    this._state = GET_INFO;
    this._loop = false;
  ***REMOVED***

  /**
   * Implements `Writable.prototype._write()`.
   *
   * @param ***REMOVED***Buffer***REMOVED*** chunk The chunk of data to write
   * @param ***REMOVED***String***REMOVED*** encoding The character encoding of `chunk`
   * @param ***REMOVED***Function***REMOVED*** cb Callback
   * @private
   */
  _write(chunk, encoding, cb) ***REMOVED***
    if (this._opcode === 0x08 && this._state == GET_INFO) return cb();

    this._bufferedBytes += chunk.length;
    this._buffers.push(chunk);
    this.startLoop(cb);
  ***REMOVED***

  /**
   * Consumes `n` bytes from the buffered data.
   *
   * @param ***REMOVED***Number***REMOVED*** n The number of bytes to consume
   * @return ***REMOVED***Buffer***REMOVED*** The consumed bytes
   * @private
   */
  consume(n) ***REMOVED***
    this._bufferedBytes -= n;

    if (n === this._buffers[0].length) return this._buffers.shift();

    if (n < this._buffers[0].length) ***REMOVED***
      const buf = this._buffers[0];
      this._buffers[0] = buf.slice(n);
      return buf.slice(0, n);
    ***REMOVED***

    const dst = Buffer.allocUnsafe(n);

    do ***REMOVED***
      const buf = this._buffers[0];
      const offset = dst.length - n;

      if (n >= buf.length) ***REMOVED***
        dst.set(this._buffers.shift(), offset);
      ***REMOVED*** else ***REMOVED***
        dst.set(new Uint8Array(buf.buffer, buf.byteOffset, n), offset);
        this._buffers[0] = buf.slice(n);
      ***REMOVED***

      n -= buf.length;
    ***REMOVED*** while (n > 0);

    return dst;
  ***REMOVED***

  /**
   * Starts the parsing loop.
   *
   * @param ***REMOVED***Function***REMOVED*** cb Callback
   * @private
   */
  startLoop(cb) ***REMOVED***
    let err;
    this._loop = true;

    do ***REMOVED***
      switch (this._state) ***REMOVED***
        case GET_INFO:
          err = this.getInfo();
          break;
        case GET_PAYLOAD_LENGTH_16:
          err = this.getPayloadLength16();
          break;
        case GET_PAYLOAD_LENGTH_64:
          err = this.getPayloadLength64();
          break;
        case GET_MASK:
          this.getMask();
          break;
        case GET_DATA:
          err = this.getData(cb);
          break;
        default:
          // `INFLATING`
          this._loop = false;
          return;
      ***REMOVED***
    ***REMOVED*** while (this._loop);

    cb(err);
  ***REMOVED***

  /**
   * Reads the first two bytes of a frame.
   *
   * @return ***REMOVED***(RangeError|undefined)***REMOVED*** A possible error
   * @private
   */
  getInfo() ***REMOVED***
    if (this._bufferedBytes < 2) ***REMOVED***
      this._loop = false;
      return;
    ***REMOVED***

    const buf = this.consume(2);

    if ((buf[0] & 0x30) !== 0x00) ***REMOVED***
      this._loop = false;
      return error(
        RangeError,
        'RSV2 and RSV3 must be clear',
        true,
        1002,
        'WS_ERR_UNEXPECTED_RSV_2_3'
      );
    ***REMOVED***

    const compressed = (buf[0] & 0x40) === 0x40;

    if (compressed && !this._extensions[PerMessageDeflate.extensionName]) ***REMOVED***
      this._loop = false;
      return error(
        RangeError,
        'RSV1 must be clear',
        true,
        1002,
        'WS_ERR_UNEXPECTED_RSV_1'
      );
    ***REMOVED***

    this._fin = (buf[0] & 0x80) === 0x80;
    this._opcode = buf[0] & 0x0f;
    this._payloadLength = buf[1] & 0x7f;

    if (this._opcode === 0x00) ***REMOVED***
      if (compressed) ***REMOVED***
        this._loop = false;
        return error(
          RangeError,
          'RSV1 must be clear',
          true,
          1002,
          'WS_ERR_UNEXPECTED_RSV_1'
        );
      ***REMOVED***

      if (!this._fragmented) ***REMOVED***
        this._loop = false;
        return error(
          RangeError,
          'invalid opcode 0',
          true,
          1002,
          'WS_ERR_INVALID_OPCODE'
        );
      ***REMOVED***

      this._opcode = this._fragmented;
    ***REMOVED*** else if (this._opcode === 0x01 || this._opcode === 0x02) ***REMOVED***
      if (this._fragmented) ***REMOVED***
        this._loop = false;
        return error(
          RangeError,
          `invalid opcode $***REMOVED***this._opcode***REMOVED***`,
          true,
          1002,
          'WS_ERR_INVALID_OPCODE'
        );
      ***REMOVED***

      this._compressed = compressed;
    ***REMOVED*** else if (this._opcode > 0x07 && this._opcode < 0x0b) ***REMOVED***
      if (!this._fin) ***REMOVED***
        this._loop = false;
        return error(
          RangeError,
          'FIN must be set',
          true,
          1002,
          'WS_ERR_EXPECTED_FIN'
        );
      ***REMOVED***

      if (compressed) ***REMOVED***
        this._loop = false;
        return error(
          RangeError,
          'RSV1 must be clear',
          true,
          1002,
          'WS_ERR_UNEXPECTED_RSV_1'
        );
      ***REMOVED***

      if (this._payloadLength > 0x7d) ***REMOVED***
        this._loop = false;
        return error(
          RangeError,
          `invalid payload length $***REMOVED***this._payloadLength***REMOVED***`,
          true,
          1002,
          'WS_ERR_INVALID_CONTROL_PAYLOAD_LENGTH'
        );
      ***REMOVED***
    ***REMOVED*** else ***REMOVED***
      this._loop = false;
      return error(
        RangeError,
        `invalid opcode $***REMOVED***this._opcode***REMOVED***`,
        true,
        1002,
        'WS_ERR_INVALID_OPCODE'
      );
    ***REMOVED***

    if (!this._fin && !this._fragmented) this._fragmented = this._opcode;
    this._masked = (buf[1] & 0x80) === 0x80;

    if (this._isServer) ***REMOVED***
      if (!this._masked) ***REMOVED***
        this._loop = false;
        return error(
          RangeError,
          'MASK must be set',
          true,
          1002,
          'WS_ERR_EXPECTED_MASK'
        );
      ***REMOVED***
    ***REMOVED*** else if (this._masked) ***REMOVED***
      this._loop = false;
      return error(
        RangeError,
        'MASK must be clear',
        true,
        1002,
        'WS_ERR_UNEXPECTED_MASK'
      );
    ***REMOVED***

    if (this._payloadLength === 126) this._state = GET_PAYLOAD_LENGTH_16;
    else if (this._payloadLength === 127) this._state = GET_PAYLOAD_LENGTH_64;
    else return this.haveLength();
  ***REMOVED***

  /**
   * Gets extended payload length (7+16).
   *
   * @return ***REMOVED***(RangeError|undefined)***REMOVED*** A possible error
   * @private
   */
  getPayloadLength16() ***REMOVED***
    if (this._bufferedBytes < 2) ***REMOVED***
      this._loop = false;
      return;
    ***REMOVED***

    this._payloadLength = this.consume(2).readUInt16BE(0);
    return this.haveLength();
  ***REMOVED***

  /**
   * Gets extended payload length (7+64).
   *
   * @return ***REMOVED***(RangeError|undefined)***REMOVED*** A possible error
   * @private
   */
  getPayloadLength64() ***REMOVED***
    if (this._bufferedBytes < 8) ***REMOVED***
      this._loop = false;
      return;
    ***REMOVED***

    const buf = this.consume(8);
    const num = buf.readUInt32BE(0);

    //
    // The maximum safe integer in JavaScript is 2^53 - 1. An error is returned
    // if payload length is greater than this number.
    //
    if (num > Math.pow(2, 53 - 32) - 1) ***REMOVED***
      this._loop = false;
      return error(
        RangeError,
        'Unsupported WebSocket frame: payload length > 2^53 - 1',
        false,
        1009,
        'WS_ERR_UNSUPPORTED_DATA_PAYLOAD_LENGTH'
      );
    ***REMOVED***

    this._payloadLength = num * Math.pow(2, 32) + buf.readUInt32BE(4);
    return this.haveLength();
  ***REMOVED***

  /**
   * Payload length has been read.
   *
   * @return ***REMOVED***(RangeError|undefined)***REMOVED*** A possible error
   * @private
   */
  haveLength() ***REMOVED***
    if (this._payloadLength && this._opcode < 0x08) ***REMOVED***
      this._totalPayloadLength += this._payloadLength;
      if (this._totalPayloadLength > this._maxPayload && this._maxPayload > 0) ***REMOVED***
        this._loop = false;
        return error(
          RangeError,
          'Max payload size exceeded',
          false,
          1009,
          'WS_ERR_UNSUPPORTED_MESSAGE_LENGTH'
        );
      ***REMOVED***
    ***REMOVED***

    if (this._masked) this._state = GET_MASK;
    else this._state = GET_DATA;
  ***REMOVED***

  /**
   * Reads mask bytes.
   *
   * @private
   */
  getMask() ***REMOVED***
    if (this._bufferedBytes < 4) ***REMOVED***
      this._loop = false;
      return;
    ***REMOVED***

    this._mask = this.consume(4);
    this._state = GET_DATA;
  ***REMOVED***

  /**
   * Reads data bytes.
   *
   * @param ***REMOVED***Function***REMOVED*** cb Callback
   * @return ***REMOVED***(Error|RangeError|undefined)***REMOVED*** A possible error
   * @private
   */
  getData(cb) ***REMOVED***
    let data = EMPTY_BUFFER;

    if (this._payloadLength) ***REMOVED***
      if (this._bufferedBytes < this._payloadLength) ***REMOVED***
        this._loop = false;
        return;
      ***REMOVED***

      data = this.consume(this._payloadLength);
      if (this._masked) unmask(data, this._mask);
    ***REMOVED***

    if (this._opcode > 0x07) return this.controlMessage(data);

    if (this._compressed) ***REMOVED***
      this._state = INFLATING;
      this.decompress(data, cb);
      return;
    ***REMOVED***

    if (data.length) ***REMOVED***
      //
      // This message is not compressed so its length is the sum of the payload
      // length of all fragments.
      //
      this._messageLength = this._totalPayloadLength;
      this._fragments.push(data);
    ***REMOVED***

    return this.dataMessage();
  ***REMOVED***

  /**
   * Decompresses data.
   *
   * @param ***REMOVED***Buffer***REMOVED*** data Compressed data
   * @param ***REMOVED***Function***REMOVED*** cb Callback
   * @private
   */
  decompress(data, cb) ***REMOVED***
    const perMessageDeflate = this._extensions[PerMessageDeflate.extensionName];

    perMessageDeflate.decompress(data, this._fin, (err, buf) => ***REMOVED***
      if (err) return cb(err);

      if (buf.length) ***REMOVED***
        this._messageLength += buf.length;
        if (this._messageLength > this._maxPayload && this._maxPayload > 0) ***REMOVED***
          return cb(
            error(
              RangeError,
              'Max payload size exceeded',
              false,
              1009,
              'WS_ERR_UNSUPPORTED_MESSAGE_LENGTH'
            )
          );
        ***REMOVED***

        this._fragments.push(buf);
      ***REMOVED***

      const er = this.dataMessage();
      if (er) return cb(er);

      this.startLoop(cb);
    ***REMOVED***);
  ***REMOVED***

  /**
   * Handles a data message.
   *
   * @return ***REMOVED***(Error|undefined)***REMOVED*** A possible error
   * @private
   */
  dataMessage() ***REMOVED***
    if (this._fin) ***REMOVED***
      const messageLength = this._messageLength;
      const fragments = this._fragments;

      this._totalPayloadLength = 0;
      this._messageLength = 0;
      this._fragmented = 0;
      this._fragments = [];

      if (this._opcode === 2) ***REMOVED***
        let data;

        if (this._binaryType === 'nodebuffer') ***REMOVED***
          data = concat(fragments, messageLength);
        ***REMOVED*** else if (this._binaryType === 'arraybuffer') ***REMOVED***
          data = toArrayBuffer(concat(fragments, messageLength));
        ***REMOVED*** else ***REMOVED***
          data = fragments;
        ***REMOVED***

        this.emit('message', data, true);
      ***REMOVED*** else ***REMOVED***
        const buf = concat(fragments, messageLength);

        if (!this._skipUTF8Validation && !isValidUTF8(buf)) ***REMOVED***
          this._loop = false;
          return error(
            Error,
            'invalid UTF-8 sequence',
            true,
            1007,
            'WS_ERR_INVALID_UTF8'
          );
        ***REMOVED***

        this.emit('message', buf, false);
      ***REMOVED***
    ***REMOVED***

    this._state = GET_INFO;
  ***REMOVED***

  /**
   * Handles a control message.
   *
   * @param ***REMOVED***Buffer***REMOVED*** data Data to handle
   * @return ***REMOVED***(Error|RangeError|undefined)***REMOVED*** A possible error
   * @private
   */
  controlMessage(data) ***REMOVED***
    if (this._opcode === 0x08) ***REMOVED***
      this._loop = false;

      if (data.length === 0) ***REMOVED***
        this.emit('conclude', 1005, EMPTY_BUFFER);
        this.end();
      ***REMOVED*** else if (data.length === 1) ***REMOVED***
        return error(
          RangeError,
          'invalid payload length 1',
          true,
          1002,
          'WS_ERR_INVALID_CONTROL_PAYLOAD_LENGTH'
        );
      ***REMOVED*** else ***REMOVED***
        const code = data.readUInt16BE(0);

        if (!isValidStatusCode(code)) ***REMOVED***
          return error(
            RangeError,
            `invalid status code $***REMOVED***code***REMOVED***`,
            true,
            1002,
            'WS_ERR_INVALID_CLOSE_CODE'
          );
        ***REMOVED***

        const buf = data.slice(2);

        if (!this._skipUTF8Validation && !isValidUTF8(buf)) ***REMOVED***
          return error(
            Error,
            'invalid UTF-8 sequence',
            true,
            1007,
            'WS_ERR_INVALID_UTF8'
          );
        ***REMOVED***

        this.emit('conclude', code, buf);
        this.end();
      ***REMOVED***
    ***REMOVED*** else if (this._opcode === 0x09) ***REMOVED***
      this.emit('ping', data);
    ***REMOVED*** else ***REMOVED***
      this.emit('pong', data);
    ***REMOVED***

    this._state = GET_INFO;
  ***REMOVED***
***REMOVED***

module.exports = Receiver;

/**
 * Builds an error object.
 *
 * @param ***REMOVED***function(new:Error|RangeError)***REMOVED*** ErrorCtor The error constructor
 * @param ***REMOVED***String***REMOVED*** message The error message
 * @param ***REMOVED***Boolean***REMOVED*** prefix Specifies whether or not to add a default prefix to
 *     `message`
 * @param ***REMOVED***Number***REMOVED*** statusCode The status code
 * @param ***REMOVED***String***REMOVED*** errorCode The exposed error code
 * @return ***REMOVED***(Error|RangeError)***REMOVED*** The error
 * @private
 */
function error(ErrorCtor, message, prefix, statusCode, errorCode) ***REMOVED***
  const err = new ErrorCtor(
    prefix ? `Invalid WebSocket frame: $***REMOVED***message***REMOVED***` : message
  );

  Error.captureStackTrace(err, error);
  err.code = errorCode;
  err[kStatusCode] = statusCode;
  return err;
***REMOVED***
