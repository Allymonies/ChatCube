/// <reference types="node" />
import type ***REMOVED*** Connection, WebSocketConnectionOptions ***REMOVED*** from '@d-fischer/connection';
import type ***REMOVED*** LoggerOptionsOrCustom ***REMOVED*** from '@d-fischer/logger';
import type ***REMOVED*** ResolvableValue ***REMOVED*** from '@d-fischer/shared-utils';
import type ***REMOVED*** Listener ***REMOVED*** from '@d-fischer/typed-event-emitter';
import ***REMOVED*** EventEmitter ***REMOVED*** from '@d-fischer/typed-event-emitter';
import type ***REMOVED*** Capability, ServerCapability ***REMOVED*** from './Capability/Capability';
import type ***REMOVED*** Message, MessageConstructor, MessageParamValues ***REMOVED*** from './Message/Message';
import ***REMOVED*** MessageCollector ***REMOVED*** from './Message/MessageCollector';
import ***REMOVED*** NickChange, Notice, PrivateMessage ***REMOVED*** from './Message/MessageTypes/Commands';
import type ***REMOVED*** ServerProperties ***REMOVED*** from './ServerProperties';
export declare type EventHandler<T extends Message = Message> = (message: T) => void;
export declare type EventHandlerList<T extends Message = Message> = Map<string, EventHandler<T>>;
export interface IrcCredentials ***REMOVED***
    nick: string;
    password?: string;
    userName?: string;
    realName?: string;
***REMOVED***
export interface IrcClientConnectionOptions ***REMOVED***
    hostName: string;
    port?: number;
    secure?: boolean;
    pingOnInactivity?: number;
    pingTimeout?: number;
    reconnect?: boolean;
***REMOVED***
export interface BaseIrcClientOptions ***REMOVED***
    connection: IrcClientConnectionOptions;
    credentials: IrcCredentials;
    channels?: ResolvableValue<string[]>;
    webSocket?: boolean;
    channelTypes?: string;
    logger?: Partial<LoggerOptionsOrCustom>;
    nonConformingCommands?: string[];
***REMOVED***
export interface WebSocketIrcClientOptions extends BaseIrcClientOptions ***REMOVED***
    webSocket: true;
    connectionOptions?: WebSocketConnectionOptions;
***REMOVED***
export interface TcpIrcClientOptions extends BaseIrcClientOptions ***REMOVED***
    webSocket?: false;
    connectionOptions?: never;
***REMOVED***
export declare type IrcClientOptions = WebSocketIrcClientOptions | TcpIrcClientOptions;
export declare class IrcClient extends EventEmitter ***REMOVED***
    protected _connection: Connection;
    protected _registered: boolean;
    protected _options: IrcClientOptions;
    protected _credentials: IrcCredentials;
    protected _supportsCapabilities: boolean;
    protected _events: Map<string, EventHandlerList<Message<any>>>;
    protected _registeredMessageTypes: Map<string, MessageConstructor<any>>;
    onConnect: (handler: () => void) => Listener;
    onRegister: (handler: () => void) => Listener;
    onDisconnect: (handler: (manually: boolean, reason?: Error) => void) => Listener;
    onPrivmsg: (handler: (target: string, user: string, message: string, msg: PrivateMessage) => void) => Listener;
    onAction: (handler: (target: string, user: string, message: string, msg: PrivateMessage) => void) => Listener;
    onNotice: (handler: (target: string, user: string, message: string, msg: Notice) => void) => Listener;
    onNickChange: (handler: (oldNick: string | undefined, newNick: string, msg: NickChange) => void) => Listener;
    onCtcp: (handler: (target: string, user: string, command: string, params: string, msg: PrivateMessage) => void) => Listener;
    onCtcpReply: (handler: (target: string, user: string, command: string, params: string, msg: Notice) => void) => Listener;
    onAnyMessage: (handler: (msg: Message) => void) => Listener;
    protected _serverProperties: ServerProperties;
    protected _supportedFeatures: Record<string, true | string>;
    protected _collectors: MessageCollector[];
    protected _clientCapabilities: Map<string, Capability>;
    protected _serverCapabilities: Map<string, ServerCapability>;
    protected _negotiatedCapabilities: Map<string, ServerCapability>;
    protected _pingOnInactivity: number;
    protected _pingTimeout: number;
    protected _pingCheckTimer?: NodeJS.Timer;
    protected _pingTimeoutTimer?: NodeJS.Timer;
    protected _currentNick: string;
    private readonly _logger;
    private _initialConnectionSetupDone;
    constructor(options: IrcClientOptions);
    receiveLine(line: string): void;
    get serverProperties(): ServerProperties;
    get port(): number;
    pingCheck(): void;
    reconnect(message?: string): Promise<void>;
    registerMessageType(cls: MessageConstructor): void;
    knowsCommand(command: string): boolean;
    getCommandClass(command: string): MessageConstructor | undefined;
    connect(): Promise<void>;
    waitForRegistration(): Promise<void>;
    addCapability(cap: Capability): void;
    registerCapability(cap: Capability): Promise<ServerCapability[] | Error>;
    send(message: Message): void;
    sendRaw(line: string): void;
    onNamedMessage<T extends Message = Message>(commandName: string, handler: EventHandler<T>, handlerName?: string): string;
    onTypedMessage<T extends Message>(type: MessageConstructor<T>, handler: EventHandler<T>, handlerName?: string): string;
    removeMessageListener(handlerName: string): void;
    createMessage<T extends Message<T>>(type: MessageConstructor<T>, params: Partial<MessageParamValues<T>>, tags?: Record<string, string>): T;
    sendMessage<T extends Message<T>>(type: MessageConstructor<T>, params: Partial<MessageParamValues<T>>, tags?: Record<string, string>): void;
    sendMessageAndCaptureReply<T extends Message<T>>(type: MessageConstructor<T>, params: Partial<MessageParamValues<T>>): Promise<Message[]>;
    get isConnected(): boolean;
    get isConnecting(): boolean;
    get isRegistered(): boolean;
    get currentNick(): string;
    /** @private */
    collect(originalMessage: Message, ...types: MessageConstructor[]): MessageCollector;
    /** @private */
    stopCollect(collector: MessageCollector): void;
    join(channel: string, key?: string): void;
    part(channel: string): void;
    quit(message?: string): Promise<void>;
    say(target: string, message: string, tags?: Record<string, string>): void;
    sendCtcp(target: string, type: string, message: string): void;
    action(target: string, message: string): void;
    protected getPassword(currentPassword?: string): Promise<string | undefined>;
    protected registerCoreMessageTypes(): void;
    protected _negotiateCapabilityBatch(capabilities: ServerCapability[][]): Promise<Array<ServerCapability[] | Error>>;
    protected _negotiateCapabilities(capList: ServerCapability[]): Promise<ServerCapability[] | Error>;
    protected _updateCredentials(newCredentials: Partial<IrcCredentials>): void;
    private _setupConnection;
    private _handleReceivedClientNick;
    private _handleEvents;
    private _startPingCheckTimer;
***REMOVED***
