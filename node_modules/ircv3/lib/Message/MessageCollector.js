"use strict";
Object.defineProperty(exports, "__esModule", ***REMOVED*** value: true ***REMOVED***);
exports.MessageCollector = void 0;
var tslib_1 = require("tslib");
var MessageCollector = /** @class */ (function () ***REMOVED***
    function MessageCollector(_client, _originalMessage) ***REMOVED***
        var types = [];
        for (var _i = 2; _i < arguments.length; _i++) ***REMOVED***
            types[_i - 2] = arguments[_i];
        ***REMOVED***
        this._client = _client;
        this._originalMessage = _originalMessage;
        this._messages = [];
        this._endEventHandlers = new Map();
        this._types = new Set(types);
    ***REMOVED***
    MessageCollector.prototype.untilEvent = function (eventType) ***REMOVED***
        var _this = this;
        this._cleanEndEventHandler(eventType);
        var listener = this._client.on(eventType, function () ***REMOVED*** return _this.end(); ***REMOVED***);
        this._endEventHandlers.set(eventType, listener);
    ***REMOVED***;
    MessageCollector.prototype.promise = function () ***REMOVED***
        return tslib_1.__awaiter(this, void 0, void 0, function () ***REMOVED***
            var _this = this;
            return tslib_1.__generator(this, function (_a) ***REMOVED***
                if (!this._promise) ***REMOVED***
                    this._promise = new Promise(function (resolve) ***REMOVED*** return (_this._promiseResolve = resolve); ***REMOVED***);
                ***REMOVED***
                return [2 /*return*/, this._promise];
            ***REMOVED***);
        ***REMOVED***);
    ***REMOVED***;
    MessageCollector.prototype.collect = function (message) ***REMOVED***
        if (!this._originalMessage._acceptsInReplyCollection(message)) ***REMOVED***
            return false;
        ***REMOVED***
        this._messages.push(message);
        if (message.endsResponseTo(this._originalMessage)) ***REMOVED***
            this.end();
        ***REMOVED***
        return true;
    ***REMOVED***;
    MessageCollector.prototype.end = function () ***REMOVED***
        this._client.stopCollect(this);
        this._cleanEndEventHandlers();
        if (this._promiseResolve) ***REMOVED***
            this._promiseResolve(this._messages);
        ***REMOVED***
    ***REMOVED***;
    MessageCollector.prototype._cleanEndEventHandlers = function () ***REMOVED***
        var _this = this;
        this._endEventHandlers.forEach(function (listener) ***REMOVED*** return _this._client.removeListener(listener); ***REMOVED***);
        this._endEventHandlers.clear();
    ***REMOVED***;
    MessageCollector.prototype._cleanEndEventHandler = function (eventType) ***REMOVED***
        if (this._endEventHandlers.has(eventType)) ***REMOVED***
            this._client.removeListener(this._endEventHandlers.get(eventType));
            this._endEventHandlers.delete(eventType);
        ***REMOVED***
    ***REMOVED***;
    return MessageCollector;
***REMOVED***());
exports.MessageCollector = MessageCollector;
