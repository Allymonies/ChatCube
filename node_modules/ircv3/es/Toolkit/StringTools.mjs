import ***REMOVED*** __read ***REMOVED*** from "tslib";
import escapeRegexString from '@d-fischer/escape-string-regexp';
import ***REMOVED*** splitWithLimit ***REMOVED*** from '@d-fischer/shared-utils';
export function sanitizeParameter(param, spaceAllowed) ***REMOVED***
    if (spaceAllowed === void 0) ***REMOVED*** spaceAllowed = false; ***REMOVED***
    if (spaceAllowed) ***REMOVED***
        return param.replace(/[\0\r\n]/g, '');
    ***REMOVED***
    else ***REMOVED***
        return param.replace(/[\0\r\n ]/g, '');
    ***REMOVED***
***REMOVED***
export function isChannel(str, validTypes) ***REMOVED***
    if (validTypes === void 0) ***REMOVED*** validTypes = '#&'; ***REMOVED***
    var re = new RegExp("^[" + escapeRegexString(validTypes) + "][^ \b\0\n\r,]+$");
    return re.test(str);
***REMOVED***
var ctcpEscapeMap = ***REMOVED***
    0: '\0',
    n: '\n',
    r: '\r',
    '\x10': '\x10'
***REMOVED***;
export function decodeCtcp(message) ***REMOVED***
    if (!message.startsWith('\x01')) ***REMOVED***
        // this is not a CTCP message
        return false;
    ***REMOVED***
    message = message.substring(1);
    // remove trailing \x01 if present
    if (message.endsWith('\x01')) ***REMOVED***
        message = message.slice(0, -1);
    ***REMOVED***
    if (!message) ***REMOVED***
        // completely empty CTCPs don't exist either, I think
        return false;
    ***REMOVED***
    // unescape weirdly escaped stuff
    message = message.replace(/\x10(.)/, function (_, escapedChar) ***REMOVED***
        return escapedChar in ctcpEscapeMap ? ctcpEscapeMap[escapedChar] : '';
    ***REMOVED***);
    var _a = __read(splitWithLimit(message, ' ', 2), 2), command = _a[0], _b = _a[1], params = _b === void 0 ? '' : _b;
    command = command ? command.toUpperCase() : '';
    return ***REMOVED*** command: command, params: params ***REMOVED***;
***REMOVED***
