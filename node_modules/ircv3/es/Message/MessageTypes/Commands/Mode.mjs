import ***REMOVED*** __decorate, __extends, __values ***REMOVED*** from "tslib";
import ***REMOVED*** UnknownChannelModeCharError ***REMOVED*** from "../../../Errors/UnknownChannelModeCharError.mjs";
import ***REMOVED*** isChannel ***REMOVED*** from "../../../Toolkit/StringTools.mjs";
import ***REMOVED*** Message ***REMOVED*** from "../../Message.mjs";
import ***REMOVED*** MessageParamDefinition, MessageType ***REMOVED*** from "../../MessageDefinition.mjs";
var Mode = /** @class */ (function (_super) ***REMOVED***
    __extends(Mode, _super);
    function Mode() ***REMOVED***
        return _super !== null && _super.apply(this, arguments) || this;
    ***REMOVED***
    Object.defineProperty(Mode.prototype, "isChannel", ***REMOVED***
        get: function () ***REMOVED***
            return isChannel(this.params.target, this._serverProperties.channelTypes);
    ***REMOVED***
        enumerable: false,
        configurable: true
    ***REMOVED***);
    Mode.prototype.separate = function () ***REMOVED***
        var e_1, _a;
        var result = [];
        var modeRestParam = this.params.modes;
        if (!modeRestParam) ***REMOVED***
            throw new Error("can't separate a channel mode request, just set actions");
        ***REMOVED***
        var modeParams = modeRestParam.split(' ');
        var modes = modeParams.shift();
        var currentModeAction = 'add';
        try ***REMOVED***
            for (var modes_1 = __values(modes), modes_1_1 = modes_1.next(); !modes_1_1.done; modes_1_1 = modes_1.next()) ***REMOVED***
                var ch = modes_1_1.value;
                var thisModeAction = currentModeAction;
                switch (ch) ***REMOVED***
                    case '+': ***REMOVED***
                        currentModeAction = 'add';
                        break;
                    ***REMOVED***
                    case '-': ***REMOVED***
                        currentModeAction = 'remove';
                        break;
                    ***REMOVED***
                    default: ***REMOVED***
                        var requiresParam = false;
                        var known = true;
                        if (this.isChannel) ***REMOVED***
                            if (this._serverProperties.supportedChannelModes.alwaysWithParam.includes(ch) ||
                                this._serverProperties.supportedChannelModes.prefix.includes(ch)) ***REMOVED***
                                requiresParam = true;
                            ***REMOVED***
                            else if (this._serverProperties.supportedChannelModes.paramWhenSet.includes(ch)) ***REMOVED***
                                if (currentModeAction === 'add') ***REMOVED***
                                    requiresParam = true;
                                ***REMOVED***
                            ***REMOVED***
                            else if (this._serverProperties.supportedChannelModes.list.includes(ch)) ***REMOVED***
                                if (modeParams.length) ***REMOVED***
                                    requiresParam = true;
                                ***REMOVED***
                                else ***REMOVED***
                                    thisModeAction = 'getList';
                                ***REMOVED***
                            ***REMOVED***
                            else if (this._serverProperties.supportedChannelModes.noParam.includes(ch)) ***REMOVED***
                                // whatever
                            ***REMOVED***
                            else ***REMOVED***
                                throw new UnknownChannelModeCharError(ch);
                            ***REMOVED***
                        ***REMOVED***
                        else ***REMOVED***
                            // user modes never have a param
                            // also, they don't break the whole command if invalid mode letters are given
                            known = this._serverProperties.supportedUserModes.includes(ch);
                        ***REMOVED***
                        if (requiresParam && !modeParams.length) ***REMOVED***
                            continue;
                        ***REMOVED***
                        result.push(***REMOVED***
                            prefix: this._prefix,
                            action: thisModeAction,
                            letter: ch,
                            param: requiresParam ? modeParams.shift() : undefined,
                            known: known
                        ***REMOVED***);
                    ***REMOVED***
                ***REMOVED***
            ***REMOVED***
        ***REMOVED***
        catch (e_1_1) ***REMOVED*** e_1 = ***REMOVED*** error: e_1_1 ***REMOVED***; ***REMOVED***
        finally ***REMOVED***
            try ***REMOVED***
                if (modes_1_1 && !modes_1_1.done && (_a = modes_1.return)) _a.call(modes_1);
            ***REMOVED***
            finally ***REMOVED*** if (e_1) throw e_1.error; ***REMOVED***
        ***REMOVED***
        return result;
    ***REMOVED***;
    __decorate([
        MessageParamDefinition(***REMOVED******REMOVED***)
    ], Mode.prototype, "target", void 0);
    __decorate([
        MessageParamDefinition(***REMOVED***
            rest: true,
            optional: true
        ***REMOVED***)
    ], Mode.prototype, "modes", void 0);
    Mode = __decorate([
        MessageType('MODE')
    ], Mode);
    return Mode;
***REMOVED***(Message));
export ***REMOVED*** Mode ***REMOVED***;
