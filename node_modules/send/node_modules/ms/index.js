/**
 * Helpers.
 */

var s = 1000;
var m = s * 60;
var h = m * 60;
var d = h * 24;
var w = d * 7;
var y = d * 365.25;

/**
 * Parse or format the given `val`.
 *
 * Options:
 *
 *  - `long` verbose formatting [false]
 *
 * @param ***REMOVED***String|Number***REMOVED*** val
 * @param ***REMOVED***Object***REMOVED*** [options]
 * @throws ***REMOVED***Error***REMOVED*** throw an error if val is not a non-empty string or a number
 * @return ***REMOVED***String|Number***REMOVED***
 * @api public
 */

module.exports = function(val, options) ***REMOVED***
  options = options || ***REMOVED******REMOVED***;
  var type = typeof val;
  if (type === 'string' && val.length > 0) ***REMOVED***
    return parse(val);
  ***REMOVED*** else if (type === 'number' && isNaN(val) === false) ***REMOVED***
    return options.long ? fmtLong(val) : fmtShort(val);
  ***REMOVED***
  throw new Error(
    'val is not a non-empty string or a valid number. val=' +
      JSON.stringify(val)
  );
***REMOVED***;

/**
 * Parse the given `str` and return milliseconds.
 *
 * @param ***REMOVED***String***REMOVED*** str
 * @return ***REMOVED***Number***REMOVED***
 * @api private
 */

function parse(str) ***REMOVED***
  str = String(str);
  if (str.length > 100) ***REMOVED***
    return;
  ***REMOVED***
  var match = /^((?:\d+)?\-?\d?\.?\d+) *(milliseconds?|msecs?|ms|seconds?|secs?|s|minutes?|mins?|m|hours?|hrs?|h|days?|d|weeks?|w|years?|yrs?|y)?$/i.exec(
    str
  );
  if (!match) ***REMOVED***
    return;
  ***REMOVED***
  var n = parseFloat(match[1]);
  var type = (match[2] || 'ms').toLowerCase();
  switch (type) ***REMOVED***
    case 'years':
    case 'year':
    case 'yrs':
    case 'yr':
    case 'y':
      return n * y;
    case 'weeks':
    case 'week':
    case 'w':
      return n * w;
    case 'days':
    case 'day':
    case 'd':
      return n * d;
    case 'hours':
    case 'hour':
    case 'hrs':
    case 'hr':
    case 'h':
      return n * h;
    case 'minutes':
    case 'minute':
    case 'mins':
    case 'min':
    case 'm':
      return n * m;
    case 'seconds':
    case 'second':
    case 'secs':
    case 'sec':
    case 's':
      return n * s;
    case 'milliseconds':
    case 'millisecond':
    case 'msecs':
    case 'msec':
    case 'ms':
      return n;
    default:
      return undefined;
  ***REMOVED***
***REMOVED***

/**
 * Short format for `ms`.
 *
 * @param ***REMOVED***Number***REMOVED*** ms
 * @return ***REMOVED***String***REMOVED***
 * @api private
 */

function fmtShort(ms) ***REMOVED***
  var msAbs = Math.abs(ms);
  if (msAbs >= d) ***REMOVED***
    return Math.round(ms / d) + 'd';
  ***REMOVED***
  if (msAbs >= h) ***REMOVED***
    return Math.round(ms / h) + 'h';
  ***REMOVED***
  if (msAbs >= m) ***REMOVED***
    return Math.round(ms / m) + 'm';
  ***REMOVED***
  if (msAbs >= s) ***REMOVED***
    return Math.round(ms / s) + 's';
  ***REMOVED***
  return ms + 'ms';
***REMOVED***

/**
 * Long format for `ms`.
 *
 * @param ***REMOVED***Number***REMOVED*** ms
 * @return ***REMOVED***String***REMOVED***
 * @api private
 */

function fmtLong(ms) ***REMOVED***
  var msAbs = Math.abs(ms);
  if (msAbs >= d) ***REMOVED***
    return plural(ms, msAbs, d, 'day');
  ***REMOVED***
  if (msAbs >= h) ***REMOVED***
    return plural(ms, msAbs, h, 'hour');
  ***REMOVED***
  if (msAbs >= m) ***REMOVED***
    return plural(ms, msAbs, m, 'minute');
  ***REMOVED***
  if (msAbs >= s) ***REMOVED***
    return plural(ms, msAbs, s, 'second');
  ***REMOVED***
  return ms + ' ms';
***REMOVED***

/**
 * Pluralization helper.
 */

function plural(ms, msAbs, n, name) ***REMOVED***
  var isPlural = msAbs >= n * 1.5;
  return Math.round(ms / n) + ' ' + name + (isPlural ? 's' : '');
***REMOVED***
