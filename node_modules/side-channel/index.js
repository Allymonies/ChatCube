'use strict';

var GetIntrinsic = require('get-intrinsic');
var callBound = require('call-bind/callBound');
var inspect = require('object-inspect');

var $TypeError = GetIntrinsic('%TypeError%');
var $WeakMap = GetIntrinsic('%WeakMap%', true);
var $Map = GetIntrinsic('%Map%', true);

var $weakMapGet = callBound('WeakMap.prototype.get', true);
var $weakMapSet = callBound('WeakMap.prototype.set', true);
var $weakMapHas = callBound('WeakMap.prototype.has', true);
var $mapGet = callBound('Map.prototype.get', true);
var $mapSet = callBound('Map.prototype.set', true);
var $mapHas = callBound('Map.prototype.has', true);

/*
 * This function traverses the list returning the node corresponding to the
 * given key.
 *
 * That node is also moved to the head of the list, so that if it's accessed
 * again we don't need to traverse the whole list. By doing so, all the recently
 * used nodes can be accessed relatively quickly.
 */
var listGetNode = function (list, key) ***REMOVED*** // eslint-disable-line consistent-return
	for (var prev = list, curr; (curr = prev.next) !== null; prev = curr) ***REMOVED***
		if (curr.key === key) ***REMOVED***
			prev.next = curr.next;
			curr.next = list.next;
			list.next = curr; // eslint-disable-line no-param-reassign
			return curr;
		***REMOVED***
	***REMOVED***
***REMOVED***;

var listGet = function (objects, key) ***REMOVED***
	var node = listGetNode(objects, key);
	return node && node.value;
***REMOVED***;
var listSet = function (objects, key, value) ***REMOVED***
	var node = listGetNode(objects, key);
	if (node) ***REMOVED***
		node.value = value;
	***REMOVED*** else ***REMOVED***
		// Prepend the new node to the beginning of the list
		objects.next = ***REMOVED*** // eslint-disable-line no-param-reassign
			key: key,
			next: objects.next,
			value: value
		***REMOVED***;
	***REMOVED***
***REMOVED***;
var listHas = function (objects, key) ***REMOVED***
	return !!listGetNode(objects, key);
***REMOVED***;

module.exports = function getSideChannel() ***REMOVED***
	var $wm;
	var $m;
	var $o;
	var channel = ***REMOVED***
		assert: function (key) ***REMOVED***
			if (!channel.has(key)) ***REMOVED***
				throw new $TypeError('Side channel does not contain ' + inspect(key));
			***REMOVED***
		***REMOVED***,
		get: function (key) ***REMOVED*** // eslint-disable-line consistent-return
			if ($WeakMap && key && (typeof key === 'object' || typeof key === 'function')) ***REMOVED***
				if ($wm) ***REMOVED***
					return $weakMapGet($wm, key);
				***REMOVED***
			***REMOVED*** else if ($Map) ***REMOVED***
				if ($m) ***REMOVED***
					return $mapGet($m, key);
				***REMOVED***
			***REMOVED*** else ***REMOVED***
				if ($o) ***REMOVED*** // eslint-disable-line no-lonely-if
					return listGet($o, key);
				***REMOVED***
			***REMOVED***
		***REMOVED***,
		has: function (key) ***REMOVED***
			if ($WeakMap && key && (typeof key === 'object' || typeof key === 'function')) ***REMOVED***
				if ($wm) ***REMOVED***
					return $weakMapHas($wm, key);
				***REMOVED***
			***REMOVED*** else if ($Map) ***REMOVED***
				if ($m) ***REMOVED***
					return $mapHas($m, key);
				***REMOVED***
			***REMOVED*** else ***REMOVED***
				if ($o) ***REMOVED*** // eslint-disable-line no-lonely-if
					return listHas($o, key);
				***REMOVED***
			***REMOVED***
			return false;
		***REMOVED***,
		set: function (key, value) ***REMOVED***
			if ($WeakMap && key && (typeof key === 'object' || typeof key === 'function')) ***REMOVED***
				if (!$wm) ***REMOVED***
					$wm = new $WeakMap();
				***REMOVED***
				$weakMapSet($wm, key, value);
			***REMOVED*** else if ($Map) ***REMOVED***
				if (!$m) ***REMOVED***
					$m = new $Map();
				***REMOVED***
				$mapSet($m, key, value);
			***REMOVED*** else ***REMOVED***
				if (!$o) ***REMOVED***
					/*
					 * Initialize the linked list as an empty node, so that we don't have
					 * to special-case handling of the first node: we can always refer to
					 * it as (previous node).next, instead of something like (list).head
					 */
					$o = ***REMOVED*** key: ***REMOVED******REMOVED***, next: null ***REMOVED***;
				***REMOVED***
				listSet($o, key, value);
			***REMOVED***
		***REMOVED***
	***REMOVED***;
	return channel;
***REMOVED***;
