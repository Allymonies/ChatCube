const path = require('path');
const fs = require('fs');

function getTopPackagePath(thisPackagePath = '.') ***REMOVED***
	let packagePath = path.resolve(thisPackagePath);
	// find root package
	while (true) ***REMOVED***
		let nodeModulesPath = path.resolve(path.join(packagePath, '..'));
		if (path.basename(nodeModulesPath).startsWith('@')) ***REMOVED***
			// scoped package, go up one more
			nodeModulesPath = path.resolve(path.join(packagePath, '..'));
		***REMOVED***
		if (path.basename(nodeModulesPath) !== 'node_modules') ***REMOVED***
			// hello, monorepo
			break;
		***REMOVED***
		const nextPackagePath = path.resolve(path.join(nodeModulesPath, '..'));

		if (nextPackagePath === packagePath) ***REMOVED***
			// this is weird, we arrived at the root of the whole path hierarchy without finding a non-package folder
			throw new Error('Arrived at root of path hierarchy but found no non-package folder');
		***REMOVED***

		if (!fs.existsSync(path.join(nextPackagePath, 'package.json'))) ***REMOVED***
			// last dir was the root package
			break;
		***REMOVED***

		packagePath = nextPackagePath;
	***REMOVED***

	return packagePath;
***REMOVED***

function getTopPackageDependencies(thisPackagePath = '.', dev = false) ***REMOVED***
	const packagePath = getTopPackagePath(thisPackagePath);
	const packageJson = require(path.join(packagePath, 'package.json'));
	const dependencies = packageJson[dev ? 'devDependencies' : 'dependencies'];
	return dependencies || ***REMOVED******REMOVED***;
***REMOVED***

module.exports = ***REMOVED***
	default: getTopPackagePath,
	getTopPackageDependencies
***REMOVED***;

