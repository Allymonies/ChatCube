'use strict';

var GetIntrinsic = require('get-intrinsic');

var $TypeError = GetIntrinsic('%TypeError%');
var $asyncIterator = GetIntrinsic('%Symbol.asyncIterator%', true);

var inspect = require('object-inspect');
var hasSymbols = require('has-symbols')();

var getIteratorMethod = require('../helpers/getIteratorMethod');
var AdvanceStringIndex = require('./AdvanceStringIndex');
var Call = require('./Call');
var GetMethod = require('./GetMethod');
var IsArray = require('./IsArray');
var Type = require('./Type');

// https://262.ecma-international.org/9.0/#sec-getiterator
module.exports = function GetIterator(obj, hint, method) ***REMOVED***
	var actualHint = hint;
	if (arguments.length < 2) ***REMOVED***
		actualHint = 'sync';
	***REMOVED***
	if (actualHint !== 'sync' && actualHint !== 'async') ***REMOVED***
		throw new $TypeError("Assertion failed: `hint` must be one of 'sync' or 'async', got " + inspect(hint));
	***REMOVED***

	var actualMethod = method;
	if (arguments.length < 3) ***REMOVED***
		if (actualHint === 'async') ***REMOVED***
			if (hasSymbols && $asyncIterator) ***REMOVED***
				actualMethod = GetMethod(obj, $asyncIterator);
			***REMOVED***
			if (actualMethod === undefined) ***REMOVED***
				throw new $TypeError("async from sync iterators aren't currently supported");
			***REMOVED***
		***REMOVED*** else ***REMOVED***
			actualMethod = getIteratorMethod(
				***REMOVED***
					AdvanceStringIndex: AdvanceStringIndex,
					GetMethod: GetMethod,
					IsArray: IsArray,
					Type: Type
				***REMOVED***,
				obj
			);
		***REMOVED***
	***REMOVED***
	var iterator = Call(actualMethod, obj);
	if (Type(iterator) !== 'Object') ***REMOVED***
		throw new $TypeError('iterator must return an object');
	***REMOVED***

	return iterator;

	// TODO: This should return an IteratorRecord
	/*
	var nextMethod = GetV(iterator, 'next');
	return ***REMOVED***
		'[[Iterator]]': iterator,
		'[[NextMethod]]': nextMethod,
		'[[Done]]': false
	***REMOVED***;
	*/
***REMOVED***;
