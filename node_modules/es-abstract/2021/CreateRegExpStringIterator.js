'use strict';

var GetIntrinsic = require('get-intrinsic');
var hasSymbols = require('has-symbols')();

var $TypeError = GetIntrinsic('%TypeError%');
var IteratorPrototype = GetIntrinsic('%IteratorPrototype%', true);
var $defineProperty = GetIntrinsic('%Object.defineProperty%', true);

var AdvanceStringIndex = require('./AdvanceStringIndex');
var CreateIterResultObject = require('./CreateIterResultObject');
var CreateMethodProperty = require('./CreateMethodProperty');
var Get = require('./Get');
var OrdinaryObjectCreate = require('./OrdinaryObjectCreate');
var RegExpExec = require('./RegExpExec');
var Set = require('./Set');
var ToLength = require('./ToLength');
var ToString = require('./ToString');
var Type = require('./Type');

var SLOT = require('internal-slot');

var RegExpStringIterator = function RegExpStringIterator(R, S, global, fullUnicode) ***REMOVED***
	if (Type(S) !== 'String') ***REMOVED***
		throw new $TypeError('`S` must be a string');
	***REMOVED***
	if (Type(global) !== 'Boolean') ***REMOVED***
		throw new $TypeError('`global` must be a boolean');
	***REMOVED***
	if (Type(fullUnicode) !== 'Boolean') ***REMOVED***
		throw new $TypeError('`fullUnicode` must be a boolean');
	***REMOVED***
	SLOT.set(this, '[[IteratingRegExp]]', R);
	SLOT.set(this, '[[IteratedString]]', S);
	SLOT.set(this, '[[Global]]', global);
	SLOT.set(this, '[[Unicode]]', fullUnicode);
	SLOT.set(this, '[[Done]]', false);
***REMOVED***;

if (IteratorPrototype) ***REMOVED***
	RegExpStringIterator.prototype = OrdinaryObjectCreate(IteratorPrototype);
***REMOVED***

var RegExpStringIteratorNext = function next() ***REMOVED***
	var O = this; // eslint-disable-line no-invalid-this
	if (Type(O) !== 'Object') ***REMOVED***
		throw new $TypeError('receiver must be an object');
	***REMOVED***
	if (
		!(O instanceof RegExpStringIterator)
        || !SLOT.has(O, '[[IteratingRegExp]]')
        || !SLOT.has(O, '[[IteratedString]]')
        || !SLOT.has(O, '[[Global]]')
        || !SLOT.has(O, '[[Unicode]]')
        || !SLOT.has(O, '[[Done]]')
	) ***REMOVED***
		throw new $TypeError('"this" value must be a RegExpStringIterator instance');
	***REMOVED***
	if (SLOT.get(O, '[[Done]]')) ***REMOVED***
		return CreateIterResultObject(undefined, true);
	***REMOVED***
	var R = SLOT.get(O, '[[IteratingRegExp]]');
	var S = SLOT.get(O, '[[IteratedString]]');
	var global = SLOT.get(O, '[[Global]]');
	var fullUnicode = SLOT.get(O, '[[Unicode]]');
	var match = RegExpExec(R, S);
	if (match === null) ***REMOVED***
		SLOT.set(O, '[[Done]]', true);
		return CreateIterResultObject(undefined, true);
	***REMOVED***
	if (global) ***REMOVED***
		var matchStr = ToString(Get(match, '0'));
		if (matchStr === '') ***REMOVED***
			var thisIndex = ToLength(Get(R, 'lastIndex'));
			var nextIndex = AdvanceStringIndex(S, thisIndex, fullUnicode);
			Set(R, 'lastIndex', nextIndex, true);
		***REMOVED***
		return CreateIterResultObject(match, false);
	***REMOVED***
	SLOT.set(O, '[[Done]]', true);
	return CreateIterResultObject(match, false);
***REMOVED***;
CreateMethodProperty(RegExpStringIterator.prototype, 'next', RegExpStringIteratorNext);

if (hasSymbols) ***REMOVED***
	if (Symbol.toStringTag) ***REMOVED***
		if ($defineProperty) ***REMOVED***
			$defineProperty(RegExpStringIterator.prototype, Symbol.toStringTag, ***REMOVED***
				configurable: true,
				enumerable: false,
				value: 'RegExp String Iterator',
				writable: false
			***REMOVED***);
		***REMOVED*** else ***REMOVED***
			RegExpStringIterator.prototype[Symbol.toStringTag] = 'RegExp String Iterator';
		***REMOVED***
	***REMOVED***

	if (Symbol.iterator && typeof RegExpStringIterator.prototype[Symbol.iterator] !== 'function') ***REMOVED***
		var iteratorFn = function SymbolIterator() ***REMOVED***
			return this;
		***REMOVED***;
		CreateMethodProperty(RegExpStringIterator.prototype, Symbol.iterator, iteratorFn);
	***REMOVED***
***REMOVED***

// https://262.ecma-international.org/11.0/#sec-createregexpstringiterator
module.exports = function CreateRegExpStringIterator(R, S, global, fullUnicode) ***REMOVED***
	// assert R.global === global && R.unicode === fullUnicode?
	return new RegExpStringIterator(R, S, global, fullUnicode);
***REMOVED***;
