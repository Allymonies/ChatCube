'use strict';

var GetIntrinsic = require('get-intrinsic');

var $TypeError = GetIntrinsic('%TypeError%');

var callBound = require('call-bind/callBound');
var $charAt = callBound('String.prototype.charAt');
var $stringToString = callBound('String.prototype.toString');

var CanonicalNumericIndexString = require('./CanonicalNumericIndexString');
var IsIntegralNumber = require('./IsIntegralNumber');
var IsPropertyKey = require('./IsPropertyKey');
var Type = require('./Type');

var isNegativeZero = require('is-negative-zero');

// https://ecma-international.org/ecma-262/12.0/#sec-stringgetownproperty

module.exports = function StringGetOwnProperty(S, P) ***REMOVED***
	var str;
	if (Type(S) === 'Object') ***REMOVED***
		try ***REMOVED***
			str = $stringToString(S);
		***REMOVED*** catch (e) ***REMOVED*** /**/ ***REMOVED***
	***REMOVED***
	if (Type(str) !== 'String') ***REMOVED***
		throw new $TypeError('Assertion failed: `S` must be a boxed string object');
	***REMOVED***
	if (!IsPropertyKey(P)) ***REMOVED***
		throw new $TypeError('Assertion failed: IsPropertyKey(P) is not true');
	***REMOVED***
	if (Type(P) !== 'String') ***REMOVED***
		return void undefined;
	***REMOVED***
	var index = CanonicalNumericIndexString(P);
	var len = str.length;
	if (typeof index === 'undefined' || !IsIntegralNumber(index) || isNegativeZero(index) || index < 0 || len <= index) ***REMOVED***
		return void undefined;
	***REMOVED***
	var resultStr = $charAt(S, index);
	return ***REMOVED***
		'[[Configurable]]': false,
		'[[Enumerable]]': true,
		'[[Value]]': resultStr,
		'[[Writable]]': false
	***REMOVED***;
***REMOVED***;
