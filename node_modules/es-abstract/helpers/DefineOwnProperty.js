'use strict';

var GetIntrinsic = require('get-intrinsic');

var $defineProperty = GetIntrinsic('%Object.defineProperty%', true);

if ($defineProperty) ***REMOVED***
	try ***REMOVED***
		$defineProperty(***REMOVED******REMOVED***, 'a', ***REMOVED*** value: 1 ***REMOVED***);
	***REMOVED*** catch (e) ***REMOVED***
		// IE 8 has a broken defineProperty
		$defineProperty = null;
	***REMOVED***
***REMOVED***

// node v0.6 has a bug where array lengths can be Set but not Defined
var hasArrayLengthDefineBug = Object.defineProperty && Object.defineProperty([], 'length', ***REMOVED*** value: 1 ***REMOVED***).length === 0;

// eslint-disable-next-line global-require
var isArray = hasArrayLengthDefineBug && require('../2020/IsArray'); // this does not depend on any other AOs.

var callBound = require('call-bind/callBound');

var $isEnumerable = callBound('Object.prototype.propertyIsEnumerable');

// eslint-disable-next-line max-params
module.exports = function DefineOwnProperty(IsDataDescriptor, SameValue, FromPropertyDescriptor, O, P, desc) ***REMOVED***
	if (!$defineProperty) ***REMOVED***
		if (!IsDataDescriptor(desc)) ***REMOVED***
			// ES3 does not support getters/setters
			return false;
		***REMOVED***
		if (!desc['[[Configurable]]'] || !desc['[[Writable]]']) ***REMOVED***
			return false;
		***REMOVED***

		// fallback for ES3
		if (P in O && $isEnumerable(O, P) !== !!desc['[[Enumerable]]']) ***REMOVED***
			// a non-enumerable existing property
			return false;
		***REMOVED***

		// property does not exist at all, or exists but is enumerable
		var V = desc['[[Value]]'];
		// eslint-disable-next-line no-param-reassign
		O[P] = V; // will use [[Define]]
		return SameValue(O[P], V);
	***REMOVED***
	if (
		hasArrayLengthDefineBug
		&& P === 'length'
		&& '[[Value]]' in desc
		&& isArray(O)
		&& O.length !== desc['[[Value]]']
	) ***REMOVED***
		// eslint-disable-next-line no-param-reassign
		O.length = desc['[[Value]]'];
		return O.length === desc['[[Value]]'];
	***REMOVED***

	$defineProperty(O, P, FromPropertyDescriptor(desc));
	return true;
***REMOVED***;
