'use strict';

var GetIntrinsic = require('get-intrinsic');

var $TypeError = GetIntrinsic('%TypeError%');

var DefineOwnProperty = require('../helpers/DefineOwnProperty');
var isPropertyDescriptor = require('../helpers/isPropertyDescriptor');
var isSamePropertyDescriptor = require('../helpers/isSamePropertyDescriptor');

var FromPropertyDescriptor = require('./FromPropertyDescriptor');
var IsAccessorDescriptor = require('./IsAccessorDescriptor');
var IsDataDescriptor = require('./IsDataDescriptor');
var IsGenericDescriptor = require('./IsGenericDescriptor');
var IsPropertyKey = require('./IsPropertyKey');
var SameValue = require('./SameValue');
var Type = require('./Type');

// https://ecma-international.org/ecma-262/6.0/#sec-validateandapplypropertydescriptor
// https://ecma-international.org/ecma-262/8.0/#sec-validateandapplypropertydescriptor

// eslint-disable-next-line max-lines-per-function, max-statements, max-params
module.exports = function ValidateAndApplyPropertyDescriptor(O, P, extensible, Desc, current) ***REMOVED***
	// this uses the ES2017+ logic, since it fixes a number of bugs in the ES2015 logic.
	var oType = Type(O);
	if (oType !== 'Undefined' && oType !== 'Object') ***REMOVED***
		throw new $TypeError('Assertion failed: O must be undefined or an Object');
	***REMOVED***
	if (Type(extensible) !== 'Boolean') ***REMOVED***
		throw new $TypeError('Assertion failed: extensible must be a Boolean');
	***REMOVED***
	if (!isPropertyDescriptor(***REMOVED***
		Type: Type,
		IsDataDescriptor: IsDataDescriptor,
		IsAccessorDescriptor: IsAccessorDescriptor
	***REMOVED***, Desc)) ***REMOVED***
		throw new $TypeError('Assertion failed: Desc must be a Property Descriptor');
	***REMOVED***
	if (Type(current) !== 'Undefined' && !isPropertyDescriptor(***REMOVED***
		Type: Type,
		IsDataDescriptor: IsDataDescriptor,
		IsAccessorDescriptor: IsAccessorDescriptor
	***REMOVED***, current)) ***REMOVED***
		throw new $TypeError('Assertion failed: current must be a Property Descriptor, or undefined');
	***REMOVED***
	if (oType !== 'Undefined' && !IsPropertyKey(P)) ***REMOVED***
		throw new $TypeError('Assertion failed: if O is not undefined, P must be a Property Key');
	***REMOVED***
	if (Type(current) === 'Undefined') ***REMOVED***
		if (!extensible) ***REMOVED***
			return false;
		***REMOVED***
		if (IsGenericDescriptor(Desc) || IsDataDescriptor(Desc)) ***REMOVED***
			if (oType !== 'Undefined') ***REMOVED***
				DefineOwnProperty(
					IsDataDescriptor,
					SameValue,
					FromPropertyDescriptor,
					O,
					P,
					***REMOVED***
						'[[Configurable]]': Desc['[[Configurable]]'],
						'[[Enumerable]]': Desc['[[Enumerable]]'],
						'[[Value]]': Desc['[[Value]]'],
						'[[Writable]]': Desc['[[Writable]]']
					***REMOVED***
				);
			***REMOVED***
		***REMOVED*** else ***REMOVED***
			if (!IsAccessorDescriptor(Desc)) ***REMOVED***
				throw new $TypeError('Assertion failed: Desc is not an accessor descriptor');
			***REMOVED***
			if (oType !== 'Undefined') ***REMOVED***
				return DefineOwnProperty(
					IsDataDescriptor,
					SameValue,
					FromPropertyDescriptor,
					O,
					P,
					Desc
				);
			***REMOVED***
		***REMOVED***
		return true;
	***REMOVED***
	if (IsGenericDescriptor(Desc) && !('[[Configurable]]' in Desc) && !('[[Enumerable]]' in Desc)) ***REMOVED***
		return true;
	***REMOVED***
	if (isSamePropertyDescriptor(***REMOVED*** SameValue: SameValue ***REMOVED***, Desc, current)) ***REMOVED***
		return true; // removed by ES2017, but should still be correct
	***REMOVED***
	// "if every field in Desc is absent, return true" can't really match the assertion that it's a Property Descriptor
	if (!current['[[Configurable]]']) ***REMOVED***
		if (Desc['[[Configurable]]']) ***REMOVED***
			return false;
		***REMOVED***
		if ('[[Enumerable]]' in Desc && !Desc['[[Enumerable]]'] === !!current['[[Enumerable]]']) ***REMOVED***
			return false;
		***REMOVED***
	***REMOVED***
	if (IsGenericDescriptor(Desc)) ***REMOVED***
		// no further validation is required.
	***REMOVED*** else if (IsDataDescriptor(current) !== IsDataDescriptor(Desc)) ***REMOVED***
		if (!current['[[Configurable]]']) ***REMOVED***
			return false;
		***REMOVED***
		if (IsDataDescriptor(current)) ***REMOVED***
			if (oType !== 'Undefined') ***REMOVED***
				DefineOwnProperty(
					IsDataDescriptor,
					SameValue,
					FromPropertyDescriptor,
					O,
					P,
					***REMOVED***
						'[[Configurable]]': current['[[Configurable]]'],
						'[[Enumerable]]': current['[[Enumerable]]'],
						'[[Get]]': undefined
					***REMOVED***
				);
			***REMOVED***
		***REMOVED*** else if (oType !== 'Undefined') ***REMOVED***
			DefineOwnProperty(
				IsDataDescriptor,
				SameValue,
				FromPropertyDescriptor,
				O,
				P,
				***REMOVED***
					'[[Configurable]]': current['[[Configurable]]'],
					'[[Enumerable]]': current['[[Enumerable]]'],
					'[[Value]]': undefined
				***REMOVED***
			);
		***REMOVED***
	***REMOVED*** else if (IsDataDescriptor(current) && IsDataDescriptor(Desc)) ***REMOVED***
		if (!current['[[Configurable]]'] && !current['[[Writable]]']) ***REMOVED***
			if ('[[Writable]]' in Desc && Desc['[[Writable]]']) ***REMOVED***
				return false;
			***REMOVED***
			if ('[[Value]]' in Desc && !SameValue(Desc['[[Value]]'], current['[[Value]]'])) ***REMOVED***
				return false;
			***REMOVED***
			return true;
		***REMOVED***
	***REMOVED*** else if (IsAccessorDescriptor(current) && IsAccessorDescriptor(Desc)) ***REMOVED***
		if (!current['[[Configurable]]']) ***REMOVED***
			if ('[[Set]]' in Desc && !SameValue(Desc['[[Set]]'], current['[[Set]]'])) ***REMOVED***
				return false;
			***REMOVED***
			if ('[[Get]]' in Desc && !SameValue(Desc['[[Get]]'], current['[[Get]]'])) ***REMOVED***
				return false;
			***REMOVED***
			return true;
		***REMOVED***
	***REMOVED*** else ***REMOVED***
		throw new $TypeError('Assertion failed: current and Desc are not both data, both accessors, or one accessor and one data.');
	***REMOVED***
	if (oType !== 'Undefined') ***REMOVED***
		return DefineOwnProperty(
			IsDataDescriptor,
			SameValue,
			FromPropertyDescriptor,
			O,
			P,
			Desc
		);
	***REMOVED***
	return true;
***REMOVED***;
