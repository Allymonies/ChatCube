'use strict';

var GetIntrinsic = require('get-intrinsic');

var $ObjectCreate = GetIntrinsic('%Object.create%', true);
var $TypeError = GetIntrinsic('%TypeError%');
var $SyntaxError = GetIntrinsic('%SyntaxError%');

var IsArray = require('./IsArray');
var Type = require('./Type');

var hasProto = !(***REMOVED*** __proto__: null ***REMOVED*** instanceof Object);

// https://262.ecma-international.org/6.0/#sec-objectcreate

module.exports = function OrdinaryObjectCreate(proto) ***REMOVED***
	if (proto !== null && Type(proto) !== 'Object') ***REMOVED***
		throw new $TypeError('Assertion failed: `proto` must be null or an object');
	***REMOVED***
	var additionalInternalSlotsList = arguments.length < 2 ? [] : arguments[1];
	if (!IsArray(additionalInternalSlotsList)) ***REMOVED***
		throw new $TypeError('Assertion failed: `additionalInternalSlotsList` must be an Array');
	***REMOVED***
	// var internalSlotsList = ['[[Prototype]]', '[[Extensible]]'];
	if (additionalInternalSlotsList.length > 0) ***REMOVED***
		throw new $SyntaxError('es-abstract does not yet support internal slots');
		// internalSlotsList.push(...additionalInternalSlotsList);
	***REMOVED***
	// var O = MakeBasicObject(internalSlotsList);
	// setProto(O, proto);
	// return O;

	if ($ObjectCreate) ***REMOVED***
		return $ObjectCreate(proto);
	***REMOVED***
	if (hasProto) ***REMOVED***
		return ***REMOVED*** __proto__: proto ***REMOVED***;
	***REMOVED***

	if (proto === null) ***REMOVED***
		throw new $SyntaxError('native Object.create support is required to create null objects');
	***REMOVED***
	var T = function T() ***REMOVED******REMOVED***;
	T.prototype = proto;
	return new T();
***REMOVED***;
