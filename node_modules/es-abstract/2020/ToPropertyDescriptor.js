'use strict';

var has = require('has');

var GetIntrinsic = require('get-intrinsic');

var $TypeError = GetIntrinsic('%TypeError%');

var Type = require('./Type');
var ToBoolean = require('./ToBoolean');
var IsCallable = require('./IsCallable');

// https://262.ecma-international.org/5.1/#sec-8.10.5

module.exports = function ToPropertyDescriptor(Obj) ***REMOVED***
	if (Type(Obj) !== 'Object') ***REMOVED***
		throw new $TypeError('ToPropertyDescriptor requires an object');
	***REMOVED***

	var desc = ***REMOVED******REMOVED***;
	if (has(Obj, 'enumerable')) ***REMOVED***
		desc['[[Enumerable]]'] = ToBoolean(Obj.enumerable);
	***REMOVED***
	if (has(Obj, 'configurable')) ***REMOVED***
		desc['[[Configurable]]'] = ToBoolean(Obj.configurable);
	***REMOVED***
	if (has(Obj, 'value')) ***REMOVED***
		desc['[[Value]]'] = Obj.value;
	***REMOVED***
	if (has(Obj, 'writable')) ***REMOVED***
		desc['[[Writable]]'] = ToBoolean(Obj.writable);
	***REMOVED***
	if (has(Obj, 'get')) ***REMOVED***
		var getter = Obj.get;
		if (typeof getter !== 'undefined' && !IsCallable(getter)) ***REMOVED***
			throw new $TypeError('getter must be a function');
		***REMOVED***
		desc['[[Get]]'] = getter;
	***REMOVED***
	if (has(Obj, 'set')) ***REMOVED***
		var setter = Obj.set;
		if (typeof setter !== 'undefined' && !IsCallable(setter)) ***REMOVED***
			throw new $TypeError('setter must be a function');
		***REMOVED***
		desc['[[Set]]'] = setter;
	***REMOVED***

	if ((has(desc, '[[Get]]') || has(desc, '[[Set]]')) && (has(desc, '[[Value]]') || has(desc, '[[Writable]]'))) ***REMOVED***
		throw new $TypeError('Invalid property descriptor. Cannot both specify accessors and a value or writable attribute');
	***REMOVED***
	return desc;
***REMOVED***;
