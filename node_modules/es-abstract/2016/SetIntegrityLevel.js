'use strict';

var GetIntrinsic = require('get-intrinsic');

var $SyntaxError = GetIntrinsic('%SyntaxError%');
var $TypeError = GetIntrinsic('%TypeError%');
var $preventExtensions = GetIntrinsic('%Object.preventExtensions%');
var $gOPD = require('../helpers/getOwnPropertyDescriptor');
var $gOPN = GetIntrinsic('%Object.getOwnPropertyNames%');

var forEach = require('../helpers/forEach');

var DefinePropertyOrThrow = require('./DefinePropertyOrThrow');
var IsAccessorDescriptor = require('./IsAccessorDescriptor');
var ToPropertyDescriptor = require('./ToPropertyDescriptor');
var Type = require('./Type');

// https://ecma-international.org/ecma-262/6.0/#sec-setintegritylevel

module.exports = function SetIntegrityLevel(O, level) ***REMOVED***
	if (Type(O) !== 'Object') ***REMOVED***
		throw new $TypeError('Assertion failed: Type(O) is not Object');
	***REMOVED***
	if (level !== 'sealed' && level !== 'frozen') ***REMOVED***
		throw new $TypeError('Assertion failed: `level` must be `"sealed"` or `"frozen"`');
	***REMOVED***
	if (!$preventExtensions) ***REMOVED***
		throw new $SyntaxError('SetIntegrityLevel requires native `Object.preventExtensions` support');
	***REMOVED***
	var status = $preventExtensions(O);
	if (!status) ***REMOVED***
		return false;
	***REMOVED***
	if (!$gOPN) ***REMOVED***
		throw new $SyntaxError('SetIntegrityLevel requires native `Object.getOwnPropertyNames` support');
	***REMOVED***
	var theKeys = $gOPN(O);
	if (level === 'sealed') ***REMOVED***
		forEach(theKeys, function (k) ***REMOVED***
			DefinePropertyOrThrow(O, k, ***REMOVED*** configurable: false ***REMOVED***);
		***REMOVED***);
	***REMOVED*** else if (level === 'frozen') ***REMOVED***
		forEach(theKeys, function (k) ***REMOVED***
			var currentDesc = $gOPD(O, k);
			if (typeof currentDesc !== 'undefined') ***REMOVED***
				var desc;
				if (IsAccessorDescriptor(ToPropertyDescriptor(currentDesc))) ***REMOVED***
					desc = ***REMOVED*** configurable: false ***REMOVED***;
				***REMOVED*** else ***REMOVED***
					desc = ***REMOVED*** configurable: false, writable: false ***REMOVED***;
				***REMOVED***
				DefinePropertyOrThrow(O, k, desc);
			***REMOVED***
		***REMOVED***);
	***REMOVED***
	return true;
***REMOVED***;
