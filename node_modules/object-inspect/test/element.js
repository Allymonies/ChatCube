var inspect = require('../');
var test = require('tape');

test('element', function (t) ***REMOVED***
    t.plan(3);
    var elem = ***REMOVED***
        nodeName: 'div',
        attributes: [***REMOVED*** name: 'class', value: 'row' ***REMOVED***],
        getAttribute: function (key) ***REMOVED*** return key; ***REMOVED***,
        childNodes: []
    ***REMOVED***;
    var obj = [1, elem, 3];
    t.deepEqual(inspect(obj), '[ 1, <div class="row"></div>, 3 ]');
    t.deepEqual(inspect(obj, ***REMOVED*** quoteStyle: 'single' ***REMOVED***), "[ 1, <div class='row'></div>, 3 ]");
    t.deepEqual(inspect(obj, ***REMOVED*** quoteStyle: 'double' ***REMOVED***), '[ 1, <div class="row"></div>, 3 ]');
***REMOVED***);

test('element no attr', function (t) ***REMOVED***
    t.plan(1);
    var elem = ***REMOVED***
        nodeName: 'div',
        getAttribute: function (key) ***REMOVED*** return key; ***REMOVED***,
        childNodes: []
    ***REMOVED***;
    var obj = [1, elem, 3];
    t.deepEqual(inspect(obj), '[ 1, <div></div>, 3 ]');
***REMOVED***);

test('element with contents', function (t) ***REMOVED***
    t.plan(1);
    var elem = ***REMOVED***
        nodeName: 'div',
        getAttribute: function (key) ***REMOVED*** return key; ***REMOVED***,
        childNodes: [***REMOVED*** nodeName: 'b' ***REMOVED***]
    ***REMOVED***;
    var obj = [1, elem, 3];
    t.deepEqual(inspect(obj), '[ 1, <div>...</div>, 3 ]');
***REMOVED***);

test('element instance', function (t) ***REMOVED***
    t.plan(1);
    var h = global.HTMLElement;
    global.HTMLElement = function (name, attr) ***REMOVED***
        this.nodeName = name;
        this.attributes = attr;
    ***REMOVED***;
    global.HTMLElement.prototype.getAttribute = function () ***REMOVED******REMOVED***;

    var elem = new global.HTMLElement('div', []);
    var obj = [1, elem, 3];
    t.deepEqual(inspect(obj), '[ 1, <div></div>, 3 ]');
    global.HTMLElement = h;
***REMOVED***);
