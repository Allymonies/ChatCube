'use strict';

var test = require('tape');
var hasToStringTag = require('has-tostringtag/shams')();

var inspect = require('../');

test('Symbol.toStringTag', ***REMOVED*** skip: !hasToStringTag ***REMOVED***, function (t) ***REMOVED***
    t.plan(4);

    var obj = ***REMOVED*** a: 1 ***REMOVED***;
    t.equal(inspect(obj), '***REMOVED*** a: 1 ***REMOVED***', 'object, no Symbol.toStringTag');

    obj[Symbol.toStringTag] = 'foo';
    t.equal(inspect(obj), '***REMOVED*** a: 1, [Symbol(Symbol.toStringTag)]: \'foo\' ***REMOVED***', 'object with Symbol.toStringTag');

    t.test('null objects', ***REMOVED*** skip: 'toString' in ***REMOVED*** __proto__: null ***REMOVED*** ***REMOVED***, function (st) ***REMOVED***
        st.plan(2);

        var dict = ***REMOVED*** __proto__: null, a: 1 ***REMOVED***;
        st.equal(inspect(dict), '[Object: null prototype] ***REMOVED*** a: 1 ***REMOVED***', 'null object with Symbol.toStringTag');

        dict[Symbol.toStringTag] = 'Dict';
        st.equal(inspect(dict), '[Dict: null prototype] ***REMOVED*** a: 1, [Symbol(Symbol.toStringTag)]: \'Dict\' ***REMOVED***', 'null object with Symbol.toStringTag');
    ***REMOVED***);

    t.test('instances', function (st) ***REMOVED***
        st.plan(4);

        function C() ***REMOVED***
            this.a = 1;
        ***REMOVED***
        st.equal(Object.prototype.toString.call(new C()), '[object Object]', 'instance, no toStringTag, Object.prototype.toString');
        st.equal(inspect(new C()), 'C ***REMOVED*** a: 1 ***REMOVED***', 'instance, no toStringTag');

        C.prototype[Symbol.toStringTag] = 'Class!';
        st.equal(Object.prototype.toString.call(new C()), '[object Class!]', 'instance, with toStringTag, Object.prototype.toString');
        st.equal(inspect(new C()), 'C [Class!] ***REMOVED*** a: 1 ***REMOVED***', 'instance, with toStringTag');
    ***REMOVED***);
***REMOVED***);
