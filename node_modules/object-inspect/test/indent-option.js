var test = require('tape');
var forEach = require('for-each');

var inspect = require('../');

test('bad indent options', function (t) ***REMOVED***
    forEach([
        undefined,
        true,
        false,
        -1,
        1.2,
        Infinity,
        -Infinity,
        NaN
    ], function (indent) ***REMOVED***
        t['throws'](
            function () ***REMOVED*** inspect('', ***REMOVED*** indent: indent ***REMOVED***); ***REMOVED***,
            TypeError,
            inspect(indent) + ' is invalid'
        );
    ***REMOVED***);

    t.end();
***REMOVED***);

test('simple object with indent', function (t) ***REMOVED***
    t.plan(2);

    var obj = ***REMOVED*** a: 1, b: 2 ***REMOVED***;

    var expectedSpaces = [
        '***REMOVED***',
        '  a: 1,',
        '  b: 2',
        '***REMOVED***'
    ].join('\n');
    var expectedTabs = [
        '***REMOVED***',
        '	a: 1,',
        '	b: 2',
        '***REMOVED***'
    ].join('\n');

    t.equal(inspect(obj, ***REMOVED*** indent: 2 ***REMOVED***), expectedSpaces, 'two');
    t.equal(inspect(obj, ***REMOVED*** indent: '\t' ***REMOVED***), expectedTabs, 'tabs');
***REMOVED***);

test('two deep object with indent', function (t) ***REMOVED***
    t.plan(2);

    var obj = ***REMOVED*** a: 1, b: ***REMOVED*** c: 3, d: 4 ***REMOVED*** ***REMOVED***;

    var expectedSpaces = [
        '***REMOVED***',
        '  a: 1,',
        '  b: ***REMOVED***',
        '    c: 3,',
        '    d: 4',
        '  ***REMOVED***',
        '***REMOVED***'
    ].join('\n');
    var expectedTabs = [
        '***REMOVED***',
        '	a: 1,',
        '	b: ***REMOVED***',
        '		c: 3,',
        '		d: 4',
        '	***REMOVED***',
        '***REMOVED***'
    ].join('\n');

    t.equal(inspect(obj, ***REMOVED*** indent: 2 ***REMOVED***), expectedSpaces, 'two');
    t.equal(inspect(obj, ***REMOVED*** indent: '\t' ***REMOVED***), expectedTabs, 'tabs');
***REMOVED***);

test('simple array with all single line elements', function (t) ***REMOVED***
    t.plan(2);

    var obj = [1, 2, 3, 'asdf\nsdf'];

    var expected = '[ 1, 2, 3, \'asdf\\nsdf\' ]';

    t.equal(inspect(obj, ***REMOVED*** indent: 2 ***REMOVED***), expected, 'two');
    t.equal(inspect(obj, ***REMOVED*** indent: '\t' ***REMOVED***), expected, 'tabs');
***REMOVED***);

test('array with complex elements', function (t) ***REMOVED***
    t.plan(2);

    var obj = [1, ***REMOVED*** a: 1, b: ***REMOVED*** c: 1 ***REMOVED*** ***REMOVED***, 'asdf\nsdf'];

    var expectedSpaces = [
        '[',
        '  1,',
        '  ***REMOVED***',
        '    a: 1,',
        '    b: ***REMOVED***',
        '      c: 1',
        '    ***REMOVED***',
        '  ***REMOVED***,',
        '  \'asdf\\nsdf\'',
        ']'
    ].join('\n');
    var expectedTabs = [
        '[',
        '	1,',
        '	***REMOVED***',
        '		a: 1,',
        '		b: ***REMOVED***',
        '			c: 1',
        '		***REMOVED***',
        '	***REMOVED***,',
        '	\'asdf\\nsdf\'',
        ']'
    ].join('\n');

    t.equal(inspect(obj, ***REMOVED*** indent: 2 ***REMOVED***), expectedSpaces, 'two');
    t.equal(inspect(obj, ***REMOVED*** indent: '\t' ***REMOVED***), expectedTabs, 'tabs');
***REMOVED***);

test('values', function (t) ***REMOVED***
    t.plan(2);
    var obj = [***REMOVED******REMOVED***, [], ***REMOVED*** 'a-b': 5 ***REMOVED***];

    var expectedSpaces = [
        '[',
        '  ***REMOVED******REMOVED***,',
        '  [],',
        '  ***REMOVED***',
        '    \'a-b\': 5',
        '  ***REMOVED***',
        ']'
    ].join('\n');
    var expectedTabs = [
        '[',
        '	***REMOVED******REMOVED***,',
        '	[],',
        '	***REMOVED***',
        '		\'a-b\': 5',
        '	***REMOVED***',
        ']'
    ].join('\n');

    t.equal(inspect(obj, ***REMOVED*** indent: 2 ***REMOVED***), expectedSpaces, 'two');
    t.equal(inspect(obj, ***REMOVED*** indent: '\t' ***REMOVED***), expectedTabs, 'tabs');
***REMOVED***);

test('Map', ***REMOVED*** skip: typeof Map !== 'function' ***REMOVED***, function (t) ***REMOVED***
    var map = new Map();
    map.set(***REMOVED*** a: 1 ***REMOVED***, ['b']);
    map.set(3, NaN);

    var expectedStringSpaces = [
        'Map (2) ***REMOVED***',
        '  ***REMOVED*** a: 1 ***REMOVED*** => [ \'b\' ],',
        '  3 => NaN',
        '***REMOVED***'
    ].join('\n');
    var expectedStringTabs = [
        'Map (2) ***REMOVED***',
        '	***REMOVED*** a: 1 ***REMOVED*** => [ \'b\' ],',
        '	3 => NaN',
        '***REMOVED***'
    ].join('\n');
    var expectedStringTabsDoubleQuotes = [
        'Map (2) ***REMOVED***',
        '	***REMOVED*** a: 1 ***REMOVED*** => [ "b" ],',
        '	3 => NaN',
        '***REMOVED***'
    ].join('\n');

    t.equal(
        inspect(map, ***REMOVED*** indent: 2 ***REMOVED***),
        expectedStringSpaces,
        'Map keys are not indented (two)'
    );
    t.equal(
        inspect(map, ***REMOVED*** indent: '\t' ***REMOVED***),
        expectedStringTabs,
        'Map keys are not indented (tabs)'
    );
    t.equal(
        inspect(map, ***REMOVED*** indent: '\t', quoteStyle: 'double' ***REMOVED***),
        expectedStringTabsDoubleQuotes,
        'Map keys are not indented (tabs + double quotes)'
    );

    t.equal(inspect(new Map(), ***REMOVED*** indent: 2 ***REMOVED***), 'Map (0) ***REMOVED******REMOVED***', 'empty Map should show as empty (two)');
    t.equal(inspect(new Map(), ***REMOVED*** indent: '\t' ***REMOVED***), 'Map (0) ***REMOVED******REMOVED***', 'empty Map should show as empty (tabs)');

    var nestedMap = new Map();
    nestedMap.set(nestedMap, map);
    var expectedNestedSpaces = [
        'Map (1) ***REMOVED***',
        '  [Circular] => Map (2) ***REMOVED***',
        '    ***REMOVED*** a: 1 ***REMOVED*** => [ \'b\' ],',
        '    3 => NaN',
        '  ***REMOVED***',
        '***REMOVED***'
    ].join('\n');
    var expectedNestedTabs = [
        'Map (1) ***REMOVED***',
        '	[Circular] => Map (2) ***REMOVED***',
        '		***REMOVED*** a: 1 ***REMOVED*** => [ \'b\' ],',
        '		3 => NaN',
        '	***REMOVED***',
        '***REMOVED***'
    ].join('\n');
    t.equal(inspect(nestedMap, ***REMOVED*** indent: 2 ***REMOVED***), expectedNestedSpaces, 'Map containing a Map should work (two)');
    t.equal(inspect(nestedMap, ***REMOVED*** indent: '\t' ***REMOVED***), expectedNestedTabs, 'Map containing a Map should work (tabs)');

    t.end();
***REMOVED***);

test('Set', ***REMOVED*** skip: typeof Set !== 'function' ***REMOVED***, function (t) ***REMOVED***
    var set = new Set();
    set.add(***REMOVED*** a: 1 ***REMOVED***);
    set.add(['b']);
    var expectedStringSpaces = [
        'Set (2) ***REMOVED***',
        '  ***REMOVED***',
        '    a: 1',
        '  ***REMOVED***,',
        '  [ \'b\' ]',
        '***REMOVED***'
    ].join('\n');
    var expectedStringTabs = [
        'Set (2) ***REMOVED***',
        '	***REMOVED***',
        '		a: 1',
        '	***REMOVED***,',
        '	[ \'b\' ]',
        '***REMOVED***'
    ].join('\n');
    t.equal(inspect(set, ***REMOVED*** indent: 2 ***REMOVED***), expectedStringSpaces, 'new Set([***REMOVED*** a: 1 ***REMOVED***, ["b"]]) should show size and contents (two)');
    t.equal(inspect(set, ***REMOVED*** indent: '\t' ***REMOVED***), expectedStringTabs, 'new Set([***REMOVED*** a: 1 ***REMOVED***, ["b"]]) should show size and contents (tabs)');

    t.equal(inspect(new Set(), ***REMOVED*** indent: 2 ***REMOVED***), 'Set (0) ***REMOVED******REMOVED***', 'empty Set should show as empty (two)');
    t.equal(inspect(new Set(), ***REMOVED*** indent: '\t' ***REMOVED***), 'Set (0) ***REMOVED******REMOVED***', 'empty Set should show as empty (tabs)');

    var nestedSet = new Set();
    nestedSet.add(set);
    nestedSet.add(nestedSet);
    var expectedNestedSpaces = [
        'Set (2) ***REMOVED***',
        '  Set (2) ***REMOVED***',
        '    ***REMOVED***',
        '      a: 1',
        '***REMOVED***',
        '    [ \'b\' ]',
        '  ***REMOVED***,',
        '  [Circular]',
        '***REMOVED***'
    ].join('\n');
    var expectedNestedTabs = [
        'Set (2) ***REMOVED***',
        '	Set (2) ***REMOVED***',
        '		***REMOVED***',
        '			a: 1',
        '		***REMOVED***,',
        '		[ \'b\' ]',
        '	***REMOVED***,',
        '	[Circular]',
        '***REMOVED***'
    ].join('\n');
    t.equal(inspect(nestedSet, ***REMOVED*** indent: 2 ***REMOVED***), expectedNestedSpaces, 'Set containing a Set should work (two)');
    t.equal(inspect(nestedSet, ***REMOVED*** indent: '\t' ***REMOVED***), expectedNestedTabs, 'Set containing a Set should work (tabs)');

    t.end();
***REMOVED***);
