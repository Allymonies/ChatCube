var inspect = require('../');
var test = require('tape');
var arrow = require('make-arrow-function')();
var functionsHaveConfigurableNames = require('functions-have-names').functionsHaveConfigurableNames();

test('function', function (t) ***REMOVED***
    t.plan(1);
    var obj = [1, 2, function f(n) ***REMOVED*** return n; ***REMOVED***, 4];
    t.equal(inspect(obj), '[ 1, 2, [Function: f], 4 ]');
***REMOVED***);

test('function name', function (t) ***REMOVED***
    t.plan(1);
    var f = (function () ***REMOVED***
        return function () ***REMOVED******REMOVED***;
    ***REMOVED***());
    f.toString = function toStr() ***REMOVED*** return 'function xxx () ***REMOVED******REMOVED***'; ***REMOVED***;
    var obj = [1, 2, f, 4];
    t.equal(inspect(obj), '[ 1, 2, [Function (anonymous)] ***REMOVED*** toString: [Function: toStr] ***REMOVED***, 4 ]');
***REMOVED***);

test('anon function', function (t) ***REMOVED***
    var f = (function () ***REMOVED***
        return function () ***REMOVED******REMOVED***;
    ***REMOVED***());
    var obj = [1, 2, f, 4];
    t.equal(inspect(obj), '[ 1, 2, [Function (anonymous)], 4 ]');

    t.end();
***REMOVED***);

test('arrow function', ***REMOVED*** skip: !arrow ***REMOVED***, function (t) ***REMOVED***
    t.equal(inspect(arrow), '[Function (anonymous)]');

    t.end();
***REMOVED***);

test('truly nameless function', ***REMOVED*** skip: !arrow || !functionsHaveConfigurableNames ***REMOVED***, function (t) ***REMOVED***
    function f() ***REMOVED******REMOVED***
    Object.defineProperty(f, 'name', ***REMOVED*** value: false ***REMOVED***);
    t.equal(f.name, false);
    t.equal(
        inspect(f),
        '[Function: f]',
        'named function with falsy `.name` does not hide its original name'
    );

    function g() ***REMOVED******REMOVED***
    Object.defineProperty(g, 'name', ***REMOVED*** value: true ***REMOVED***);
    t.equal(g.name, true);
    t.equal(
        inspect(g),
        '[Function: true]',
        'named function with truthy `.name` hides its original name'
    );

    var anon = function () ***REMOVED******REMOVED***; // eslint-disable-line func-style
    Object.defineProperty(anon, 'name', ***REMOVED*** value: null ***REMOVED***);
    t.equal(anon.name, null);
    t.equal(
        inspect(anon),
        '[Function (anonymous)]',
        'anon function with falsy `.name` does not hide its anonymity'
    );

    var anon2 = function () ***REMOVED******REMOVED***; // eslint-disable-line func-style
    Object.defineProperty(anon2, 'name', ***REMOVED*** value: 1 ***REMOVED***);
    t.equal(anon2.name, 1);
    t.equal(
        inspect(anon2),
        '[Function: 1]',
        'anon function with truthy `.name` hides its anonymity'
    );

    t.end();
***REMOVED***);
