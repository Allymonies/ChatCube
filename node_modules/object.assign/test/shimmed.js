'use strict';

var assign = require('../');
assign.shim();

var test = require('tape');
var defineProperties = require('define-properties');
var isEnumerable = Object.prototype.propertyIsEnumerable;
var functionsHaveNames = require('functions-have-names')();

var runTests = require('./tests');

test('shimmed', function (t) ***REMOVED***
	t.equal(Object.assign.length, 2, 'Object.assign has a length of 2');
	t.test('Function name', ***REMOVED*** skip: !functionsHaveNames ***REMOVED***, function (st) ***REMOVED***
		st.equal(Object.assign.name, 'assign', 'Object.assign has name "assign"');
		st.end();
	***REMOVED***);

	t.test('enumerability', ***REMOVED*** skip: !defineProperties.supportsDescriptors ***REMOVED***, function (et) ***REMOVED***
		et.equal(false, isEnumerable.call(Object, 'assign'), 'Object.assign is not enumerable');
		et.end();
	***REMOVED***);

	var supportsStrictMode = (function () ***REMOVED*** return typeof this === 'undefined'; ***REMOVED***());

	t.test('bad object value', ***REMOVED*** skip: !supportsStrictMode ***REMOVED***, function (st) ***REMOVED***
		st['throws'](function () ***REMOVED*** return Object.assign(undefined); ***REMOVED***, TypeError, 'undefined is not an object');
		st['throws'](function () ***REMOVED*** return Object.assign(null); ***REMOVED***, TypeError, 'null is not an object');
		st.end();
	***REMOVED***);

	// v8 in node 0.8 and 0.10 have non-enumerable string properties
	var stringCharsAreEnumerable = isEnumerable.call('xy', 0);
	t.test('when Object.assign is present and has pending exceptions', ***REMOVED*** skip: !stringCharsAreEnumerable || !Object.preventExtensions ***REMOVED***, function (st) ***REMOVED***
		/*
		 * Firefox 37 still has "pending exception" logic in its Object.assign implementation,
		 * which is 72% slower than our shim, and Firefox 40's native implementation.
		 */
		var thrower = Object.preventExtensions(***REMOVED*** 1: '2' ***REMOVED***);
		var error;
		try ***REMOVED*** Object.assign(thrower, 'xy'); ***REMOVED*** catch (e) ***REMOVED*** error = e; ***REMOVED***
		st.equal(error instanceof TypeError, true, 'error is TypeError');
		st.equal(thrower[1], '2', 'thrower[1] === "2"');

		st.end();
	***REMOVED***);

	runTests(Object.assign, t);

	t.end();
***REMOVED***);
