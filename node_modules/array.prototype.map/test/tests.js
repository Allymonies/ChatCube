var hasStrictMode = require('has-strict-mode')();

var global = Function('return this')(); // eslint-disable-line no-new-func
var identity = function (x) ***REMOVED*** return x; ***REMOVED***;
var arrayWrap = function (x) ***REMOVED*** return [x]; ***REMOVED***;

var canDistinguishSparseFromUndefined = 0 in [undefined]; // IE 6 - 8 have a bug where this returns false.
var undefinedIfNoSparseBug = canDistinguishSparseFromUndefined ? undefined : ***REMOVED*** valueOf: function () ***REMOVED*** return 0; ***REMOVED*** ***REMOVED***;

var createArrayLikeFromArray = function createArrayLike(arr) ***REMOVED***
	var o = ***REMOVED******REMOVED***;
	for (var i = 0; i < arr.length; i += 1) ***REMOVED***
		if (i in arr) ***REMOVED***
			o[i] = arr[i];
		***REMOVED***
	***REMOVED***
	o.length = arr.length;
	return o;
***REMOVED***;

var getTestArr = function () ***REMOVED***
	var arr = [2, 3, undefinedIfNoSparseBug, true, 'hej', null, false, 0];
	delete arr[1];
	return arr;
***REMOVED***;

module.exports = function (map, t) ***REMOVED***
	t.test('does not change the array it is called on', function (st) ***REMOVED***
		var arr = getTestArr();
		var copy = getTestArr();
		map(arr, arrayWrap);
		st.deepEqual(arr, copy, 'array');

		var arrayLike = createArrayLikeFromArray(arr);
		map(arrayLike, arrayWrap);
		st.deepEqual(arrayLike, createArrayLikeFromArray(copy), 'arrayLike');

		st.end();
	***REMOVED***);

	t.test('properly translates the values as according to the callback', function (st) ***REMOVED***
		var expected = [[2], [3], [undefinedIfNoSparseBug], [true], ['hej'], [null], [false], [0]];
		delete expected[1];

		var result = map(getTestArr(), arrayWrap);
		st.deepEqual(result, expected, 'array');

		var arrayLikeResult = map(createArrayLikeFromArray(getTestArr()), arrayWrap);
		st.deepEqual(arrayLikeResult, expected, 'arrayLike');

		st.end();
	***REMOVED***);

	t.test('skips non-existing values', function (st) ***REMOVED***
		var array = [1, 2, 3, 4];
		var arrayLike = createArrayLikeFromArray([1, 2, 3, 4]);
		delete array[2];
		delete arrayLike[2];

		var i = 0;
		map(array, function () ***REMOVED*** i += 1; ***REMOVED***);
		st.equal(i, 3, 'array');

		i = 0;
		map(arrayLike, function () ***REMOVED*** i += 1; ***REMOVED***);
		st.equal(i, 3, 'arrayLike');

		st.end();
	***REMOVED***);

	t.test('passes the correct values to the callback', function (st) ***REMOVED***
		st.plan(5);

		var expectedValue = ***REMOVED******REMOVED***;
		var arr = [expectedValue];
		var context = ***REMOVED******REMOVED***;
		map(
			arr,
			function (value, key, list) ***REMOVED***
				st.equal(arguments.length, 3);
				st.equal(value, expectedValue, 'first argument is the value');
				st.equal(key, 0, 'second argument is the index');
				st.equal(list, arr, 'third argument is the array being iterated');
				st.equal(this, context, 'receiver is the expected value');
			***REMOVED***,
			context
		);

		st.end();
	***REMOVED***);

	t.test('does not visit elements added to the array after it has begun', function (st) ***REMOVED***
		st.plan(4);

		var arr = [1, 2, 3];
		var i = 0;
		map(arr, function (a) ***REMOVED***
			i += 1;
			arr.push(a + 3);
		***REMOVED***);
		st.deepEqual(arr, [1, 2, 3, 4, 5, 6], 'array has received 3 new elements');
		st.equal(i, 3, 'map callback only called thrice');

		var arrayLike = createArrayLikeFromArray([1, 2, 3]);
		i = 0;
		map(arrayLike, function (a) ***REMOVED***
			i += 1;
			arrayLike[arrayLike.length] = a + 3;
			arrayLike.length += 1;
		***REMOVED***);
		st.deepEqual(Array.prototype.slice.call(arrayLike), [1, 2, 3, 4, 5, 6], 'arrayLike has received 3 new elements');
		st.equal(i, 3, 'map callback only called thrice');

		st.end();
	***REMOVED***);

	t.test('does not visit elements deleted from the array after it has begun', function (st) ***REMOVED***
		var arr = [1, 2, 3];
		var actual = [];
		map(arr, function (x, i) ***REMOVED***
			actual.push([i, x]);
			delete arr[1];
		***REMOVED***);
		st.deepEqual(actual, [[0, 1], [2, 3]]);

		st.end();
	***REMOVED***);

	t.test('sets the right context when given none', function (st) ***REMOVED***
		var context;
		map([1], function () ***REMOVED*** context = this; ***REMOVED***);
		st.equal(context, global, 'receiver is global object in sloppy mode');

		st.test('strict mode', ***REMOVED*** skip: !hasStrictMode ***REMOVED***, function (sst) ***REMOVED***
			map([1], function () ***REMOVED***
				'use strict';

				context = this;
			***REMOVED***);
			sst.equal(context, undefined, 'receiver is undefined in strict mode');
			sst.end();
		***REMOVED***);

		st.end();
	***REMOVED***);

	t.test('empty array', function (st) ***REMOVED***
		var arr = [];
		var actual = map(arr, identity);
		st.notEqual(actual, arr, 'empty array returns !== array');
		st.deepEqual(actual, arr, 'empty array returns empty array');

		st.end();
	***REMOVED***);

	t.test('list arg boxing', function (st) ***REMOVED***
		st.plan(3);

		map('f', function (item, index, list) ***REMOVED***
			st.equal(item, 'f', 'letter matches');
			st.equal(typeof list, 'object', 'primitive list arg is boxed');
			st.equal(Object.prototype.toString.call(list), '[object String]', 'boxed list arg is a String');
		***REMOVED***);

		st.end();
	***REMOVED***);
***REMOVED***;
