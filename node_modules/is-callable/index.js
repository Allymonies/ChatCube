'use strict';

var fnToStr = Function.prototype.toString;
var reflectApply = typeof Reflect === 'object' && Reflect !== null && Reflect.apply;
var badArrayLike;
var isCallableMarker;
if (typeof reflectApply === 'function' && typeof Object.defineProperty === 'function') ***REMOVED***
	try ***REMOVED***
		badArrayLike = Object.defineProperty(***REMOVED******REMOVED***, 'length', ***REMOVED***
			get: function () ***REMOVED***
				throw isCallableMarker;
			***REMOVED***
		***REMOVED***);
		isCallableMarker = ***REMOVED******REMOVED***;
		// eslint-disable-next-line no-throw-literal
		reflectApply(function () ***REMOVED*** throw 42; ***REMOVED***, null, badArrayLike);
	***REMOVED*** catch (_) ***REMOVED***
		if (_ !== isCallableMarker) ***REMOVED***
			reflectApply = null;
		***REMOVED***
	***REMOVED***
***REMOVED*** else ***REMOVED***
	reflectApply = null;
***REMOVED***

var constructorRegex = /^\s*class\b/;
var isES6ClassFn = function isES6ClassFunction(value) ***REMOVED***
	try ***REMOVED***
		var fnStr = fnToStr.call(value);
		return constructorRegex.test(fnStr);
	***REMOVED*** catch (e) ***REMOVED***
		return false; // not a function
	***REMOVED***
***REMOVED***;

var tryFunctionObject = function tryFunctionToStr(value) ***REMOVED***
	try ***REMOVED***
		if (isES6ClassFn(value)) ***REMOVED*** return false; ***REMOVED***
		fnToStr.call(value);
		return true;
	***REMOVED*** catch (e) ***REMOVED***
		return false;
	***REMOVED***
***REMOVED***;
var toStr = Object.prototype.toString;
var fnClass = '[object Function]';
var genClass = '[object GeneratorFunction]';
var hasToStringTag = typeof Symbol === 'function' && !!Symbol.toStringTag; // better: use `has-tostringtag`
/* globals document: false */
var documentDotAll = typeof document === 'object' && typeof document.all === 'undefined' && document.all !== undefined ? document.all : ***REMOVED******REMOVED***;

module.exports = reflectApply
	? function isCallable(value) ***REMOVED***
		if (value === documentDotAll) ***REMOVED*** return true; ***REMOVED***
		if (!value) ***REMOVED*** return false; ***REMOVED***
		if (typeof value !== 'function' && typeof value !== 'object') ***REMOVED*** return false; ***REMOVED***
		if (typeof value === 'function' && !value.prototype) ***REMOVED*** return true; ***REMOVED***
		try ***REMOVED***
			reflectApply(value, null, badArrayLike);
		***REMOVED*** catch (e) ***REMOVED***
			if (e !== isCallableMarker) ***REMOVED*** return false; ***REMOVED***
		***REMOVED***
		return !isES6ClassFn(value);
	***REMOVED***
	: function isCallable(value) ***REMOVED***
		if (value === documentDotAll) ***REMOVED*** return true; ***REMOVED***
		if (!value) ***REMOVED*** return false; ***REMOVED***
		if (typeof value !== 'function' && typeof value !== 'object') ***REMOVED*** return false; ***REMOVED***
		if (typeof value === 'function' && !value.prototype) ***REMOVED*** return true; ***REMOVED***
		if (hasToStringTag) ***REMOVED*** return tryFunctionObject(value); ***REMOVED***
		if (isES6ClassFn(value)) ***REMOVED*** return false; ***REMOVED***
		var strClass = toStr.call(value);
		return strClass === fnClass || strClass === genClass;
	***REMOVED***;
