"use strict";
const usm = require("./url-state-machine");

exports.implementation = class URLImpl ***REMOVED***
  constructor(constructorArgs) ***REMOVED***
    const url = constructorArgs[0];
    const base = constructorArgs[1];

    let parsedBase = null;
    if (base !== undefined) ***REMOVED***
      parsedBase = usm.basicURLParse(base);
      if (parsedBase === "failure") ***REMOVED***
        throw new TypeError("Invalid base URL");
      ***REMOVED***
    ***REMOVED***

    const parsedURL = usm.basicURLParse(url, ***REMOVED*** baseURL: parsedBase ***REMOVED***);
    if (parsedURL === "failure") ***REMOVED***
      throw new TypeError("Invalid URL");
    ***REMOVED***

    this._url = parsedURL;

    // TODO: query stuff
  ***REMOVED***

  get href() ***REMOVED***
    return usm.serializeURL(this._url);
  ***REMOVED***

  set href(v) ***REMOVED***
    const parsedURL = usm.basicURLParse(v);
    if (parsedURL === "failure") ***REMOVED***
      throw new TypeError("Invalid URL");
    ***REMOVED***

    this._url = parsedURL;
  ***REMOVED***

  get origin() ***REMOVED***
    return usm.serializeURLOrigin(this._url);
  ***REMOVED***

  get protocol() ***REMOVED***
    return this._url.scheme + ":";
  ***REMOVED***

  set protocol(v) ***REMOVED***
    usm.basicURLParse(v + ":", ***REMOVED*** url: this._url, stateOverride: "scheme start" ***REMOVED***);
  ***REMOVED***

  get username() ***REMOVED***
    return this._url.username;
  ***REMOVED***

  set username(v) ***REMOVED***
    if (usm.cannotHaveAUsernamePasswordPort(this._url)) ***REMOVED***
      return;
    ***REMOVED***

    usm.setTheUsername(this._url, v);
  ***REMOVED***

  get password() ***REMOVED***
    return this._url.password;
  ***REMOVED***

  set password(v) ***REMOVED***
    if (usm.cannotHaveAUsernamePasswordPort(this._url)) ***REMOVED***
      return;
    ***REMOVED***

    usm.setThePassword(this._url, v);
  ***REMOVED***

  get host() ***REMOVED***
    const url = this._url;

    if (url.host === null) ***REMOVED***
      return "";
    ***REMOVED***

    if (url.port === null) ***REMOVED***
      return usm.serializeHost(url.host);
    ***REMOVED***

    return usm.serializeHost(url.host) + ":" + usm.serializeInteger(url.port);
  ***REMOVED***

  set host(v) ***REMOVED***
    if (this._url.cannotBeABaseURL) ***REMOVED***
      return;
    ***REMOVED***

    usm.basicURLParse(v, ***REMOVED*** url: this._url, stateOverride: "host" ***REMOVED***);
  ***REMOVED***

  get hostname() ***REMOVED***
    if (this._url.host === null) ***REMOVED***
      return "";
    ***REMOVED***

    return usm.serializeHost(this._url.host);
  ***REMOVED***

  set hostname(v) ***REMOVED***
    if (this._url.cannotBeABaseURL) ***REMOVED***
      return;
    ***REMOVED***

    usm.basicURLParse(v, ***REMOVED*** url: this._url, stateOverride: "hostname" ***REMOVED***);
  ***REMOVED***

  get port() ***REMOVED***
    if (this._url.port === null) ***REMOVED***
      return "";
    ***REMOVED***

    return usm.serializeInteger(this._url.port);
  ***REMOVED***

  set port(v) ***REMOVED***
    if (usm.cannotHaveAUsernamePasswordPort(this._url)) ***REMOVED***
      return;
    ***REMOVED***

    if (v === "") ***REMOVED***
      this._url.port = null;
    ***REMOVED*** else ***REMOVED***
      usm.basicURLParse(v, ***REMOVED*** url: this._url, stateOverride: "port" ***REMOVED***);
    ***REMOVED***
  ***REMOVED***

  get pathname() ***REMOVED***
    if (this._url.cannotBeABaseURL) ***REMOVED***
      return this._url.path[0];
    ***REMOVED***

    if (this._url.path.length === 0) ***REMOVED***
      return "";
    ***REMOVED***

    return "/" + this._url.path.join("/");
  ***REMOVED***

  set pathname(v) ***REMOVED***
    if (this._url.cannotBeABaseURL) ***REMOVED***
      return;
    ***REMOVED***

    this._url.path = [];
    usm.basicURLParse(v, ***REMOVED*** url: this._url, stateOverride: "path start" ***REMOVED***);
  ***REMOVED***

  get search() ***REMOVED***
    if (this._url.query === null || this._url.query === "") ***REMOVED***
      return "";
    ***REMOVED***

    return "?" + this._url.query;
  ***REMOVED***

  set search(v) ***REMOVED***
    // TODO: query stuff

    const url = this._url;

    if (v === "") ***REMOVED***
      url.query = null;
      return;
    ***REMOVED***

    const input = v[0] === "?" ? v.substring(1) : v;
    url.query = "";
    usm.basicURLParse(input, ***REMOVED*** url, stateOverride: "query" ***REMOVED***);
  ***REMOVED***

  get hash() ***REMOVED***
    if (this._url.fragment === null || this._url.fragment === "") ***REMOVED***
      return "";
    ***REMOVED***

    return "#" + this._url.fragment;
  ***REMOVED***

  set hash(v) ***REMOVED***
    if (v === "") ***REMOVED***
      this._url.fragment = null;
      return;
    ***REMOVED***

    const input = v[0] === "#" ? v.substring(1) : v;
    this._url.fragment = "";
    usm.basicURLParse(input, ***REMOVED*** url: this._url, stateOverride: "fragment" ***REMOVED***);
  ***REMOVED***

  toJSON() ***REMOVED***
    return this.href;
  ***REMOVED***
***REMOVED***;
