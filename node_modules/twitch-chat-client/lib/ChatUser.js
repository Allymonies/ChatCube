"use strict";
Object.defineProperty(exports, "__esModule", ***REMOVED*** value: true ***REMOVED***);
exports.ChatUser = void 0;
var tslib_1 = require("tslib");
var cache_decorators_1 = require("@d-fischer/cache-decorators");
var shared_utils_1 = require("@d-fischer/shared-utils");
var twitch_common_1 = require("twitch-common");
/**
 * A user in chat.
 */
var ChatUser = /** @class */ (function () ***REMOVED***
    /** @private */
    function ChatUser(userName, userData) ***REMOVED***
        this._userName = userName.toLowerCase();
        this._userData = userData ? new Map(userData) : new Map();
    ***REMOVED***
    ChatUser.prototype._parseBadgesLike = function (badgesLikeStr) ***REMOVED***
        if (!badgesLikeStr) ***REMOVED***
            return new Map();
        ***REMOVED***
        return new Map(badgesLikeStr.split(',').map(function (badge) ***REMOVED*** return badge.split('/', 2); ***REMOVED***));
    ***REMOVED***;
    Object.defineProperty(ChatUser.prototype, "userName", ***REMOVED***
        /**
         * The name of the user.
         */
        get: function () ***REMOVED***
            return this._userName;
    ***REMOVED***
        enumerable: false,
        configurable: true
    ***REMOVED***);
    Object.defineProperty(ChatUser.prototype, "displayName", ***REMOVED***
        /**
         * The display name of the user.
         */
        get: function () ***REMOVED***
            var _a;
            return (_a = this._userData.get('display-name')) !== null && _a !== void 0 ? _a : this._userName;
    ***REMOVED***
        enumerable: false,
        configurable: true
    ***REMOVED***);
    Object.defineProperty(ChatUser.prototype, "color", ***REMOVED***
        /**
         * The color the user chose to display in chat.
         *
         * Returns null if the user didn't choose a color. In this case, you should generate your own color.
         */
        get: function () ***REMOVED***
            return this._userData.get('color');
    ***REMOVED***
        enumerable: false,
        configurable: true
    ***REMOVED***);
    Object.defineProperty(ChatUser.prototype, "badges", ***REMOVED***
        /**
         * The badges of the user. Returned as a map that maps the badge category to the detail.
         */
        get: function () ***REMOVED***
            var badgesStr = this._userData.get('badges');
            return this._parseBadgesLike(badgesStr);
    ***REMOVED***
        enumerable: false,
        configurable: true
    ***REMOVED***);
    Object.defineProperty(ChatUser.prototype, "badgeInfo", ***REMOVED***
        /**
         * The badge info of the user. Returned as a map that maps the badge category to the detail.
         */
        get: function () ***REMOVED***
            var badgeInfoStr = this._userData.get('badge-info');
            return this._parseBadgesLike(badgeInfoStr);
    ***REMOVED***
        enumerable: false,
        configurable: true
    ***REMOVED***);
    Object.defineProperty(ChatUser.prototype, "userId", ***REMOVED***
        /**
         * The ID of the user.
         */
        get: function () ***REMOVED***
            return this._userData.get('user-id');
    ***REMOVED***
        enumerable: false,
        configurable: true
    ***REMOVED***);
    Object.defineProperty(ChatUser.prototype, "userType", ***REMOVED***
        /**
         * The type of the user.
         * Possible values are undefined, 'mod', 'global_mod', 'admin' and 'staff'.
         */
        get: function () ***REMOVED***
            return this._userData.get('user-type');
    ***REMOVED***
        enumerable: false,
        configurable: true
    ***REMOVED***);
    Object.defineProperty(ChatUser.prototype, "isBroadcaster", ***REMOVED***
        /**
         * Whether the user is the broadcaster.
         */
        get: function () ***REMOVED***
            return this.badges.has('broadcaster');
    ***REMOVED***
        enumerable: false,
        configurable: true
    ***REMOVED***);
    Object.defineProperty(ChatUser.prototype, "isSubscriber", ***REMOVED***
        /**
         * Whether the user is subscribed to the channel.
         */
        get: function () ***REMOVED***
            return this.badges.has('subscriber') || this.isFounder;
    ***REMOVED***
        enumerable: false,
        configurable: true
    ***REMOVED***);
    Object.defineProperty(ChatUser.prototype, "isFounder", ***REMOVED***
        /**
         * Whether the user is a Founder of the channel.
         */
        get: function () ***REMOVED***
            return this.badges.has('founder');
    ***REMOVED***
        enumerable: false,
        configurable: true
    ***REMOVED***);
    Object.defineProperty(ChatUser.prototype, "isMod", ***REMOVED***
        /**
         * Whether the user is a moderator of the channel.
         */
        get: function () ***REMOVED***
            return this.badges.has('moderator');
    ***REMOVED***
        enumerable: false,
        configurable: true
    ***REMOVED***);
    Object.defineProperty(ChatUser.prototype, "isVip", ***REMOVED***
        /**
         * Whether the user is a VIP in the channel.
         */
        get: function () ***REMOVED***
            return this.badges.has('vip');
    ***REMOVED***
        enumerable: false,
        configurable: true
    ***REMOVED***);
    tslib_1.__decorate([
        shared_utils_1.Enumerable(false)
    ], ChatUser.prototype, "_userData", void 0);
    tslib_1.__decorate([
        cache_decorators_1.CachedGetter()
    ], ChatUser.prototype, "badges", null);
    tslib_1.__decorate([
        cache_decorators_1.CachedGetter()
    ], ChatUser.prototype, "badgeInfo", null);
    ChatUser = tslib_1.__decorate([
        cache_decorators_1.Cacheable,
        twitch_common_1.rtfm('twitch-chat-client', 'ChatUser', 'userId')
    ], ChatUser);
    return ChatUser;
***REMOVED***());
exports.ChatUser = ChatUser;
