"use strict";
/// <reference lib="esnext.array" />
Object.defineProperty(exports, "__esModule", ***REMOVED*** value: true ***REMOVED***);
exports.fillTextPositions = exports.parseEmotePositions = exports.parseEmoteOffsets = void 0;
var tslib_1 = require("tslib");
var shared_utils_1 = require("@d-fischer/shared-utils");
var twitch_1 = require("twitch");
/** @private */
function parseEmoteOffsets(emotes) ***REMOVED***
    if (!emotes) ***REMOVED***
        return new Map();
    ***REMOVED***
    return new Map(emotes
        .split('/')
        .map(function (emote) ***REMOVED***
        var _a = tslib_1.__read(emote.split(':', 2), 2), emoteId = _a[0], placements = _a[1];
        if (!placements) ***REMOVED***
            return null;
        ***REMOVED***
        return [emoteId, placements.split(',')];
    ***REMOVED***)
        .filter(function (e) ***REMOVED*** return e !== null; ***REMOVED***));
***REMOVED***
exports.parseEmoteOffsets = parseEmoteOffsets;
/** @private */
function parseEmotePositions(message, emoteOffsets) ***REMOVED***
    return tslib_1.__spread(emoteOffsets.entries()).flatMap(function (_a) ***REMOVED***
        var _b = tslib_1.__read(_a, 2), emote = _b[0], placements = _b[1];
        return placements.map(function (placement) ***REMOVED***
            var _a = tslib_1.__read(placement.split('-'), 2), startStr = _a[0], endStr = _a[1];
            var start = +startStr;
            var end = +endStr;
            var name = shared_utils_1.utf8Substring(message, start, end + 1);
            return ***REMOVED***
                type: 'emote',
                position: start,
                length: end - start + 1,
                id: emote,
                name: name,
                displayInfo: new twitch_1.ChatEmote(***REMOVED***
                    code: name,
                    id: parseInt(emote, 10),
                    emoticon_set: -1
                ***REMOVED***)
            ***REMOVED***;
        ***REMOVED***);
    ***REMOVED***)
        .sort(function (a, b) ***REMOVED*** return a.position - b.position; ***REMOVED***);
***REMOVED***
exports.parseEmotePositions = parseEmotePositions;
/** @private */
function fillTextPositions(message, otherPositions) ***REMOVED***
    var e_1, _a;
    var messageLength = shared_utils_1.utf8Length(message);
    if (!otherPositions.length) ***REMOVED***
        return [
            ***REMOVED***
                type: 'text',
                position: 0,
                length: messageLength,
                text: message
            ***REMOVED***
        ];
    ***REMOVED***
    var result = [];
    var currentPosition = 0;
    try ***REMOVED***
        for (var otherPositions_1 = tslib_1.__values(otherPositions), otherPositions_1_1 = otherPositions_1.next(); !otherPositions_1_1.done; otherPositions_1_1 = otherPositions_1.next()) ***REMOVED***
            var token = otherPositions_1_1.value;
            if (token.position > currentPosition) ***REMOVED***
                result.push(***REMOVED***
                    type: 'text',
                    position: currentPosition,
                    length: token.position - currentPosition,
                    text: shared_utils_1.utf8Substring(message, currentPosition, token.position)
                ***REMOVED***);
            ***REMOVED***
            result.push(token);
            currentPosition = token.position + token.length;
        ***REMOVED***
    ***REMOVED***
    catch (e_1_1) ***REMOVED*** e_1 = ***REMOVED*** error: e_1_1 ***REMOVED***; ***REMOVED***
    finally ***REMOVED***
        try ***REMOVED***
            if (otherPositions_1_1 && !otherPositions_1_1.done && (_a = otherPositions_1.return)) _a.call(otherPositions_1);
        ***REMOVED***
        finally ***REMOVED*** if (e_1) throw e_1.error; ***REMOVED***
    ***REMOVED***
    if (currentPosition < messageLength) ***REMOVED***
        result.push(***REMOVED***
            type: 'text',
            position: currentPosition,
            length: messageLength - currentPosition,
            text: shared_utils_1.utf8Substring(message, currentPosition)
        ***REMOVED***);
    ***REMOVED***
    return result;
***REMOVED***
exports.fillTextPositions = fillTextPositions;
